using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using BusinessLayer;
using DataAccess;

namespace WinFrontEnd
{
    public partial class FormAlmacenGuiaIngresoEgreso : Form
    {
        MovimientoAlmacenClass IngresoEgreso = new MovimientoAlmacenClass();
        List<v_ListadoIngresosEgresosAlmacen_1> ListaIngresoEgreso = new List<v_ListadoIngresosEgresosAlmacen_1>();
        AlmacenClass ListaAlmacenes = new AlmacenClass();
        AuxiliarVariosClass CombosAuxiliares = new AuxiliarVariosClass();

        AperturaCierreCajaClass AperturaCierre = new AperturaCierreCajaClass();
        List<AperturaCierreCaja> DatosAperturaCierre = new List<AperturaCierreCaja>();

        DateTime FechaHoy;
        string Motivo;
        int IdAlmacen;
        string Tipo;
        int LineaVerDetalle;
        Boolean Carga;

        public FormAlmacenGuiaIngresoEgreso(string _tipo)
        {
            InitializeComponent();

            Tipo = _tipo;

            this.Text = "Listado de Guías de " + Tipo;
        }

        private void FormListadoGuiaDeIngreso_Load(object sender, EventArgs e)
        {
            Carga = false;

            FechaHoy = VariablesPublicas._FechaHoy;

            FechaMonthCalendar.SetDate(FechaHoy);

            Motivo = "";

            if (Tipo == "Transferencia")
                PorConfirmarCheckBox.Visible = true;
            else
                PorConfirmarCheckBox.Visible = false;

            LlenarCombos();

            LlenaGrilla();

            Carga = true;
        }

        private void LlenaGrilla()
        {

            ListaIngresoEgreso.Clear();
            
            if (PorConfirmarCheckBox.Checked == true)
            {
                ListaIngresoEgreso = IngresoEgreso.PorConfirmar(IdAlmacen);
            }
            else
            { 
                ListaIngresoEgreso = IngresoEgreso.ListadoXFiltro(Tipo.Substring(0, 1), FechaMonthCalendar.SelectionStart.Date, FechaMonthCalendar.SelectionEnd.Date, IdAlmacen, Motivo);
            }

            IngresosEgresosBindingSource.DataSource = ListaIngresoEgreso;

            IngresosEgresosBindingSource.ResetBindings(false);

        }

        private void LlenarCombos()
        {
            AlmacenComboBox.Enabled = false;
            MotivoComboBox.Enabled = false;

            AlmacenComboBox.DisplayMember = "Nombre";
            AlmacenComboBox.ValueMember = "IdAlmacen";
            AlmacenComboBox.DataSource = ListaAlmacenes.ObtenerListaActivos();

            if (VariablesPublicas._Cargo == "ADMINISTRADOR" || VariablesPublicas._Cargo == "ALMACENERO")
                IdAlmacen = 0;
            else
            {
                IdAlmacen = VariablesPublicas._IdAlmacen;
                AlmacenComboBox.SelectedValue = IdAlmacen;
                AlmacenCheckBox.Checked = true;
                AlmacenCheckBox.Enabled = false;
            }

            switch (Tipo)
            {
                case "Ingreso":
                    MotivoComboBox.DisplayMember = "Descripcion";
                    MotivoComboBox.ValueMember = "Descripcion";
                    MotivoComboBox.DataSource = CombosAuxiliares.ObtenerLista("ALMACEN INGRESO");
                    break;
                case "Egreso":
                    MotivoComboBox.DisplayMember = "Descripcion";
                    MotivoComboBox.ValueMember = "Descripcion";
                    MotivoComboBox.DataSource = CombosAuxiliares.ObtenerLista("ALMACEN EGRESO");
                    break;
                case "Transferencia":
                    MotivoComboBox.DisplayMember = "Descripcion";
                    MotivoComboBox.ValueMember = "Descripcion";
                    MotivoComboBox.DataSource = CombosAuxiliares.ObtenerLista("ALMACEN TRANSFERENCIA");
                    break;
            }
        }

        private void NuevoButton_Click(object sender, EventArgs e)
        {
            //FormAlmacenIngresoEgresoRegistro faie = new FormAlmacenIngresoEgresoRegistro(Tipo, 0, true, 0);
            FormAlmacenIngresoEgresoRegistro faie = new FormAlmacenIngresoEgresoRegistro(Tipo, 0);
            faie.StartPosition = FormStartPosition.CenterScreen;            
            faie.ShowDialog(this);

            LlenaGrilla();
        }

        private void FechaMonthCalendar_DateSelected(object sender, DateRangeEventArgs e)
        {

            //FechaHoy = FechaMonthCalendar.SelectionStart.Date;

            //AplicaFiltro();

        }

        private void SalirButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void AlmacenCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (Carga)
            {
                if (AlmacenCheckBox.Checked == true)
                {

                    AlmacenComboBox.Enabled = true;
                    IdAlmacen = int.Parse(AlmacenComboBox.SelectedValue.ToString());

                }
                else
                {

                    AlmacenComboBox.Enabled = false;
                    IdAlmacen = 0;

                }
            }
        }

        private void MotivoCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (MotivoCheckBox.Checked == true)
            {

                MotivoComboBox.Enabled = true;
                Motivo = MotivoComboBox.Text;

            }
            else
            {

                MotivoComboBox.Enabled = false;
                Motivo = "";

            }
        }

        private void PorConfirmarCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (PorConfirmarCheckBox.Checked == true)
            {
                MotivoCheckBox.Checked = false;
                MotivoCheckBox.Enabled = false;
                MotivoComboBox.Text = "TRANSFERENCIA INGRESO";
            }
            else
            {

                MotivoCheckBox.Enabled = true;

            }
        }

        private void AlmacenComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (Carga)
            {
                if (AlmacenComboBox.Enabled)
                {
                    IdAlmacen = int.Parse(AlmacenComboBox.SelectedValue.ToString());
                }
                else
                {
                    IdAlmacen = 0;
                }
            }
        }

        private void MotivoComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (MotivoComboBox.Enabled)
            {
                Motivo = MotivoComboBox.Text;
            }
            else
            {
                Motivo = "";
            }
        }

        private void PersonalDataGridView_CellMouseUp(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right & e.RowIndex != -1 & e.ColumnIndex != -1)
            {
                GrillaDataGridView.Rows[e.RowIndex].Selected = true;
                GrillaDataGridView.CurrentCell = GrillaDataGridView[e.ColumnIndex, e.RowIndex];
                LineaVerDetalle = e.RowIndex;
                MenuContextMenuStrip.Show(GrillaDataGridView, e.Location);
                MenuContextMenuStrip.Show(Cursor.Position);
            }
        }

        private void verDetalleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (LineaVerDetalle != -1)
            {

                FormDetalles fdet = new FormDetalles("DetalleAlmacenIngresoEgreso", ListaIngresoEgreso[LineaVerDetalle].IdMovimiento, VariablesPublicas._IdUsuario, IdAlmacen, FechaHoy);

                fdet.ShowDialog();

            }
        }

        private void ProcesarButton_Click(object sender, EventArgs e)
        {
            LlenaGrilla();
        }

        private void generaGuíaDeRemisiónToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (LineaVerDetalle != -1)
            {
                if (ListaIngresoEgreso[LineaVerDetalle].IdGuiaRemision == null || ListaIngresoEgreso[LineaVerDetalle].IdGuiaRemision == 0)
                {
                    if (ListaIngresoEgreso[LineaVerDetalle].Tipo == "E" || ListaIngresoEgreso[LineaVerDetalle].Motivo == "TRANSFERENCIA EGRESO")
                    {
                        FormGuiaDeRemision fgdr = new FormGuiaDeRemision(ListaIngresoEgreso[LineaVerDetalle].IdMovimiento);
                        fgdr.ShowDialog();

                        //ListaIngresoEgreso[LineaVerDetalle].IdGuiaRemision = 0;

                        LlenaGrilla();

                        //IngresosEgresosBindingSource.ResetBindings(false);
                    }
                    else
                        MessageBox.Show("Este tipo de movimiento no genera Guía de Remisión", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                else
                {
                    MessageBox.Show("Este movimiento ya generó una Guía de Remisión", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
        }

        private void FormAlmacenGuiaIngresoEgreso_Shown(object sender, EventArgs e)
        {

            if (VariablesPublicas._Cargo == "CAJERO")
            {

                AlmacenCheckBox.Checked = true;
                AlmacenCheckBox.Enabled = false;

                AlmacenComboBox.SelectedValue = VariablesPublicas._IdAlmacen;
                AlmacenComboBox.Enabled = false;

            }
        }

        private void confirmarIngresoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (LineaVerDetalle != -1)
            {
                if(ListaIngresoEgreso[LineaVerDetalle].Motivo == "TRANSFERENCIA INGRESO")
                {
                    if (ListaIngresoEgreso[LineaVerDetalle].Estado == "E")
                    {
                        if (ListaIngresoEgreso[LineaVerDetalle].IdUsuarioConfirma == null)
                        {
                            DialogResult result;

                            result = MessageBox.Show("¿Desea confirmar el ingreso de los artículos?", "S.G.V.", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                            if (result == System.Windows.Forms.DialogResult.Yes)
                            {
                                string men = IngresoEgreso.ConfirmaIngreso(ListaIngresoEgreso[LineaVerDetalle].IdMovimiento, VariablesPublicas._IdUsuario);
                                switch (men)
                                {
                                    case "OK":
                                        //ListaIngresoEgreso[LineaVerDetalle].IdUsuarioConfirma = VariablesPublicas._IdUsuario;
                                        LlenaGrilla();
                                        //IngresosEgresosBindingSource.ResetBindings(false);
                                        MessageBox.Show("¡Movimiento confirmado!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        break;
                                    case "Error":
                                        MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: Movimiento no existe en la BD", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                        break;
                                    default:
                                        MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: " + men, "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                        break;
                                }

                            }
                        }
                        else
                        {
                            MessageBox.Show("¡Movimiento ya confirmado!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                    }
                    else
                    {
                        MessageBox.Show("¡Movimiento anulado, no se puede confirmar!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
                else
                {
                    MessageBox.Show("¡Sólo se pueden confirmar las TRANSFERENCIAS POR INGRESO!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
        }

        private void anularToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (LineaVerDetalle != -1)
            {
                if (VariablesPublicas._Cargo == "ADMINISTRADOR")
                {
                    if (ListaIngresoEgreso[LineaVerDetalle].Motivo != "TRANSFERENCIA INGRESO")
                    {
                        if (ListaIngresoEgreso[LineaVerDetalle].Estado == "E")
                        {
                            //if (ListaIngresoEgreso[LineaVerDetalle].IdUsuarioConfirma == null & ListaIngresoEgreso[LineaVerDetalle].Motivo != "TRANSFERENCIA EGRESO")
                            //{
                                DialogResult result;

                                result = MessageBox.Show("¿Desea anular este movimiento?", "S.G.V.", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                                if (result == System.Windows.Forms.DialogResult.Yes)
                                {
                                    string men = IngresoEgreso.AnulaMovimiento(ListaIngresoEgreso[LineaVerDetalle].IdMovimiento);
                                    switch (men)
                                    {
                                        case "OK":
                                            //ListaIngresoEgreso[LineaVerDetalle].Estado = "A";
                                            LlenaGrilla();
                                            //IngresosEgresosBindingSource.ResetBindings(false);
                                            MessageBox.Show("¡Movimiento anulado!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            break;
                                        case "Error":
                                            MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: Movimiento no existe en la BD", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                            break;
                                        default:
                                            MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: " + men, "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                            break;
                                    }
                                }
                            //}
                            //else
                            //{
                            //    MessageBox.Show("¡Movimiento confirmado, no se puede anular!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            //}
                        }
                        else
                        {
                            MessageBox.Show("¡Movimiento Anulado!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                    }
                    else
                    {
                        MessageBox.Show("¡Debe anular la TRANFERENCIA EGRESO CORRESPONDIENTE!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
                else
                {
                    MessageBox.Show("¡No está autorizado para realizar esta operación!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
        }

        private void ImprimirButton_Click(object sender, EventArgs e)
        {

        }

        private void ModificarButton_Click(object sender, EventArgs e)
        {
            if (VerificaApertura())
            { 
                //FormAlmacenIngresoEgresoRegistro faie = new FormAlmacenIngresoEgresoRegistro(Tipo, 0, false, ListaIngresoEgreso[LineaVerDetalle].IdMovimiento);
                FormAlmacenIngresoEgresoRegistro faie = new FormAlmacenIngresoEgresoRegistro(Tipo, 0);
                faie.StartPosition = FormStartPosition.CenterScreen;
                faie.ShowDialog(this);

                LlenaGrilla();
            }
        }

        private Boolean VerificaApertura()
        {
            DatosAperturaCierre = AperturaCierre.ObtenerDatosApertura(VariablesPublicas._IdUsuario, VariablesPublicas._IdAlmacen, ListaIngresoEgreso[LineaVerDetalle].Fecha);

            if (DatosAperturaCierre.Count == 1)
            {
                if (DatosAperturaCierre[0].Estado != "C")
                {
                    MessageBox.Show("¡Caja cerrada para la fecha: " + ListaIngresoEgreso[LineaVerDetalle].Fecha + "!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                else
                {
                    return true;
                }

            }
            else
            {
                MessageBox.Show("¡No hay apertura de caja para la fecha: " + ListaIngresoEgreso[LineaVerDetalle].Fecha + "!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
        }

        private void FechaMonthCalendar_DateChanged(object sender, DateRangeEventArgs e)
        {

        }

        private void GrillaDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}
