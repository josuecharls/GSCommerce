using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using BusinessLayer;
using DataAccess;

namespace WinFrontEnd
{
    public partial class FormListadoOrdenesCompras : Form
    {
        OrdenDeCompraClass OrdenCompra = new OrdenDeCompraClass();
        List<v_ListadoOC_1> ListaOC = new List<v_ListadoOC_1>();
        VariosClass varios = new VariosClass();

        DateTime FechaHoy;
        int LineaSeleccionada;
        int IdProveedor;

        public FormListadoOrdenesCompras()
        {
            InitializeComponent();
        }

        private void FormListadoOrdenesCompras_Load(object sender, EventArgs e)
        {

            FechaHoy = VariablesPublicas._FechaHoy;

            FechaMonthCalendar.SetDate(FechaHoy);

            IdProveedor = 0;

            EstadoComboBox.SelectedIndex = 0;

            LlenaGrilla();

        }

        private void LlenaGrilla()
        {
            ListaOC.Clear();

            ListaOC = OrdenCompra.ListadoOC(FechaMonthCalendar.SelectionStart.Date, FechaMonthCalendar.SelectionEnd.Date, IdProveedor, EstadoComboBox.Text);

            ListadoOCBindingSource.DataSource = ListaOC;

            ListadoOCBindingSource.ResetBindings(false);

        }

        private void FechaMonthCalendar_DateSelected(object sender, DateRangeEventArgs e)
        {

            //LlenaGrilla();

        }

        private void PersonalDataGridView_CellMouseUp(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right & e.RowIndex != -1 & e.ColumnIndex != -1)
            {
                GrillaDataGridView.Rows[e.RowIndex].Selected = true;
                GrillaDataGridView.CurrentCell = GrillaDataGridView[e.ColumnIndex, e.RowIndex];
                LineaSeleccionada = e.RowIndex;
                MenuContextMenuStrip.Show(GrillaDataGridView, e.Location);
                MenuContextMenuStrip.Show(Cursor.Position);
            }
        }

        private void verDetalleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (LineaSeleccionada != -1)
            {

                FormDetalles fdet = new FormDetalles("DetalleOC", ListaOC[LineaSeleccionada].IdOc, 0, 0, FechaHoy);

                fdet.ShowDialog();

            }
        }

        private void generarIngresoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (LineaSeleccionada != -1)
            {
                if (ListaOC[LineaSeleccionada].Estado.Substring(0, 1) == "P")
                {
                    //FormAlmacenIngresoEgresoRegistro faie = new FormAlmacenIngresoEgresoRegistro("Ingreso", ListaOC[LineaSeleccionada].IdOc, true, 0);
                    FormAlmacenIngresoEgresoRegistro faie = new FormAlmacenIngresoEgresoRegistro("Ingreso", ListaOC[LineaSeleccionada].IdOc);
                    faie.StartPosition = FormStartPosition.CenterScreen;
                    faie.ShowDialog(this);

                    ProcesarButton_Click(sender, e);
                }
                else
                {

                    MessageBox.Show("¡Orden de compra seleccionada se encuentra en estado " + ListaOC[LineaSeleccionada].Estado + ", no se puede realizar ingreso!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
            }
        }

        private void anularStripMenuItem_Click(object sender, EventArgs e)
        {
            if (LineaSeleccionada != -1)
            {

                if (ListaOC[LineaSeleccionada].Estado.Substring(0, 2) == "PE")
                {

                    DialogResult result;

                    result = MessageBox.Show("¿Desea ANULAR la OC: " + ListaOC[LineaSeleccionada].NumeroOC + " ?", "S.G.V.", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    if (result == System.Windows.Forms.DialogResult.Yes)
                    {
                        string men = OrdenCompra.ActualizaEstado(ListaOC[LineaSeleccionada].IdOc, "AN", varios.FechaHoraServidor());
                        switch (men)
                        {
                            case "OK":
                                MessageBox.Show("¡OC Anulada!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                break;
                            case "Error":
                                MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: OC no existe en la BD", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                break;
                            default:
                                MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: " + men, "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                break;
                        }

                    }

                    LlenaGrilla();

                }
                else
                {

                    MessageBox.Show("¡Orden de compra seleccionada se encuentra en estado " + ListaOC[LineaSeleccionada].Estado + ", no se puede anular!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }

            }
        }

        private void NuevoButton_Click(object sender, EventArgs e)
        {
            FormOrdenDeCompra fodc = new FormOrdenDeCompra();

            fodc.ShowDialog();

            ProcesarButton_Click(sender, e);
        }

        private void ProcesarButton_Click(object sender, EventArgs e)
        {

            LlenaGrilla();

            //if (IdProveedor != 0)
            //{

            //    LlenaGrilla();

            //}
            //else
            //{

            //    MessageBox.Show("¡Seleccione proveedor!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);

            //}

        }

        private void BuscaProveedorButton_Click(object sender, EventArgs e)
        {

            FormBuscarProveedor fbprov = new FormBuscarProveedor();

            fbprov.ShowDialog();

            if (fbprov.Prov != null)
            {
                IdProveedor = fbprov.Prov.IdProveedor;
                ProveedorLabel.Text = fbprov.Prov.Nombre;
            }

        }

        private void SalirButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void QuitaButton_Click(object sender, EventArgs e)
        {
            IdProveedor = 0;
            ProveedorLabel.Text = "";
        }

        private void ImprimirButton_Click(object sender, EventArgs e)
        {

        }
    }
}
