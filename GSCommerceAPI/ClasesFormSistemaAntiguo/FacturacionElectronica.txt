using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.IO.Compression;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading;
using System.Xml;

namespace FE
{
    public class FacturacionElectronica
    {
        string MSG = "";
        public Int64 COD_ERROR = 0;
        private string Certificado = "";
        private string Password = "";
        private string Firma = "";

        string strRetornoResumen = "";

        public FacturacionElectronica(string _certificado, string _pass, string _firma)
        {
            Certificado = _certificado;
            Password = _pass;
            Firma = _firma;
        }

        public double Total { get; set; }
        public double IGV { get; set; }
        public double DescuentoTotal { get; set; }
        public double DescuentoFactor { get; set; }
        public string TotalenLetras { get; set; }
        public string Serie { get; set; }
        public string NroDoc { get; set; }
        public DateTime Fecha { get; set; }
        public string Hora { get; set; }
        public string TipoDoc { get; set; }
        public string RucEmisor { get; set; }
        public string RazonSocialEmisor { get; set; }

        public string Ubigeo { get; set; }
        public string Provincia { get; set; }
        public string Distrito { get; set; }
        public string Departamento { get; set; }
        public string DireccionEmisor { get; set; }

        public string IdCliente { get; set; }
        public string DocumentoCliente { get; set; }
        public string Cliente { get; set; }
        public string DireccionCliente { get; set; }

        public string Hash { get; private set; }
        public string XmlDoc { get; private set; }

        public List<Detalles> DetallesComprobante { get; set; }

        public class Detalles
        {
            public int Id { get; set; }
            public double Cantidad { get; set; }
            public decimal Total { get; set; }
            public decimal PUconIGV { get; set; }
            public decimal PUsinIGV { get; set; }
            public decimal IGV { get; set; }
            public string DescripcionItem { get; set; }
            public string CodigoItem { get; set; }
        }

        public void Firmar(string ruta)
        {
            string _c = "\"";
            string doc = Serie + "-" + NroDoc;

            StringBuilder CadenaXML = new StringBuilder();

            CadenaXML.AppendLine(@"<?xml version=" + _c + "1.0" + _c + " encoding=" + _c + "ISO-8859-1" + _c + " standalone=" + _c + "no" + _c + "?>");

            CadenaXML.AppendLine(@"<Invoice xmlns=" + _c + "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" + _c);
            CadenaXML.AppendLine(@"xmlns:sac=" + _c + "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1" + _c);
            CadenaXML.AppendLine(@"xmlns:cac=" + _c + "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" + _c);
            CadenaXML.AppendLine(@"xmlns:cbc=" + _c + "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" + _c);
            CadenaXML.AppendLine(@"xmlns:udt=" + _c + "urn:un:unece:uncefact:data:specification:UnqualifiedDataTypesSchemaModule:2" + _c);
            CadenaXML.AppendLine(@"xmlns:ccts=" + _c + "urn:un:unece:uncefact:documentation:2" + _c);
            CadenaXML.AppendLine(@"xmlns:ext=" + _c + "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" + _c);
            CadenaXML.AppendLine(@"xmlns:qdt=" + _c + "urn:oasis:names:specification:ubl:schema:xsd:QualifiedDatatypes-2" + _c);
            CadenaXML.AppendLine(@"xmlns:ds=" + _c + "http://www.w3.org/2000/09/xmldsig#" + _c);
            CadenaXML.AppendLine(@"xmlns:schemaLocation=" + _c + "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" + _c);
            CadenaXML.AppendLine(@"xmlns:xsi=" + _c + "http://www.w3.org/2001/XMLSchema-instance" + _c + ">");
            CadenaXML.AppendLine(@"<ext:UBLExtensions>");
            //**********
            //*****Primera Extensión para Firma Digital
            CadenaXML.AppendLine(@"<ext:UBLExtension>");
            CadenaXML.AppendLine(@"<ext:ExtensionContent>");
            CadenaXML.AppendLine(@"</ext:ExtensionContent>");
            CadenaXML.AppendLine(@"</ext:UBLExtension>");            
            //*****Segunda Extensión para Información Adicional
            CadenaXML.AppendLine(@"<ext:UBLExtension>");
            CadenaXML.AppendLine(@"<ext:ExtensionContent>");
            CadenaXML.AppendLine(@"<sac:AdditionalInformation>");
            //Valor total de ventas gravadas
            CadenaXML.AppendLine(@"<sac:AdditionalMonetaryTotal>");
            CadenaXML.AppendLine(@"<cbc:ID>1001</cbc:ID>");
            CadenaXML.AppendLine(@"<cbc:PayableAmount currencyID=" + _c + "PEN" + _c + " >" + Total.ToString("F2") + "</cbc:PayableAmount>");
            CadenaXML.AppendLine(@"</sac:AdditionalMonetaryTotal>");
            //Valor del Descuento Total
            CadenaXML.AppendLine(@"<sac:AdditionalMonetaryTotal>");
            CadenaXML.AppendLine(@"<cbc:ID>2005</cbc:ID>");
            CadenaXML.AppendLine(@"<cbc:PayableAmount currencyID=" + _c + "PEN" + _c + " >" + DescuentoTotal.ToString("F2") + "</cbc:PayableAmount>");
            CadenaXML.AppendLine(@"</sac:AdditionalMonetaryTotal>");
            //Valor de la venta en letras
            CadenaXML.AppendLine(@"<sac:AdditionalProperty>");
            CadenaXML.AppendLine(@"<cbc:ID>1000</cbc:ID>");
            CadenaXML.AppendLine(@"<cbc:Value>" + TotalenLetras + "</cbc:Value>");
            CadenaXML.AppendLine(@"</sac:AdditionalProperty>");
            CadenaXML.AppendLine(@"</sac:AdditionalInformation>");
            CadenaXML.AppendLine(@"</ext:ExtensionContent>");
            CadenaXML.AppendLine(@"</ext:UBLExtension>");
            CadenaXML.AppendLine(@"</ext:UBLExtensions>");
            //**********
            //*****Versión de UBL
            CadenaXML.AppendLine(@"<cbc:UBLVersionID>2.1</cbc:UBLVersionID>");
            CadenaXML.AppendLine(@"<cbc:CustomizationID>2.0</cbc:CustomizationID>");
            CadenaXML.AppendLine(@"<cbc:ProfileID schemeURI=" + _c + "urn:pe:gob:sunat:cpe:see:gem:catalogos:catalogo17" + _c + " schemeAgencyName=" + _c + "PE: SUNAT" + _c + " schemeName=" + _c + "SUNAT: Identificador de Tipo de Operación" + _c + ">0101</cbc:ProfileID>");
            //*******************
            //*****Serie y Fecha del doc
            CadenaXML.AppendLine(@"<cbc:ID>" + doc + "</cbc:ID>");
            CadenaXML.AppendLine(@"<cbc:IssueDate>" + Fecha.ToString("yyyy-MM-dd") + "</cbc:IssueDate>");
            CadenaXML.AppendLine(@"<cbc:IssueTime>" + Hora + "</cbc:IssueTime>");
            CadenaXML.AppendLine(@"<cbc:InvoiceTypeCode listID=" + _c + "0101" + _c + ">" + TipoDoc + "</cbc:InvoiceTypeCode>");
            CadenaXML.AppendLine(@"<cbc:Note languageLocaleID=" + _c + "1000" + _c + "><![CDATA[" + TotalenLetras + "]]></cbc:Note>");
            CadenaXML.AppendLine(@"<cbc:DocumentCurrencyCode>PEN</cbc:DocumentCurrencyCode>");
            CadenaXML.AppendLine(@"<cbc:LineCountNumeric>" + DetallesComprobante.Count + "</cbc:LineCountNumeric>");
            //**********
            //*****Segunda para de firma digital
            CadenaXML.AppendLine(@"<cac:Signature>");
            CadenaXML.AppendLine(@"<cbc:ID>SF" + doc + "</cbc:ID>");
            CadenaXML.AppendLine(@"<cac:SignatoryParty>");
            CadenaXML.AppendLine(@"<cac:PartyIdentification>");
            CadenaXML.AppendLine(@"<cbc:ID>" + RucEmisor + "</cbc:ID>");
            CadenaXML.AppendLine(@"</cac:PartyIdentification>");
            CadenaXML.AppendLine(@"<cac:PartyName>");
            CadenaXML.AppendLine(@"<cbc:Name>" + RazonSocialEmisor + "</cbc:Name>");
            CadenaXML.AppendLine(@"</cac:PartyName>");
            CadenaXML.AppendLine(@"</cac:SignatoryParty>");
            CadenaXML.AppendLine(@"<cac:DigitalSignatureAttachment>");
            CadenaXML.AppendLine(@"<cac:ExternalReference>");
            CadenaXML.AppendLine(@"<cbc:URI>#SF" + doc + "</cbc:URI>");
            CadenaXML.AppendLine(@"</cac:ExternalReference>");
            CadenaXML.AppendLine(@"</cac:DigitalSignatureAttachment>");
            CadenaXML.AppendLine(@"</cac:Signature>");
            //**********
            //*****Datos del Emisor
            CadenaXML.AppendLine(@"<cac:AccountingSupplierParty>");
            CadenaXML.AppendLine(@"<cbc:CustomerAssignedAccountID>" + RucEmisor + "</cbc:CustomerAssignedAccountID>");
            CadenaXML.AppendLine(@"<cbc:AdditionalAccountID>6</cbc:AdditionalAccountID>");
            CadenaXML.AppendLine(@"<cac:Party>");            
            CadenaXML.AppendLine(@"<cac:PartyIdentification><cbc:ID schemeID=" + _c + "6" + _c + ">" + RucEmisor + "</cbc:ID></cac:PartyIdentification>");
            CadenaXML.AppendLine(@"<cac:PartyName>");
            CadenaXML.AppendLine(@"<cbc:Name>" + RazonSocialEmisor + "</cbc:Name>");
            CadenaXML.AppendLine(@"</cac:PartyName>");
            //CadenaXML.AppendLine(@"<cac:PostalAddress>");
            //CadenaXML.AppendLine(@"<cbc:ID>" + Ubigeo + "</cbc:ID>");
            //CadenaXML.AppendLine(@"<cbc:StreetName>" + DireccionEmisor + "</cbc:StreetName>");
            //CadenaXML.AppendLine(@"<cbc:CitySubdivisionName></cbc:CitySubdivisionName>");
            //CadenaXML.AppendLine(@"<cbc:CityName>" + Provincia + "</cbc:CityName>");
            //CadenaXML.AppendLine(@"<cbc:CountrySubentity></cbc:CountrySubentity>");
            //CadenaXML.AppendLine(@"<cbc:District>" + Distrito + "</cbc:District>");
            //CadenaXML.AppendLine(@"<cac:Country>");
            //CadenaXML.AppendLine(@"<cbc:IdentificationCode>PE</cbc:IdentificationCode>");
            //CadenaXML.AppendLine(@"</cac:Country>");
            //CadenaXML.AppendLine(@"</cac:PostalAddress>");
            CadenaXML.AppendLine(@"<cac:PartyLegalEntity>");
            CadenaXML.AppendLine(@"<cbc:RegistrationName>" + RazonSocialEmisor + "</cbc:RegistrationName>");
            CadenaXML.AppendLine(@"<cac:RegistrationAddress>");
            CadenaXML.AppendLine(@"<cbc:ID>" + Ubigeo + "</cbc:ID>");
            CadenaXML.AppendLine(@"<cbc:AddressTypeCode>0000</cbc:AddressTypeCode>");
            CadenaXML.AppendLine(@"<cbc:CitySubdivisionName>NONE</cbc:CitySubdivisionName>");
            CadenaXML.AppendLine(@"<cbc:CityName>" + Provincia + "</cbc:CityName>");
            CadenaXML.AppendLine(@"<cbc:CountrySubentity>" + Departamento + "</cbc:CountrySubentity>");
            CadenaXML.AppendLine(@"<cbc:District>" + Distrito + "</cbc:District>");
            CadenaXML.AppendLine(@"<cac:Country>");
            CadenaXML.AppendLine(@"<cbc:IdentificationCode>PE</cbc:IdentificationCode>");
            CadenaXML.AppendLine(@"</cac:Country>");
            CadenaXML.AppendLine(@"</cac:RegistrationAddress>");
            CadenaXML.AppendLine(@"</cac:PartyLegalEntity>");
            CadenaXML.AppendLine(@"</cac:Party>");
            CadenaXML.AppendLine(@"</cac:AccountingSupplierParty>");
            //**********
            //*****Datos del Cliente
            CadenaXML.AppendLine(@"<cac:AccountingCustomerParty>");
            //CadenaXML.AppendLine(@"<cbc:CustomerAssignedAccountID>" + docCliente + "</cbc:CustomerAssignedAccountID>");
            //CadenaXML.AppendLine(@"<cbc:AdditionalAccountID>" + IdCliente + "</cbc:AdditionalAccountID>");
            CadenaXML.AppendLine(@"<cac:Party>");
            CadenaXML.AppendLine(@"<cac:PartyIdentification><cbc:ID schemeID=" + _c + "6" + _c + ">" + DocumentoCliente + "</cbc:ID></cac:PartyIdentification>");
            CadenaXML.AppendLine(@"<cac:PartyLegalEntity>");
            CadenaXML.AppendLine(@"<cbc:RegistrationName>" + Cliente + "</cbc:RegistrationName>");
            //CadenaXML.AppendLine(@"<cac:RegistrationAddress>");
            //CadenaXML.AppendLine(@"<cbc:StreetName>" + DireccionCliente + "</cbc:StreetName>");
            //CadenaXML.AppendLine(@"<cac:Country>");
            //CadenaXML.AppendLine(@"<cbc:IdentificationCode>PE</cbc:IdentificationCode>");
            //CadenaXML.AppendLine(@"</cac:Country>");
            //CadenaXML.AppendLine(@"</cac:RegistrationAddress>");
            CadenaXML.AppendLine(@"</cac:PartyLegalEntity>");
            CadenaXML.AppendLine(@"</cac:Party>");
            CadenaXML.AppendLine(@"</cac:AccountingCustomerParty>");
            
            //*****Nuevo Requerimiento de Forma de Pago 07/0/20201
            CadenaXML.AppendLine(@"<cac:PaymentTerms>");
            CadenaXML.AppendLine(@"<cbc:ID>FormaPago</cbc:ID>");
            CadenaXML.AppendLine(@"<cbc:PaymentMeansID>Contado</cbc:PaymentMeansID>");
            CadenaXML.AppendLine(@"</cac:PaymentTerms>");

            //*****Datos del Descuento Global en caso lo tenga
            if (DescuentoTotal > 0)
            {
                CadenaXML.AppendLine(@"<cac:AllowanceCharge>");
                CadenaXML.AppendLine(@"<cbc:ChargeIndicator>false</cbc:ChargeIndicator>");
                CadenaXML.AppendLine(@"<cbc:AllowanceChargeReasonCode>02</cbc:AllowanceChargeReasonCode>");
                CadenaXML.AppendLine(@"<cbc:MultiplierFactorNumeric>" + DescuentoFactor.ToString("F2") +
                                     "</cbc:MultiplierFactorNumeric>");
                CadenaXML.AppendLine(@"<cbc:Amount currencyID=" + _c + "PEN" + _c + ">" +
                                     (DescuentoTotal / 1.18).ToString("F2") +
                                     "</cbc:Amount>");
                CadenaXML.AppendLine(@"<cbc:BaseAmount currencyID=" + _c + "PEN" + _c + ">" +
                                     ((Total + DescuentoTotal) / 1.18).ToString("F2") +
                                     "</cbc:BaseAmount>");
                CadenaXML.AppendLine(@"</cac:AllowanceCharge>");
            }

            //*****Totales e IGV
            CadenaXML.AppendLine(@"<cac:TaxTotal>");
            CadenaXML.AppendLine(@"<cbc:TaxAmount currencyID=" + _c + "PEN" + _c + ">" + IGV.ToString("F2") + "</cbc:TaxAmount>");

            CadenaXML.AppendLine(@"<cac:TaxSubtotal>");
            CadenaXML.AppendLine(@"<cbc:TaxableAmount currencyID=" + _c + "PEN" + _c + ">" + (Total - IGV).ToString("F2") + "</cbc:TaxableAmount>");
            CadenaXML.AppendLine(@"<cbc:TaxAmount currencyID=" + _c + "PEN" + _c + ">" + IGV.ToString("F2") + "</cbc:TaxAmount>");
            
            CadenaXML.AppendLine(@"<cac:TaxCategory>");
            CadenaXML.AppendLine(@"<cac:TaxScheme>");

            if (IGV == 0)
            {
                CadenaXML.AppendLine(@"<cbc:ID>9998</cbc:ID>");
                CadenaXML.AppendLine(@"<cbc:Name>INA</cbc:Name>");
                CadenaXML.AppendLine(@"<cbc:TaxTypeCode>FRE</cbc:TaxTypeCode>");
            }
            else
            {
                CadenaXML.AppendLine(@"<cbc:ID>1000</cbc:ID>");
                CadenaXML.AppendLine(@"<cbc:Name>IGV</cbc:Name>");
                CadenaXML.AppendLine(@"<cbc:TaxTypeCode>VAT</cbc:TaxTypeCode>");
            }
            
            CadenaXML.AppendLine(@"</cac:TaxScheme>");
            CadenaXML.AppendLine(@"</cac:TaxCategory>");

            CadenaXML.AppendLine(@"</cac:TaxSubtotal>");

            CadenaXML.AppendLine(@"</cac:TaxTotal>");

            CadenaXML.AppendLine(@"<cac:LegalMonetaryTotal>");
            CadenaXML.AppendLine(@"<cbc:LineExtensionAmount currencyID=" + _c + "PEN" + _c + ">" + (Total - IGV).ToString("F2") + "</cbc:LineExtensionAmount>");
            CadenaXML.AppendLine(@"<cbc:TaxInclusiveAmount currencyID=" + _c + "PEN" + _c + ">" + Total.ToString("F2") + "</cbc:TaxInclusiveAmount>");
            CadenaXML.AppendLine(@"<cbc:PayableAmount currencyID=" + _c + "PEN" + _c + ">" + Total.ToString("F2") + "</cbc:PayableAmount>");
            CadenaXML.AppendLine(@"</cac:LegalMonetaryTotal>");
            //**********
            //*****Detalles del Comprobante
            foreach (Detalles _detalle in DetallesComprobante)
            {
                CadenaXML.AppendLine(@"<cac:InvoiceLine>");
                CadenaXML.AppendLine(@"<cbc:ID>"+_detalle.Id.ToString()+"</cbc:ID>");
                CadenaXML.AppendLine(@"<cbc:InvoicedQuantity unitCode=" + _c + "NIU" + _c + ">" + _detalle.Cantidad + "</cbc:InvoicedQuantity>");
                CadenaXML.AppendLine(@"<cbc:LineExtensionAmount currencyID=" + _c + "PEN" + _c + ">" + (_detalle.Total - _detalle.IGV).ToString("F2") + "</cbc:LineExtensionAmount>");
                CadenaXML.AppendLine(@"<cac:PricingReference>");
                CadenaXML.AppendLine(@"<cac:AlternativeConditionPrice>");
                CadenaXML.AppendLine(@"<cbc:PriceAmount currencyID=" + _c + "PEN" + _c + ">" + _detalle.PUconIGV.ToString("F2") + "</cbc:PriceAmount>");
                CadenaXML.AppendLine(@"<cbc:PriceTypeCode>01</cbc:PriceTypeCode>");
                CadenaXML.AppendLine(@"</cac:AlternativeConditionPrice>");
                CadenaXML.AppendLine(@"</cac:PricingReference>");
                CadenaXML.AppendLine(@"<cac:TaxTotal>");
                CadenaXML.AppendLine(@"<cbc:TaxAmount currencyID=" + _c + "PEN" + _c + ">" + _detalle.IGV.ToString("F2") + "</cbc:TaxAmount>");
                CadenaXML.AppendLine(@"<cac:TaxSubtotal>");
                CadenaXML.AppendLine(@"<cbc:TaxableAmount currencyID=" + _c + "PEN" + _c + ">" + (_detalle.Total - _detalle.IGV).ToString("F2") + "</cbc:TaxableAmount>");
                CadenaXML.AppendLine(@"<cbc:TaxAmount currencyID=" + _c + "PEN" + _c + ">" + _detalle.IGV.ToString("F2") + "</cbc:TaxAmount>");
                CadenaXML.AppendLine(@"<cac:TaxCategory>");

                if (_detalle.IGV == 0)
                {
                    CadenaXML.AppendLine(@"<cbc:Percent>0</cbc:Percent>");
                    CadenaXML.AppendLine(@"<cbc:TaxExemptionReasonCode>30</cbc:TaxExemptionReasonCode>");
                    CadenaXML.AppendLine(@"<cac:TaxScheme>");
                    CadenaXML.AppendLine(@"<cbc:ID>9998</cbc:ID>");
                    CadenaXML.AppendLine(@"<cbc:Name>INA</cbc:Name>");
                    CadenaXML.AppendLine(@"<cbc:TaxTypeCode>FRE</cbc:TaxTypeCode>");
                }
                else
                {
                    CadenaXML.AppendLine(@"<cbc:Percent>18</cbc:Percent>");
                    CadenaXML.AppendLine(@"<cbc:TaxExemptionReasonCode>10</cbc:TaxExemptionReasonCode>");
                    CadenaXML.AppendLine(@"<cac:TaxScheme>");
                    CadenaXML.AppendLine(@"<cbc:ID>1000</cbc:ID>");
                    CadenaXML.AppendLine(@"<cbc:Name>IGV</cbc:Name>");
                    CadenaXML.AppendLine(@"<cbc:TaxTypeCode>VAT</cbc:TaxTypeCode>");
                }

                CadenaXML.AppendLine(@"</cac:TaxScheme>");
                CadenaXML.AppendLine(@"</cac:TaxCategory>");
                CadenaXML.AppendLine(@"</cac:TaxSubtotal>");
                CadenaXML.AppendLine(@"</cac:TaxTotal>");
                CadenaXML.AppendLine(@"<cac:Item>");
                CadenaXML.AppendLine(@"<cbc:Description>" + _detalle.DescripcionItem + "</cbc:Description>");
                CadenaXML.AppendLine(@"<cac:SellersItemIdentification>");
                CadenaXML.AppendLine(@"<cbc:ID>" + _detalle.CodigoItem + "</cbc:ID>");
                CadenaXML.AppendLine(@"</cac:SellersItemIdentification>");
                CadenaXML.AppendLine(@"</cac:Item>");
                CadenaXML.AppendLine(@"<cac:Price>");
                CadenaXML.AppendLine(@"<cbc:PriceAmount currencyID=" + _c + "PEN" + _c + ">" + _detalle.PUsinIGV.ToString("F2") + "</cbc:PriceAmount>");
                CadenaXML.AppendLine(@"</cac:Price>");
                CadenaXML.AppendLine(@"</cac:InvoiceLine>");                
            }

            CadenaXML.AppendLine(@"</Invoice>");

            firmarXML(CadenaXML.ToString(), ruta);
        }

        public void Refirmar(string xml, string ruta)
        {            
            XmlDocument doc = new XmlDocument();

            using (XmlReader _xmlReader = XmlReader.Create(new StringReader(xml)))
            {
                doc.Load(_xmlReader);
            }

            var nodoExtension = doc.GetElementsByTagName("ExtensionContent", EspacioNombres.ext).Item(0);

            nodoExtension.RemoveAll();

            var CertificadoDigital = Convert.ToBase64String(File.ReadAllBytes(Path.Combine(AppContext.BaseDirectory, "Certificados", Certificado)));

            var certificate = new X509Certificate2(Path.Combine(AppContext.BaseDirectory, "Certificados", Certificado), Password);
            //var certificate = new X509Certificate2();
            //certificate.Import(Convert.FromBase64String(CertificadoDigital),
            //    Password, X509KeyStorageFlags.MachineKeySet);

            var signedXml = new SignedXml(doc) { SigningKey = certificate.PrivateKey };
            var xmlSignature = signedXml.Signature;

            var env = new XmlDsigEnvelopedSignatureTransform();

            var reference = new Reference(string.Empty);
            reference.AddTransform(env);
            xmlSignature.SignedInfo.AddReference(reference);

            var keyInfo = new KeyInfo();
            var x509Data = new KeyInfoX509Data(certificate);

            x509Data.AddSubjectName(certificate.Subject);

            keyInfo.AddClause(x509Data);
            xmlSignature.KeyInfo = keyInfo;
            xmlSignature.Id = Firma;
            signedXml.ComputeSignature();

            if (reference.DigestValue != null)
            {
                Hash = Convert.ToBase64String(reference.DigestValue);
            }
            
            nodoExtension.AppendChild(signedXml.GetXml());

            using (var stringWriter = new StringWriter())
            using (var xmlTextWriter = XmlWriter.Create(stringWriter))
            {
                doc.WriteTo(xmlTextWriter);
                xmlTextWriter.Flush();
                XmlDoc = stringWriter.GetStringBuilder().ToString();
            }

            using (var memDoc = new MemoryStream())
            {

                using (var writer = XmlWriter.Create(memDoc,
                    new XmlWriterSettings { Encoding = Encoding.GetEncoding("ISO-8859-1") }))
                {
                    doc.WriteTo(writer);
                }

                using (FileStream file = new FileStream(ruta, FileMode.Create, FileAccess.ReadWrite))
                {
                    memDoc.WriteTo(file);
                }
            }
        }

        private static class EspacioNombres
        {
            public const string xmlnsInvoice = "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2";
            public const string xmlnsCreditNote = "urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2";
            public const string xmlnsDebitNote = "urn:oasis:names:specification:ubl:schema:xsd:DebitNote-2";
            public const string xmlnsVoidedDocuments = "urn:sunat:names:specification:ubl:peru:schema:xsd:VoidedDocuments-1";
            public const string xmlnsSummaryDocuments = "urn:sunat:names:specification:ubl:peru:schema:xsd:SummaryDocuments-1";
            public const string xmlnsRetention = "urn:sunat:names:specification:ubl:peru:schema:xsd:Retention-1";
            public const string xmlnsPerception = "urn:sunat:names:specification:ubl:peru:schema:xsd:Perception-1";
            public const string xmlnsDespatchAdvice = "urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2";
            public const string sac = "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1";
            public const string cac = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2";
            public const string cbc = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2";
            public const string udt = "urn:un:unece:uncefact:data:specification:UnqualifiedDataTypesSchemaModule:2";
            public const string ccts = "urn:un:unece:uncefact:documentation:2";
            public const string ext = "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2";
            public const string qdt = "urn:oasis:names:specification:ubl:schema:xsd:QualifiedDatatypes-2";
            public const string ds = "http://www.w3.org/2000/09/xmldsig#";
            public const string xsi = "http://www.w3.org/2001/XMLSchema-instance";
            public const string ar = "urn:oasis:names:specification:ubl:schema:xsd:ApplicationResponse-2";
            public const string wssecurity =
                "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";

            public const string nodoId = "/ar:ApplicationResponse/cbc:ID";
            public const string nodoResponseDate = "/ar:ApplicationResponse/cbc:ResponseDate";
            public const string nodoResponseTime = "ar:ApplicationResponse/cbc:ResponseTime";
            public const string nodoResponseCode =
                "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:ResponseCode";
            public const string nodoDescription =
                "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:Description";

        }

        public string[] ValidarArchivo(string pArchivo, string sUsuario, string sClave, Int64 ID_DOC_VENTA, Int64 ID_ENVIO_CAB)
        {
            string[] strRetorno = { "", "", "" };

            try
            {
                string sUsuarioSunat = sUsuario;
                string sclaveSunat = sClave;

                string pPath = Path.GetDirectoryName(pArchivo) + Path.DirectorySeparatorChar;
                string pFileName = Path.GetFileName(pArchivo);

                string sNombreXml = pFileName;
                string sNombreZip = pFileName.Replace(".xml", ".zip");
                string sFileXMl = pPath + sNombreXml;
                string sFileZip = pPath + sNombreZip;
                string sRec = "R-" + sNombreXml;
                string sZipRec = "R-" + sNombreZip;
                string sFileZipRec = pPath + sZipRec;

                if (File.Exists(sFileZip))
                    File.Delete(sFileZip);

                using (ZipArchive newFile = ZipFile.Open(sFileZip, ZipArchiveMode.Create))
                    newFile.CreateEntryFromFile(sFileXMl, sNombreXml, CompressionLevel.Fastest);

                byte[] byteArray = File.ReadAllBytes(sFileZip);

                System.Net.ServicePointManager.UseNagleAlgorithm = true;
                System.Net.ServicePointManager.Expect100Continue = false;
                System.Net.ServicePointManager.CheckCertificateRevocationList = true;

                #region Config

                BasicHttpBinding binding = new BasicHttpBinding(BasicHttpSecurityMode.TransportWithMessageCredential);
                binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.None;
                binding.Security.Transport.ProxyCredentialType = HttpProxyCredentialType.None;
                binding.Security.Message.ClientCredentialType = BasicHttpMessageCredentialType.UserName;
                binding.Security.Message.AlgorithmSuite = System.ServiceModel.Security.SecurityAlgorithmSuite.Default;

                EndpointAddress remoteAddress = new EndpointAddress("https://e-factura.sunat.gob.pe/ol-ti-itcpfegem/billService");
                
                #endregion

                ServicioFacturacion2018.billServiceClient ws = new ServicioFacturacion2018.billServiceClient(binding, remoteAddress);
                
                ws.ClientCredentials.UserName.UserName = sUsuarioSunat;
                ws.ClientCredentials.UserName.Password = sclaveSunat;

                var elements = ws.Endpoint.Binding.CreateBindingElements();
                elements.Find<SecurityBindingElement>().EnableUnsecuredResponse = true;
                ws.Endpoint.Binding = new CustomBinding(elements);

                ws.Open();

                byte[] oRespuestaXML = ws.sendBill(sNombreZip, byteArray, "0");//factura, nota de credito, debito

                File.WriteAllBytes(sFileZipRec, oRespuestaXML);

                if (File.Exists(pPath + sRec))
                    File.Delete(pPath + sRec);

                ZipFile.ExtractToDirectory(sFileZipRec, pPath);

                XmlDocument odoc = new XmlDocument();
                odoc.Load(pPath + sRec);

                XmlNode oNodo = odoc.GetElementsByTagName("DocumentResponse", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2").Item(0).FirstChild;
                XmlNodeList oListaNodo = oNodo.ChildNodes;

                string sCodigoValida = oListaNodo[1].InnerText;
                string sMensajeValida = oListaNodo[2].InnerText;
                                
                strRetorno[0] = sCodigoValida;
                strRetorno[1] = sMensajeValida;
                strRetorno[2] = "Mensaje: " + sCodigoValida + ", Descripcion: " + sMensajeValida;

                ws.Close();
            }
            //catch (Exception ex)System.ServiceModel.FaultException ex
            catch (System.ServiceModel.FaultException ex)
            {
                //throw ex;
                strRetorno[0] = ex.Code.Name;
                strRetorno[1] = ex.Message;
                strRetorno[2] = "Mensaje: " + ex.Code.Name + ", Descripcion: " + ex.Message;
            }

            return strRetorno;
        }

        public void firmarXML(string CadenaXML, string ruta, int _tipo = 0)
        {
            XmlDocument docComprobante = new XmlDocument();

            if (_tipo == 0)
            {
                using (XmlReader _xmlReader = XmlReader.Create(new StringReader(CadenaXML.ToString())))
                {
                    docComprobante.Load(_xmlReader);
                }
            }
            else
            {
                docComprobante.PreserveWhitespace = true;
                using (StreamReader reader = new StreamReader(File.Open(ruta, FileMode.Open), Encoding.GetEncoding("ISO-8859-1"))) {
                    docComprobante.Load(reader);
                }
            }

            var CertificadoDigital = Convert.ToBase64String(File.ReadAllBytes(Path.Combine(AppContext.BaseDirectory, "Certificados", Certificado)));

            var certificate = new X509Certificate2(Path.Combine(AppContext.BaseDirectory, "Certificados", Certificado), Password);
            //var certificate = new X509Certificate2();
            //certificate.Import(Convert.FromBase64String(CertificadoDigital),
            //    Password, X509KeyStorageFlags.MachineKeySet);

            var signedXml = new SignedXml(docComprobante) { SigningKey = certificate.PrivateKey };
            var xmlSignature = signedXml.Signature;

            var env = new XmlDsigEnvelopedSignatureTransform();

            var reference = new Reference(string.Empty);
            reference.AddTransform(env);
            xmlSignature.SignedInfo.AddReference(reference);

            var keyInfo = new KeyInfo();
            var x509Data = new KeyInfoX509Data(certificate);

            x509Data.AddSubjectName(certificate.Subject);

            keyInfo.AddClause(x509Data);
            xmlSignature.KeyInfo = keyInfo;
            xmlSignature.Id = Firma;
            signedXml.ComputeSignature();

            if (reference.DigestValue != null)
            {
                Hash = Convert.ToBase64String(reference.DigestValue);
            }

            var nodoExtension = docComprobante.GetElementsByTagName("ExtensionContent", EspacioNombres.ext).Item(0);

            nodoExtension.AppendChild(signedXml.GetXml());

            using (var stringWriter = new StringWriter())
            using (var xmlTextWriter = XmlWriter.Create(stringWriter))
            {
                docComprobante.WriteTo(xmlTextWriter);
                xmlTextWriter.Flush();
                XmlDoc = stringWriter.GetStringBuilder().ToString();
            }

            using (var memDoc = new MemoryStream())
            {

                using (var writer = XmlWriter.Create(memDoc,
                    new XmlWriterSettings { Encoding = Encoding.GetEncoding("ISO-8859-1") }))
                {
                    docComprobante.WriteTo(writer);
                }

                using (FileStream file = new FileStream(ruta, FileMode.Create, FileAccess.ReadWrite))
                {
                    memDoc.WriteTo(file);
                }
            }
        }

        public void ComprimirArchivo(string pArchivo)
        {
            string pPath = Path.GetDirectoryName(pArchivo) + Path.DirectorySeparatorChar;
            string pFileName = Path.GetFileName(pArchivo);

            string sNombreXml = pFileName;
            string sNombreZip = pFileName.Replace(".xml", ".zip");
            string sFileXMl = pPath + sNombreXml;
            string sFileZip = pPath + sNombreZip;
            string sRec = "R-" + sNombreXml;
            string sZipRec = "R-" + sNombreZip;
            string sFileZipRec = pPath + sZipRec;

            if (File.Exists(sFileZip))
                File.Delete(sFileZip);

            using (ZipArchive newFile = ZipFile.Open(sFileZip, ZipArchiveMode.Create))
                newFile.CreateEntryFromFile(sFileXMl, sNombreXml, CompressionLevel.Fastest);
        }

        public void FirmarResumenDiario(string ruta, CapaEntidad.Ventas.BeanResumenDiario Resumen)
        {
            XmlDocument docResumen = new XmlDocument();

            XmlDeclaration xmldecl;
            xmldecl = docResumen.CreateXmlDeclaration("1.0", null, null);
            xmldecl.Encoding = "iso-8859-1";
            xmldecl.Standalone = "no";
            docResumen.AppendChild(xmldecl);

            XmlElement raiz = docResumen.CreateElement("SummaryDocuments");
            raiz.SetAttribute("xmlns", "urn:sunat:names:specification:ubl:peru:schema:xsd:SummaryDocuments-1");
            raiz.SetAttribute("xmlns:cac", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            raiz.SetAttribute("xmlns:cbc", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            raiz.SetAttribute("xmlns:ds", "http://www.w3.org/2000/09/xmldsig#");
            raiz.SetAttribute("xmlns:ext", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2");
            raiz.SetAttribute("xmlns:sac", "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1");
            raiz.SetAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");

            docResumen.AppendChild(raiz);

            XmlElement UBLExtensions = docResumen.CreateElement("ext:UBLExtensions", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2");
            raiz.AppendChild(UBLExtensions);

            XmlElement UBLExtension_firma = docResumen.CreateElement("ext:UBLExtension", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2");
            UBLExtensions.AppendChild(UBLExtension_firma);

            XmlElement ExtensionContent_firma = docResumen.CreateElement("ext:ExtensionContent", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2");
            UBLExtension_firma.AppendChild(ExtensionContent_firma);

            XmlElement UBLVersionID = docResumen.CreateElement("cbc:UBLVersionID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            UBLVersionID.AppendChild(docResumen.CreateTextNode(Resumen.VERSION_UBL));
            raiz.AppendChild(UBLVersionID);

            XmlElement CustomizationID = docResumen.CreateElement("cbc:CustomizationID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            CustomizationID.AppendChild(docResumen.CreateTextNode(Resumen.CUSTOMATIZACION));
            raiz.AppendChild(CustomizationID);

            XmlElement ID_NUM = docResumen.CreateElement("cbc:ID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            ID_NUM.AppendChild(docResumen.CreateTextNode(Resumen.NUMERO_RESUMEN));
            raiz.AppendChild(ID_NUM);

            XmlElement ReferenceDate = docResumen.CreateElement("cbc:ReferenceDate", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            ReferenceDate.AppendChild(docResumen.CreateTextNode(Resumen.FECHA_REFERENCIA));
            raiz.AppendChild(ReferenceDate);

            XmlElement IssueDate = docResumen.CreateElement("cbc:IssueDate", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            IssueDate.AppendChild(docResumen.CreateTextNode(Resumen.FECHA_EMISION));
            raiz.AppendChild(IssueDate);

            /*FIRMA*/
            XmlElement Signature_id = docResumen.CreateElement("cac:Signature", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            raiz.AppendChild(Signature_id);

            XmlElement _id = docResumen.CreateElement("cbc:ID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            _id.AppendChild(docResumen.CreateTextNode(Resumen.RUC_EMPRESA));
            Signature_id.AppendChild(_id);

            XmlElement SignatoryParty = docResumen.CreateElement("cac:SignatoryParty", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            Signature_id.AppendChild(SignatoryParty);

            XmlElement PartyIdentification = docResumen.CreateElement("cac:PartyIdentification", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            SignatoryParty.AppendChild(PartyIdentification);

            XmlElement _id_ruc = docResumen.CreateElement("cbc:ID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            _id_ruc.AppendChild(docResumen.CreateTextNode(Resumen.RUC_EMPRESA));
            PartyIdentification.AppendChild(_id_ruc);

            XmlElement PartyName_id = docResumen.CreateElement("cac:PartyName", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            SignatoryParty.AppendChild(PartyName_id);

            XmlElement Name_id = docResumen.CreateElement("cbc:Name", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            Name_id.AppendChild(docResumen.CreateTextNode(Resumen.RAZON_EMPRESA));
            PartyName_id.AppendChild(Name_id);

            XmlElement DigitalSignatureAttachment = docResumen.CreateElement("cac:DigitalSignatureAttachment", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            Signature_id.AppendChild(DigitalSignatureAttachment);

            XmlElement ExternalReference = docResumen.CreateElement("cac:ExternalReference", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            DigitalSignatureAttachment.AppendChild(ExternalReference);

            XmlElement URI = docResumen.CreateElement("cbc:URI", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            URI.AppendChild(docResumen.CreateTextNode("#SignatureKG"));
            ExternalReference.AppendChild(URI);

            /*Emisor*/

            XmlElement AccountingSupplierParty = docResumen.CreateElement("cac:AccountingSupplierParty", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            raiz.AppendChild(AccountingSupplierParty);

            XmlElement RUC = docResumen.CreateElement("cbc:CustomerAssignedAccountID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            RUC.AppendChild(docResumen.CreateTextNode(Resumen.RUC_EMPRESA));
            AccountingSupplierParty.AppendChild(RUC);

            XmlElement AdditionalAccountID_E = docResumen.CreateElement("cbc:AdditionalAccountID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            AdditionalAccountID_E.AppendChild(docResumen.CreateTextNode(Resumen.TIPO_DOC_EMPRE));
            AccountingSupplierParty.AppendChild(AdditionalAccountID_E);

            XmlElement Party = docResumen.CreateElement("cac:Party", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            AccountingSupplierParty.AppendChild(Party);

            XmlElement PartyLegalEntity = docResumen.CreateElement("cac:PartyLegalEntity", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
            Party.AppendChild(PartyLegalEntity);

            XmlElement RegistrationName = docResumen.CreateElement("cbc:RegistrationName", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
            RegistrationName.AppendChild(docResumen.CreateTextNode(Resumen.RAZON_EMPRESA));
            PartyLegalEntity.AppendChild(RegistrationName);

            /*Comprobantes - Líneas*/

            foreach(CapaEntidad.Ventas.BeanResumenDiario.Detalles det in Resumen.DetallesResumen)
            {
                XmlElement SummaryDocumentsLine = docResumen.CreateElement("sac:SummaryDocumentsLine", "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1");
                raiz.AppendChild(SummaryDocumentsLine);

                XmlElement LineID = docResumen.CreateElement("cbc:LineID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                LineID.AppendChild(docResumen.CreateTextNode(det.ID_CORRELATIVO));
                SummaryDocumentsLine.AppendChild(LineID);

                XmlElement DocumentTypeCode = docResumen.CreateElement("cbc:DocumentTypeCode", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                DocumentTypeCode.AppendChild(docResumen.CreateTextNode(det.TIPO_DOCUMENTO));
                SummaryDocumentsLine.AppendChild(DocumentTypeCode);

                XmlElement DocumentSerialID = docResumen.CreateElement("cbc:ID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                DocumentSerialID.AppendChild(docResumen.CreateTextNode(det.DOCU_SERIE_NUM));
                SummaryDocumentsLine.AppendChild(DocumentSerialID);

                XmlElement Cliente = docResumen.CreateElement("cac:AccountingCustomerParty", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                SummaryDocumentsLine.AppendChild(Cliente);

                XmlElement RUC_cliente = docResumen.CreateElement("cbc:CustomerAssignedAccountID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                RUC_cliente.AppendChild(docResumen.CreateTextNode(det.RUC_CLIENTE));
                Cliente.AppendChild(RUC_cliente);

                if (det.TIPO_DOC_CLIENTE == "2")
                    det.TIPO_DOC_CLIENTE = "6";
                
                XmlElement AdditionalAccountID = docResumen.CreateElement("cbc:AdditionalAccountID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                AdditionalAccountID.AppendChild(docResumen.CreateTextNode(det.TIPO_DOC_CLIENTE));
                Cliente.AppendChild(AdditionalAccountID);

                if (det.TIPO_DOCUMENTO == "07" || det.TIPO_DOCUMENTO == "08")
                {
                    XmlElement BillingReference = docResumen.CreateElement("cac:BillingReference", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                    SummaryDocumentsLine.AppendChild(BillingReference);

                    if (det.COD_TIPO_NOTA == "01" || det.COD_TIPO_NOTA == "03")
                    {
                        XmlElement InvoiceDocumentReference = docResumen.CreateElement("cac:InvoiceDocumentReference", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                        BillingReference.AppendChild(InvoiceDocumentReference);

                        XmlElement ID_REF = docResumen.CreateElement("cbc:ID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                        ID_REF.AppendChild(docResumen.CreateTextNode(det.NRO_COMPROBANTE));
                        InvoiceDocumentReference.AppendChild(ID_REF);

                        XmlElement DocumentTypeCodeRef = docResumen.CreateElement("cbc:DocumentTypeCode", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                        DocumentTypeCodeRef.AppendChild(docResumen.CreateTextNode(det.COD_TIPO_NOTA));
                        InvoiceDocumentReference.AppendChild(DocumentTypeCodeRef);
                    }
                }

                XmlElement Status = docResumen.CreateElement("cac:Status", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                SummaryDocumentsLine.AppendChild(Status);

                XmlElement ConditionCode = docResumen.CreateElement("cbc:ConditionCode", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                ConditionCode.AppendChild(docResumen.CreateTextNode(det.STATUS));
                Status.AppendChild(ConditionCode);

                XmlElement TotalAmount = docResumen.CreateElement("sac:TotalAmount", "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1");
                TotalAmount.SetAttribute("currencyID", det.MONEDA_LETRA);
                TotalAmount.AppendChild(docResumen.CreateTextNode(det.TOTAL_VENTA));
                SummaryDocumentsLine.AppendChild(TotalAmount);

                if(Convert.ToDouble(det.TOTAL_GRAVADA) > 0)
                {
                    XmlElement BillingPayment = docResumen.CreateElement("sac:BillingPayment", "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1");
                    SummaryDocumentsLine.AppendChild(BillingPayment);

                    XmlElement PaidAmount = docResumen.CreateElement("cbc:PaidAmount", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                    PaidAmount.SetAttribute("currencyID", det.MONEDA_LETRA);
                    PaidAmount.AppendChild(docResumen.CreateTextNode(det.TOTAL_GRAVADA));
                    BillingPayment.AppendChild(PaidAmount);

                    XmlElement InstructionID = docResumen.CreateElement("cbc:InstructionID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                    InstructionID.AppendChild(docResumen.CreateTextNode(det.INSTRUCTION_ID));
                    BillingPayment.AppendChild(InstructionID);
                }

                XmlElement TaxTotal = docResumen.CreateElement("cac:TaxTotal", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                SummaryDocumentsLine.AppendChild(TaxTotal);

                XmlElement TaxAmount = docResumen.CreateElement("cbc:TaxAmount", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                TaxAmount.SetAttribute("currencyID", det.MONEDA_LETRA);
                TaxAmount.AppendChild(docResumen.CreateTextNode(det.IGV_GRAV));
                TaxTotal.AppendChild(TaxAmount);

                XmlElement TaxSubtotal = docResumen.CreateElement("cac:TaxSubtotal", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                TaxTotal.AppendChild(TaxSubtotal);

                XmlElement TaxAmount_1 = docResumen.CreateElement("cbc:TaxAmount", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                TaxAmount_1.SetAttribute("currencyID", det.MONEDA_LETRA);
                TaxAmount_1.AppendChild(docResumen.CreateTextNode(det.IGV_GRAV));
                TaxSubtotal.AppendChild(TaxAmount_1);

                XmlElement TaxCategory = docResumen.CreateElement("cac:TaxCategory", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                TaxSubtotal.AppendChild(TaxCategory);

                XmlElement TaxScheme = docResumen.CreateElement("cac:TaxScheme", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                TaxCategory.AppendChild(TaxScheme);

                XmlElement ID_IGV = docResumen.CreateElement("cbc:ID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                ID_IGV.AppendChild(docResumen.CreateTextNode("1000"));
                TaxScheme.AppendChild(ID_IGV);

                XmlElement Name_1 = docResumen.CreateElement("cbc:Name", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                Name_1.AppendChild(docResumen.CreateTextNode("IGV"));
                TaxScheme.AppendChild(Name_1);

                XmlElement TaxTypeCode = docResumen.CreateElement("cbc:TaxTypeCode", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                TaxTypeCode.AppendChild(docResumen.CreateTextNode("VAT"));
                TaxScheme.AppendChild(TaxTypeCode);
            }

            docResumen.Save(ruta);
            firmarXML("", ruta, 1);
        }

        public string[] EnviarResumenDiario(string pArchivo, string sUsuario, string sClave, String TIPO, Int64 ID_DOC_VENTA, Int64 ID_ENVIO_CAB, String COD_EMPRESA)
        {
            string[] RptaFinal = { "", "" };
            try
            {
                string sUsuarioSunat = sUsuario;
                string sclaveSunat = sClave;

                List<string> oLstRespuesta = new List<string>();

                string pPath = Path.GetDirectoryName(pArchivo) + Path.DirectorySeparatorChar;
                string pFileName = Path.GetFileName(pArchivo);

                string sNombreXml = pFileName;
                string sNombreZip = pFileName.Replace(".xml", ".zip");
                string sFileXMl = pPath + sNombreXml;
                string sFileZip = pPath + sNombreZip;
                string sRec = "R-" + sNombreXml;
                string sZipRec = "R-" + sNombreZip;
                string sFileZipRec = pPath + sZipRec;

                string ARCHIVO_RES = pPath + sRec;

                if (File.Exists(sFileZip))
                    File.Delete(sFileZip);

                using (ZipArchive newFile = ZipFile.Open(sFileZip, ZipArchiveMode.Create))
                    newFile.CreateEntryFromFile(sFileXMl, sNombreXml, CompressionLevel.Fastest);

                byte[] byteArray = File.ReadAllBytes(sFileZip);

                System.Net.ServicePointManager.UseNagleAlgorithm = true;
                System.Net.ServicePointManager.Expect100Continue = false;
                System.Net.ServicePointManager.CheckCertificateRevocationList = true;

                #region Config

                BasicHttpBinding binding = new BasicHttpBinding(BasicHttpSecurityMode.TransportWithMessageCredential);
                binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.None;
                binding.Security.Transport.ProxyCredentialType = HttpProxyCredentialType.None;
                binding.Security.Message.ClientCredentialType = BasicHttpMessageCredentialType.UserName;
                binding.Security.Message.AlgorithmSuite = System.ServiceModel.Security.SecurityAlgorithmSuite.Default;

                EndpointAddress remoteAddress = new EndpointAddress("https://e-factura.sunat.gob.pe/ol-ti-itcpfegem/billService");

                #endregion

                ServicioFacturacion2018.billServiceClient ws = new ServicioFacturacion2018.billServiceClient(binding, remoteAddress);

                ws.ClientCredentials.UserName.UserName = sUsuarioSunat;
                ws.ClientCredentials.UserName.Password = sclaveSunat;

                var elements = ws.Endpoint.Binding.CreateBindingElements();
                elements.Find<SecurityBindingElement>().EnableUnsecuredResponse = true;
                ws.Endpoint.Binding = new CustomBinding(elements);

                ws.Open();
                string oRespuestaXML = ws.sendSummary(sNombreZip, byteArray, "1");
                strRetornoResumen = "Ticket : " + oRespuestaXML;

                RptaFinal[0] = oRespuestaXML;

                ws.Close();                

                if (oRespuestaXML != "")
                {
                    Thread.Sleep(10000);

                    strRetornoResumen = ValidarTicketSunat(sUsuario, sClave, oRespuestaXML, pArchivo, TIPO, ID_DOC_VENTA, ID_ENVIO_CAB, COD_EMPRESA);

                    if (MSG == "98")
                    {
                        Thread.Sleep(100000);
                        strRetornoResumen = ValidarTicketSunat(sUsuario, sClave, oRespuestaXML, pArchivo, TIPO, ID_DOC_VENTA, ID_ENVIO_CAB, COD_EMPRESA);
                    }

                    if (MSG == "98")
                    {
                        Thread.Sleep(100000);
                        strRetornoResumen = ValidarTicketSunat(sUsuario, sClave, oRespuestaXML, pArchivo, TIPO, ID_DOC_VENTA, ID_ENVIO_CAB, COD_EMPRESA);
                    }

                    if (MSG == "98")
                    {
                        Thread.Sleep(100000);
                        strRetornoResumen = ValidarTicketSunat(sUsuario, sClave, oRespuestaXML, pArchivo, TIPO, ID_DOC_VENTA, ID_ENVIO_CAB, COD_EMPRESA);
                    }
                }
            }            
            catch (System.ServiceModel.FaultException ex)
            {
                strRetornoResumen = "Error : " + ex.Message;                
            }

            RptaFinal[1] = strRetornoResumen;
            return RptaFinal;
        }

        public string ValidarTicketSunat(string sUsuario, string sPassword, string pTicket, string pArchivo, String TIPO, Int64 ID_DOC_VENTA, Int64 ID_ENVIO_CAB, String COD_EMPRESA)//RESUMEN DIARIO, BAJA DE DOCUEMENTO
        {
            string strRetornoValidacion = "";

            try
            {

                #region Variables

                string pPath = Path.GetDirectoryName(pArchivo) + Path.DirectorySeparatorChar;
                string pFileName = Path.GetFileName(pArchivo);

                string sNombreXml = pFileName;
                string sNombreZip = pFileName.Replace(".xml", ".zip");
                string sFileXMl = pPath + sNombreXml;
                string sFileZip = pPath + sNombreZip;
                string sRec = "R-" + sNombreXml;
                string sZipRec = "R-" + sNombreZip;
                string sFileZipRec = pPath + sZipRec;

                #endregion

                #region Config

                System.Net.ServicePointManager.UseNagleAlgorithm = true;
                System.Net.ServicePointManager.Expect100Continue = false;
                System.Net.ServicePointManager.CheckCertificateRevocationList = true;

                BasicHttpBinding binding = new BasicHttpBinding(BasicHttpSecurityMode.TransportWithMessageCredential);
                binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.None;
                binding.Security.Transport.ProxyCredentialType = HttpProxyCredentialType.None;
                binding.Security.Message.ClientCredentialType = BasicHttpMessageCredentialType.UserName;
                binding.Security.Message.AlgorithmSuite = System.ServiceModel.Security.SecurityAlgorithmSuite.Default;

                //EndpointAddress remoteAddress = new EndpointAddress("https://e-factura.sunat.gob.pe/ol-ti-itcpfegem/billService");
                //EndpointAddress remoteAddress = new EndpointAddress("https://e-factura.sunat.gob.pe/ol-it-wsconscpegem/billConsultService");
                EndpointAddress remoteAddress;

                if (pTicket.StartsWith("3"))
                {
                    remoteAddress = new EndpointAddress("https://e-factura.sunat.gob.pe/ol-it-wsconscpegem/billConsultService");
                }
                else
                {
                    remoteAddress = new EndpointAddress("https://e-factura.sunat.gob.pe/ol-ti-itcpfegem/billService");
                }

                #endregion

                ServicioFacturacion2018.billServiceClient ws = new ServicioFacturacion2018.billServiceClient(binding, remoteAddress);
                
                ws.ClientCredentials.UserName.UserName = sUsuario;
                ws.ClientCredentials.UserName.Password = sPassword;

                var elements = ws.Endpoint.Binding.CreateBindingElements();
                elements.Find<SecurityBindingElement>().EnableUnsecuredResponse = true;
                ws.Endpoint.Binding = new CustomBinding(elements);

                List<string> oLstRespuesta = new List<string>();
                oLstRespuesta.Add(pTicket);

                try
                {
                    ws.Open();

                    //ServicioFacturacionSunat1.statusResponse oStatus = ws.getStatus(pTicket);
                    ServicioFacturacion2018.statusResponse oStatus = ws.getStatus(pTicket);

                    byte[] oRespuestaXML = oStatus.content;

                    if (oRespuestaXML != null)
                    {
                        if (oStatus.statusCode == "0098")
                        {
                            string sError = "98";
                            MSG = "98";
                            string sMensaje = "Ticket En proceso";

                            oLstRespuesta.Add(sError);
                            oLstRespuesta.Add(sMensaje);
                        }
                        else
                        {
                            File.WriteAllBytes(sFileZipRec, oRespuestaXML);
                            MSG = "";

                            if (File.Exists(pPath + sRec))
                                File.Delete(pPath + sRec);

                            ZipFile.ExtractToDirectory(sFileZipRec, pPath);

                            XmlDocument oDocumento = new XmlDocument();
                            oDocumento.Load(pPath + sRec);

                            XmlNode oNodo = oDocumento.GetElementsByTagName("DocumentResponse", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2").Item(0).FirstChild;
                            XmlNodeList oListaNodo = oNodo.ChildNodes;

                            string sCodigoValida = oListaNodo[1].InnerText;
                            string sMensajeValida = oListaNodo[2].InnerText;
                            
                            strRetornoValidacion = "Codigo Valida: " + sCodigoValida + ", Descripcion: " + sMensajeValida;
                            COD_ERROR = Convert.ToInt64(sCodigoValida);

                            if (TIPO == "1" || TIPO == "3") //ACTUALIZAR RESUMEN DIARIO EL TICKET
                            {                              

                                if (TIPO == "3" && COD_ERROR == 0)
                                {

                                }

                            }
                            if (TIPO == "2" && COD_ERROR == 0)
                            {

                            }
                            //ACTUALIZAR NUMERACION
                        }
                    }
                    ws.Close();
                }
                catch (FaultException ex)
                {
                    string sError = ex.Code.Name.ToUpper().Replace("SOAP-ENV-SERVER.", "");
                    string sMensaje = ex.Message;

                    oLstRespuesta.Add(sError);
                    oLstRespuesta.Add(sMensaje);
                    strRetornoValidacion = "Error : " + sError + ", Mensaje: " + sMensaje;
                }

                ws.Close();
                //return oLstRespuesta;
                return strRetornoValidacion;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void CrearGuiaXml()
        {

            // Especifica la ruta donde deseas guardar el archivo XML
            const string xmlFilePath = "20552174918-09-TG98-00400.xml";

            // Configura las opciones de escritura XML
            var settings = new XmlWriterSettings
            {
                Indent = true,  // Indenta el archivo XML para mejor legibilidad
                Encoding = Encoding.UTF8 // Especifica la codificación
            };

            // Crea un XmlWriter
            using (var xmlWriter = XmlWriter.Create(xmlFilePath, settings))
            {
                // Inicio del documento XML
                xmlWriter.WriteStartDocument();

                // Elemento raíz "DespatchAdvice" con atributos xmlns
                xmlWriter.WriteStartElement("DespatchAdvice", "urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2");
                xmlWriter.WriteAttributeString("xmlns:ccts", "urn:un:unece:uncefact:documentation:2");
                xmlWriter.WriteAttributeString("xmlns:cbc", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                xmlWriter.WriteAttributeString("xmlns:cac", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                xmlWriter.WriteAttributeString("xmlns:udt", "urn:un:unece:uncefact:data:specification:UnqualifiedDataTypesSchemaModule:2");
                xmlWriter.WriteAttributeString("xmlns:ext", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2");
                xmlWriter.WriteAttributeString("xmlns:sac", "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1");
                xmlWriter.WriteAttributeString("xmlns:qdt", "urn:oasis:names:specification:ubl:schema:xsd:QualifiedDatatypes-2");
                xmlWriter.WriteAttributeString("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                xmlWriter.WriteAttributeString("xmlns:ds", "http://www.w3.org/2000/09/xmldsig#");

                // Elemento "ext:UBLExtensions"
                xmlWriter.WriteStartElement("ext", "UBLExtensions", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2");

                // Elemento "cbc:UBLVersionID"
                xmlWriter.WriteStartElement("cbc", "UBLVersionID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                xmlWriter.WriteString("2.1");
                xmlWriter.WriteEndElement();

                // Elemento "cbc:CustomizationID"
                xmlWriter.WriteStartElement("cbc", "CustomizationID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                xmlWriter.WriteString("2.0");
                xmlWriter.WriteEndElement();

                // Elemento "cbc:ID"
                xmlWriter.WriteStartElement("cbc", "ID", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                xmlWriter.WriteString("TTT1-2");
                xmlWriter.WriteEndElement();

                // Elemento "cbc:IssueDate"
                xmlWriter.WriteStartElement("cbc", "IssueDate", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                xmlWriter.WriteString("2022-12-18");
                xmlWriter.WriteEndElement();

                // Elemento "cbc:IssueTime"
                xmlWriter.WriteStartElement("cbc", "IssueTime", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                xmlWriter.WriteString("23:01:19");
                xmlWriter.WriteEndElement();

                // Elemento "cbc:DespatchAdviceTypeCode"
                xmlWriter.WriteStartElement("cbc", "DespatchAdviceTypeCode", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                xmlWriter.WriteString("09");
                xmlWriter.WriteEndElement();

                // Elemento "cbc:Note"
                xmlWriter.WriteStartElement("cbc", "Note", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                xmlWriter.WriteString("Obs: observaciones");
                xmlWriter.WriteEndElement();

                // Fin del elemento "ext:UBLExtensions"
                xmlWriter.WriteEndElement();

                // Cierra el elemento raíz "DespatchAdvice"
                xmlWriter.WriteEndElement();

                // Fin del documento XML
                xmlWriter.WriteEndDocument();

                // Cierra el XmlWriter
                xmlWriter.Close();
            }

            Console.WriteLine("Archivo XML creado exitosamente en: " + xmlFilePath);

        }

    }
}
