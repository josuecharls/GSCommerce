
CREATE DATABASE SYSCHARLES;

USE [SYSCHARLES]
GO

CREATE SCHEMA [Almacen]
GO
/****** Object:  Schema [Auditoria]    Script Date: 06/02/2025 20:01:49 ******/
CREATE SCHEMA [Auditoria]
GO
/****** Object:  Schema [Auxiliares]    Script Date: 06/02/2025 20:01:49 ******/
CREATE SCHEMA [Auxiliares]
GO
/****** Object:  Schema [DW]    Script Date: 06/02/2025 20:01:49 ******/
CREATE SCHEMA [DW]
GO
/****** Object:  Schema [FE]    Script Date: 06/02/2025 20:01:49 ******/
CREATE SCHEMA [FE]
GO
/****** Object:  Schema [Maestros]    Script Date: 06/02/2025 20:01:49 ******/
CREATE SCHEMA [Maestros]
GO
/****** Object:  Schema [Movimientos]    Script Date: 06/02/2025 20:01:49 ******/
CREATE SCHEMA [Movimientos]
GO
/****** Object:  UserDefinedTableType [Almacen].[GuiaRemisionCabeceraType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Almacen].[GuiaRemisionCabeceraType] AS TABLE(
	[IdGuiaRemision] [int] NULL,
	[IdMovimiento] [int] NOT NULL,
	[Serie] [varchar](4) NULL,
	[Numero] [int] NULL,
	[Fecha] [datetime] NULL,
	[DireccionOrigen] [varchar](150) NULL,
	[DPDOrigen] [varchar](100) NULL,
	[TipoDestinatario] [varchar](9) NULL,
	[RazonSocialNombre] [varchar](100) NULL,
	[RUCDNICE] [varchar](11) NULL,
	[DireccionDestino] [varchar](100) NULL,
	[DPDDestino] [varchar](100) NULL,
	[Observaciones] [varchar](300) NULL,
	[IdUsuario] [int] NULL,
	[Estado] [char](1) NULL,
	[IdAlmacen] [int] NULL,
	[IdProveedor] [int] NULL,
	[IdTipoDocumento] [int] NULL,
	[IdAlmacenDestino] [int] NULL
)
GO
/****** Object:  UserDefinedTableType [Almacen].[GuiaRemisionDetalleType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Almacen].[GuiaRemisionDetalleType] AS TABLE(
	[IdMovimiento] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[DescripcionArticulo] [varchar](300) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Almacen].[MovimientosCabeceraType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Almacen].[MovimientosCabeceraType] AS TABLE(
	[IdMovimiento] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Tipo] [char](1) NOT NULL,
	[Motivo] [varchar](40) NOT NULL,
	[Fecha] [date] NULL,
	[Descripcion] [varchar](200) NOT NULL,
	[IdProveedor] [int] NULL,
	[IdAlmacenDestinoOrigen] [int] NULL,
	[IdOc] [int] NULL,
	[IdUsuario] [int] NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[IdGuiaRemision] [int] NULL,
	[IdUsuarioConfirma] [int] NULL,
	[FechaHoraConfirma] [datetime] NULL,
	[Estado] [char](1) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Almacen].[MovimientosDetalleType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Almacen].[MovimientosDetalleType] AS TABLE(
	[IdMovimiento] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[DescripcionArticulo] [varchar](300) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[Valor] [decimal](18, 2) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Maestros].[AlmacenCuentaType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Maestros].[AlmacenCuentaType] AS TABLE(
	[IdAlmacenCuenta] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Banco] [varchar](30) NOT NULL,
	[Cuenta] [varchar](20) NOT NULL,
	[CCI] [varchar](30) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Maestros].[AsignacionSerieCajeroType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Maestros].[AsignacionSerieCajeroType] AS TABLE(
	[IdAsignacion] [int] NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[IdSerieCorrelativo] [int] NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[ComprobanteDeVentaCabeceraType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[ComprobanteDeVentaCabeceraType] AS TABLE(
	[IdComprobante] [int] NOT NULL,
	[IdTipoDocumento] [int] NOT NULL,
	[Serie] [varchar](4) NOT NULL,
	[Numero] [int] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[IdCliente] [int] NULL,
	[DNIRUC] [varchar](11) NULL,
	[Nombre] [varchar](100) NOT NULL,
	[Direccion] [varchar](100) NULL,
	[TipoCambio] [decimal](18, 2) NOT NULL,
	[SubTotal] [decimal](18, 2) NOT NULL,
	[IGV] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
	[Redondeo] [decimal](18, 2) NULL,
	[APagar] [decimal](18, 2) NULL,
	[IdVendedor] [int] NOT NULL,
	[IdCajero] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Estado] [char](1) NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[IdUsuarioAnula] [int] NULL,
	[FechaHoraUsuarioAnula] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[ComprobanteDeVentaDetalleType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[ComprobanteDeVentaDetalleType] AS TABLE(
	[IdComprobante] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[Descripcion] [varchar](100) NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[Precio] [decimal](18, 2) NOT NULL,
	[PorcentajeDescuento] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[DetallePagoVentaType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[DetallePagoVentaType] AS TABLE(
	[IdDetallePagoVenta] [int] NOT NULL,
	[IdComprobante] [int] NOT NULL,
	[IdTipoPagoVenta] [int] NOT NULL,
	[Soles] [decimal](18, 2) NOT NULL,
	[Dolares] [decimal](18, 2) NOT NULL,
	[Datos] [varchar](13) NULL,
	[Vuelto] [decimal](18, 2) NULL,
	[PorcentajeTarjetaSoles] [decimal](18, 2) NULL,
	[PorcentajeTarjetaDolares] [decimal](18, 2) NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[IngresosEgresosCabeceraType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[IngresosEgresosCabeceraType] AS TABLE(
	[IdIngresoEgreso] [int] NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Naturaleza] [char](1) NOT NULL,
	[Tipo] [varchar](20) NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[Glosa] [varchar](200) NOT NULL,
	[Monto] [decimal](18, 2) NOT NULL,
	[IdProveedor] [int] NULL,
	[IdAlmacenDestino] [int] NULL,
	[IdCajeroDestino] [int] NULL,
	[FechaRegistro] [datetime] NULL,
	[Estado] [char](1) NOT NULL,
	[IdAlmacenGasto] [int] NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[IngresosEgresosDetalleType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[IngresosEgresosDetalleType] AS TABLE(
	[IdDetalleIngresoEgreso] [int] NULL,
	[IdIngresoEgreso] [int] NOT NULL,
	[Forma] [char](8) NOT NULL,
	[Detalle] [varchar](200) NOT NULL,
	[Monto] [decimal](18, 2) NOT NULL,
	[Banco] [varchar](20) NULL,
	[Cuenta] [varchar](25) NULL,
	[Imagen] [image] NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[KardexGeneralType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[KardexGeneralType] AS TABLE(
	[IdKardex] [int] NULL,
	[IdAlmacen] [int] NOT NULL,
	[Almacen] [varchar](100) NOT NULL,
	[Familia] [varchar](100) NOT NULL,
	[Linea] [varchar](100) NOT NULL,
	[Codigo] [char](6) NOT NULL,
	[Articulo] [varchar](300) NOT NULL,
	[PrecioCompra] [decimal](18, 2) NOT NULL,
	[PrecioVenta] [decimal](18, 2) NOT NULL,
	[Fecha] [date] NULL,
	[Operacion] [varchar](100) NULL,
	[SaldoInicial] [int] NOT NULL,
	[ValorizadoInicial] [decimal](18, 2) NOT NULL,
	[Entrada] [int] NOT NULL,
	[ValorizadoEntrada] [decimal](18, 2) NOT NULL,
	[Salida] [int] NOT NULL,
	[ValorizadoSalida] [decimal](18, 2) NOT NULL,
	[SaldoFinal] [int] NOT NULL,
	[ValorizadoFinal] [decimal](18, 2) NOT NULL,
	[ValorizadoFinalPC] [decimal](18, 2) NOT NULL,
	[ValorizadoFinalPV] [decimal](18, 2) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[NotaDeCreditoCabeceraType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[NotaDeCreditoCabeceraType] AS TABLE(
	[IdNC] [int] NOT NULL,
	[IdTipoDocumento] [int] NOT NULL,
	[Serie] [varchar](4) NOT NULL,
	[Numero] [int] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[Referencia] [varchar](13) NOT NULL,
	[IdMotivo] [char](2) NOT NULL,
	[IdCliente] [int] NULL,
	[DNIRUC] [varchar](11) NULL,
	[Nombre] [varchar](100) NOT NULL,
	[Direccion] [varchar](100) NULL,
	[SubTotal] [decimal](18, 2) NOT NULL,
	[IGV] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
	[Redondeo] [decimal](18, 2) NOT NULL,
	[AFavor] [decimal](18, 2) NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Estado] [char](1) NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[Empleada] [bit] NULL,
	[IdUsuarioAnula] [int] NULL,
	[FechaHoraUsuarioAnula] [datetime] NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[NotaDeCreditoDetalleType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[NotaDeCreditoDetalleType] AS TABLE(
	[IdNC] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NULL,
	[Descripcion] [varchar](300) NOT NULL,
	[UnidadMedida] [varchar](20) NULL,
	[Cantidad] [int] NULL,
	[Precio] [decimal](18, 2) NULL,
	[PorcentajeDescuento] [decimal](18, 2) NULL,
	[Total] [decimal](18, 2) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[OrdenDeCompraCabeceraType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[OrdenDeCompraCabeceraType] AS TABLE(
	[IdOc] [int] NOT NULL,
	[IdProveedor] [int] NOT NULL,
	[NumeroOC] [char](7) NOT NULL,
	[FechaOC] [datetime] NOT NULL,
	[RUCProveedor] [varchar](11) NOT NULL,
	[NombreProveedor] [varchar](100) NOT NULL,
	[DireccionProveedor] [varchar](100) NOT NULL,
	[Moneda] [varchar](10) NOT NULL,
	[TipoCambio] [numeric](8, 4) NOT NULL,
	[FormaPago] [varchar](30) NOT NULL,
	[SinIGV] [bit] NOT NULL,
	[FechaEntrega] [datetime] NOT NULL,
	[Atencion] [varchar](50) NOT NULL,
	[Glosa] [varchar](255) NOT NULL,
	[ImporteSubTotal] [numeric](12, 2) NOT NULL,
	[ImporteIGV] [numeric](12, 2) NOT NULL,
	[ImporteTotal] [numeric](12, 2) NOT NULL,
	[EstadoEmision] [bit] NOT NULL,
	[FechaEmision] [datetime] NULL,
	[EstadoAtencion] [char](2) NOT NULL,
	[FechaAtencionTotal] [datetime] NULL,
	[FechaAnulado] [datetime] NULL,
	[FechaCierre] [datetime] NULL,
	[IdUsuarioRegistra] [int] NULL,
	[FechaRegistra] [datetime] NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[OrdenDeCompraDetalleType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[OrdenDeCompraDetalleType] AS TABLE(
	[IdOc] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[DescripcionArticulo] [varchar](300) NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[CostoUnitario] [numeric](14, 2) NOT NULL,
	[Total] [numeric](12, 2) NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[OrdenDeCompraDetalleTypev2]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[OrdenDeCompraDetalleTypev2] AS TABLE(
	[IdOc] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[DescripcionArticulo] [varchar](300) NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL,
	[Cantidad] [float] NOT NULL,
	[CostoUnitario] [numeric](14, 2) NOT NULL,
	[Total] [numeric](12, 2) NOT NULL,
	[SinIgv] [bit] NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Movimientos].[ResumenCierreDeCajaType]    Script Date: 06/02/2025 20:01:49 ******/
CREATE TYPE [Movimientos].[ResumenCierreDeCajaType] AS TABLE(
	[IdResumen] [int] NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Fecha] [date] NOT NULL,
	[IdGrupo] [int] NOT NULL,
	[Grupo] [varchar](50) NOT NULL,
	[Detalle] [varchar](max) NOT NULL,
	[Monto] [decimal](18, 2) NOT NULL,
	[FechaRegistro] [datetime] NULL
)
GO
/****** Object:  Table [Movimientos].[ComprobanteDeVentaCabecera]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[ComprobanteDeVentaCabecera](
	[IdComprobante] [int] IDENTITY(1,1) NOT NULL,
	[IdTipoDocumento] [int] NOT NULL,
	[Serie] [varchar](4) NOT NULL,
	[Numero] [int] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[IdCliente] [int] NULL,
	[DNIRUC] [varchar](11) NULL,
	[Nombre] [varchar](100) NOT NULL,
	[Direccion] [varchar](100) NULL,
	[TipoCambio] [decimal](18, 3) NOT NULL,
	[SubTotal] [decimal](18, 2) NOT NULL,
	[IGV] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
	[Redondeo] [decimal](18, 2) NULL,
	[APagar] [decimal](18, 2) NULL,
	[IdVendedor] [int] NOT NULL,
	[IdCajero] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Estado] [char](1) NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[IdUsuarioAnula] [int] NULL,
	[FechaHoraUsuarioAnula] [datetime] NULL,
	[GeneroNC] [varchar](13) NULL,
 CONSTRAINT [PK_ComprobanteDeVentaCabecera] PRIMARY KEY CLUSTERED 
(
	[IdComprobante] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_Venta_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE VIEW [Movimientos].[v_Venta_1]
AS
SELECT [IdComprobante]
      ,[IdTipoDocumento]
      ,[Serie]
      ,[Numero]
      ,[Fecha]
      ,[IdCliente]
      ,[DNIRUC]
      ,[Nombre]
      ,[Total]
      ,[IdVendedor]
      ,[IdCajero]
      ,[IdAlmacen]
      ,[Estado]
  FROM [Movimientos].[ComprobanteDeVentaCabecera]
GO
/****** Object:  Table [Maestros].[Almacen]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[Almacen](
	[IdAlmacen] [int] IDENTITY(1,1) NOT NULL,
	[Nombre] [varchar](100) NOT NULL,
	[EsTienda] [bit] NOT NULL,
	[Direccion] [varchar](150) NOT NULL,
	[DPD] [varchar](100) NULL,
	[Telefono] [varchar](10) NULL,
	[Celular] [varchar](9) NULL,
	[RazonSocial] [varchar](100) NULL,
	[RUC] [varchar](11) NULL,
	[Estado] [bit] NOT NULL,
	[Ubigeo] [char](6) NULL,
	[Certificado] [varchar](50) NULL,
	[PasswordCertificado] [varchar](50) NULL,
	[Abreviacion] [varchar](20) NULL,
	[UsuarioSOL] [varchar](20) NULL,
	[ClaveSOL] [varchar](20) NULL,
	[AfectoIGV] [bit] NOT NULL,
 CONSTRAINT [PK_Almacen] PRIMARY KEY CLUSTERED 
(
	[IdAlmacen] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Movimientos].[Descuentos]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[Descuentos](
	[idDescuento] [int] IDENTITY(1,1) NOT NULL,
	[idAlmacen] [int] NOT NULL,
	[idArticulo] [int] NOT NULL,
	[Descuento] [float] NOT NULL,
 CONSTRAINT [PK_Descuentos] PRIMARY KEY CLUSTERED 
(
	[idDescuento] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[Articulo]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[Articulo](
	[IdArticulo] [char](6) NOT NULL,
	[Descripcion] [varchar](300) NOT NULL,
	[DescripcionCorta] [varchar](100) NOT NULL,
	[Familia] [varchar](100) NOT NULL,
	[Linea] [varchar](100) NOT NULL,
	[Marca] [varchar](100) NOT NULL,
	[Material] [varchar](100) NOT NULL,
	[Modelo] [varchar](100) NOT NULL,
	[Color] [varchar](100) NOT NULL,
	[Detalle] [varchar](100) NOT NULL,
	[Talla] [varchar](100) NOT NULL,
	[IdProveedor] [int] NOT NULL,
	[UnidadAlmacen] [varchar](100) NOT NULL,
	[MonedaCosteo] [varchar](100) NOT NULL,
	[PrecioCompra] [decimal](18, 2) NOT NULL,
	[PrecioVenta] [decimal](18, 2) NOT NULL,
	[FechaRegistro] [date] NOT NULL,
	[Foto] [image] NULL,
	[CodigoBarra] [image] NULL,
	[Estado] [bit] NOT NULL,
	[Estacion] [varchar](15) NULL,
 CONSTRAINT [PK_Articulo] PRIMARY KEY CLUSTERED 
(
	[IdArticulo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_Descuentos]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create view [Movimientos].[v_Descuentos]
as
select d.idAlmacen, a.IdArticulo, a.DescripcionCorta, a.PrecioVenta, a.PrecioCompra, 
		round(a.PrecioVenta * (1 - d.Descuento / 100), 2) [Precio Final], 
		round(a.PrecioVenta * d.Descuento / 100, 2) Descuento , 
		round(d.Descuento, 2) Descuento_Porc,
		round((a.PrecioVenta * (1 - d.Descuento / 100)) - a.PrecioCompra, 2) Utilidad
from Maestros.Articulo a inner join Movimientos.Descuentos d
	on a.IdArticulo = d.idArticulo
GO
/****** Object:  Table [Movimientos].[Kardex]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[Kardex](
	[IdKardex] [int] IDENTITY(1,1) NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[TipoMovimiento] [char](1) NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[SaldoInicial] [int] NOT NULL,
	[Cantidad] [int] NOT NULL,
	[SaldoFinal] [int] NOT NULL,
	[Valor] [decimal](18, 2) NOT NULL,
	[Origen] [varchar](100) NOT NULL,
	[NoKardexGeneral] [bit] NULL,
 CONSTRAINT [PK_Kardex] PRIMARY KEY CLUSTERED 
(
	[IdKardex] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_KardexGeneral]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [Movimientos].[v_KardexGeneral]
as
SELECT       Movimientos.Kardex.IdKardex, Movimientos.Kardex.IdAlmacen, Maestros.Almacen.Nombre AS Almacen, Maestros.Articulo.Familia, Maestros.Articulo.Linea, Movimientos.Kardex.IdArticulo AS Codigo, Maestros.Articulo.Descripcion AS Articulo,
			 Maestros.Articulo.PrecioCompra, cast(isnull(d.[Precio Final], Maestros.Articulo.PrecioVenta) as decimal(18,2)) PrecioVenta, cast(Movimientos.Kardex.Fecha as date) Fecha, Movimientos.Kardex.Origen 'Operacion', 
             Movimientos.Kardex.SaldoInicial, Movimientos.Kardex.SaldoInicial * Movimientos.Kardex.Valor as 'ValorizadoInicial',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'I' THEN Movimientos.Kardex.Cantidad ELSE 0 END 'Entrada',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'I' THEN Movimientos.Kardex.Cantidad * Movimientos.Kardex.Valor ELSE 0 END 'ValorizadoEntrada',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'E' THEN Movimientos.Kardex.Cantidad ELSE 0 END 'Salida',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'E' THEN Movimientos.Kardex.Cantidad * Movimientos.Kardex.Valor ELSE 0 END 'ValorizadoSalida',
			 Movimientos.Kardex.SaldoFinal, Movimientos.Kardex.SaldoFinal * Movimientos.Kardex.Valor as 'ValorizadoFinal',
			 Maestros.Articulo.PrecioCompra * Movimientos.Kardex.SaldoFinal as 'ValorizadoFinalPC', cast(isnull(d.[Precio Final], Maestros.Articulo.PrecioVenta) as decimal(18,2)) * Movimientos.Kardex.SaldoFinal as 'ValorizadoFinalPV'
FROM            Movimientos.Kardex INNER JOIN
                         Maestros.Almacen ON Movimientos.Kardex.IdAlmacen = Maestros.Almacen.IdAlmacen INNER JOIN
                         Maestros.Articulo ON Movimientos.Kardex.IdArticulo = Maestros.Articulo.IdArticulo
						 left join Movimientos.v_Descuentos d on Maestros.Articulo.IdArticulo = d.idArticulo and Maestros.Almacen.IdAlmacen = d.idAlmacen
						 WHERE NoKardexGeneral = 0 AND SUBSTRING(origen, 0, CHARINDEX(':',Origen)) <> 'NC'

UNION ALL

SELECT       Movimientos.Kardex.IdKardex, Movimientos.Kardex.IdAlmacen, Maestros.Almacen.Nombre AS Almacen, Maestros.Articulo.Familia, Maestros.Articulo.Linea, Movimientos.Kardex.IdArticulo AS Codigo, Maestros.Articulo.Descripcion AS Articulo,
			 Maestros.Articulo.PrecioCompra, cast(isnull(d.[Precio Final], Maestros.Articulo.PrecioVenta) as decimal(18,2)) PrecioVenta, cast(Movimientos.Kardex.Fecha as date) Fecha, Movimientos.Kardex.Origen 'Operacion', 
             Movimientos.Kardex.SaldoInicial, Movimientos.Kardex.SaldoInicial * Movimientos.Kardex.Valor as 'ValorizadoInicial',
			 0 'Entrada',
			 0 'ValorizadoEntrada',
			 Movimientos.Kardex.Cantidad * -1 'Salida',
			 Movimientos.Kardex.Cantidad * Movimientos.Kardex.Valor * -1 'ValorizadoSalida',
			 Movimientos.Kardex.SaldoFinal, Movimientos.Kardex.SaldoFinal * Movimientos.Kardex.Valor as 'ValorizadoFinal',
			 Maestros.Articulo.PrecioCompra * Movimientos.Kardex.SaldoFinal as 'ValorizadoFinalPC', cast(isnull(d.[Precio Final], Maestros.Articulo.PrecioVenta) as decimal(18,2)) * Movimientos.Kardex.SaldoFinal as 'ValorizadoFinalPV'
FROM            Movimientos.Kardex INNER JOIN
                         Maestros.Almacen ON Movimientos.Kardex.IdAlmacen = Maestros.Almacen.IdAlmacen INNER JOIN
                         Maestros.Articulo ON Movimientos.Kardex.IdArticulo = Maestros.Articulo.IdArticulo
						 left join Movimientos.v_Descuentos d on Maestros.Articulo.IdArticulo = d.idArticulo and Maestros.Almacen.IdAlmacen = d.idAlmacen
						 WHERE NoKardexGeneral = 0 AND SUBSTRING(origen, 0, CHARINDEX(':',Origen)) = 'NC'


GO
/****** Object:  Table [Movimientos].[ComprobanteDeVentaDetalle]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[ComprobanteDeVentaDetalle](
	[IdComprobante] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[Descripcion] [varchar](100) NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[Precio] [decimal](18, 2) NOT NULL,
	[PorcentajeDescuento] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
 CONSTRAINT [PK_ComprobanteDeVentaDetalle] PRIMARY KEY CLUSTERED 
(
	[IdComprobante] ASC,
	[Item] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[v_VentasDW]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[v_VentasDW]

AS

Select a.Fecha, d.Nombre Tienda, a.Serie, a.Numero, a.DNIRUC DocIdentidad, a.Nombre Cliente, a.SubTotal, a.IGV, a.Total,
	a.Redondeo, a.APagar, b.IdArticulo, b.Descripcion, c.Linea, c.PrecioCompra, c.PrecioVenta, b.Precio, b.Cantidad, b.Total TotalProducto
from Movimientos.ComprobanteDeVentaCabecera a inner join Movimientos.ComprobanteDeVentaDetalle b
	on a.IdComprobante = b.IdComprobante inner join Maestros.Articulo c
	on b.IdArticulo = c.IdArticulo inner join Maestros.Almacen d
	on a.IdAlmacen = d.IdAlmacen
where year(Fecha) = 2021 and a.Estado = 'E'
GO
/****** Object:  View [Movimientos].[v_Kardex_3]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE view [Movimientos].[v_Kardex_3]
as
SELECT       Movimientos.Kardex.IdKardex, Movimientos.Kardex.IdAlmacen, Maestros.Almacen.Nombre AS Almacen, Maestros.Articulo.Familia, Maestros.Articulo.Linea, Movimientos.Kardex.IdArticulo AS Codigo, Maestros.Articulo.Descripcion AS Articulo,
			 Maestros.Articulo.PrecioCompra, cast(isnull(d.[Precio Final], Maestros.Articulo.PrecioVenta) as decimal(18,2)) PrecioVenta, cast(Movimientos.Kardex.Fecha as date) Fecha, Movimientos.Kardex.Origen 'Operacion', 
             Movimientos.Kardex.SaldoInicial, Movimientos.Kardex.SaldoInicial * Movimientos.Kardex.Valor as 'ValorizadoInicial',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'I' THEN Movimientos.Kardex.Cantidad ELSE 0 END 'Entrada',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'I' THEN Movimientos.Kardex.Cantidad * Movimientos.Kardex.Valor ELSE 0 END 'ValorizadoEntrada',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'E' THEN Movimientos.Kardex.Cantidad ELSE 0 END 'Salida',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'E' THEN Movimientos.Kardex.Cantidad * Movimientos.Kardex.Valor ELSE 0 END 'ValorizadoSalida',
			 Movimientos.Kardex.SaldoFinal, Movimientos.Kardex.SaldoFinal * Movimientos.Kardex.Valor as 'ValorizadoFinal',
			 Maestros.Articulo.PrecioCompra * Movimientos.Kardex.SaldoFinal as 'ValorizadoFinalPC', cast(isnull(d.[Precio Final], Maestros.Articulo.PrecioVenta) as decimal(18,2)) * Movimientos.Kardex.SaldoFinal as 'ValorizadoFinalPV'
FROM            Movimientos.Kardex INNER JOIN
                         Maestros.Almacen ON Movimientos.Kardex.IdAlmacen = Maestros.Almacen.IdAlmacen INNER JOIN
                         Maestros.Articulo ON Movimientos.Kardex.IdArticulo = Maestros.Articulo.IdArticulo
						 left join Movimientos.v_Descuentos d on Maestros.Articulo.IdArticulo = d.idArticulo and Maestros.Almacen.IdAlmacen = d.idAlmacen


GO
/****** Object:  Table [Maestros].[TipoPagoVenta]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[TipoPagoVenta](
	[IdTipoPagoVenta] [int] IDENTITY(1,1) NOT NULL,
	[Tipo] [varchar](12) NOT NULL,
	[Descripcion] [varchar](30) NOT NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_TipoPagoVenta] PRIMARY KEY CLUSTERED 
(
	[IdTipoPagoVenta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Movimientos].[DetallePagoVenta]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[DetallePagoVenta](
	[IdDetallePagoVenta] [int] IDENTITY(1,1) NOT NULL,
	[IdComprobante] [int] NOT NULL,
	[IdTipoPagoVenta] [int] NOT NULL,
	[Soles] [decimal](18, 2) NOT NULL,
	[Dolares] [decimal](18, 2) NOT NULL,
	[Datos] [varchar](13) NULL,
	[Vuelto] [decimal](18, 2) NULL,
	[PorcentajeTarjetaSoles] [decimal](18, 2) NULL,
	[PorcentajeTarjetaDolares] [decimal](18, 2) NULL,
 CONSTRAINT [PK_DetallePagoVenta] PRIMARY KEY CLUSTERED 
(
	[IdDetallePagoVenta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_DetallePagoVenta_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [Movimientos].[v_DetallePagoVenta_1]
AS
SELECT        D.IdDetallePagoVenta, D.IdComprobante, D.IdTipoPagoVenta, T.Descripcion, D.Soles, D.Dolares, D.Datos, D.Vuelto, D.PorcentajeTarjetaSoles, D.PorcentajeTarjetaDolares
FROM            Movimientos.DetallePagoVenta AS D INNER JOIN
                         Maestros.TipoPagoVenta AS T ON D.IdTipoPagoVenta = T.IdTipoPagoVenta
GO
/****** Object:  Table [Almacen].[MovimientosDetalle]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Almacen].[MovimientosDetalle](
	[IdMovimiento] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[DescripcionArticulo] [varchar](300) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[Valor] [decimal](18, 2) NOT NULL,
 CONSTRAINT [PK_IngresosEgresosDetalle] PRIMARY KEY CLUSTERED 
(
	[IdMovimiento] ASC,
	[Item] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Almacen].[v_DetalleGuiaRemision_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Script for SelectTopNRows command from SSMS  ******/
Create view [Almacen].[v_DetalleGuiaRemision_1]
as
SELECT D.[IdMovimiento]
      ,D.[Item]
      ,D.[IdArticulo]
      ,D.[DescripcionArticulo]
      ,D.[Cantidad]
	  ,A.UnidadAlmacen
  FROM [Almacen].[MovimientosDetalle] D
  INNER JOIN [Maestros].[Articulo] A
  ON D.IdArticulo = A.IdArticulo;
GO
/****** Object:  Table [Movimientos].[NotaDeCreditoCabecera]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[NotaDeCreditoCabecera](
	[IdNC] [int] IDENTITY(1,1) NOT NULL,
	[IdTipoDocumento] [int] NOT NULL,
	[Serie] [varchar](4) NOT NULL,
	[Numero] [int] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[Referencia] [varchar](13) NOT NULL,
	[IdMotivo] [char](2) NOT NULL,
	[IdCliente] [int] NOT NULL,
	[DNIRUC] [varchar](11) NOT NULL,
	[Nombre] [varchar](100) NOT NULL,
	[Direccion] [varchar](100) NULL,
	[SubTotal] [decimal](18, 2) NOT NULL,
	[IGV] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
	[Redondeo] [decimal](18, 2) NOT NULL,
	[AFavor] [decimal](18, 2) NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Estado] [char](1) NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[Empleada] [bit] NULL,
	[IdUsuarioAnula] [int] NULL,
	[FechaHoraUsuarioAnula] [datetime] NULL,
 CONSTRAINT [PK_NotaDeCreditoCabecera] PRIMARY KEY CLUSTERED 
(
	[IdNC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_ListadoNotaCredito_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [Movimientos].[v_ListadoNotaCredito_1]
AS
SELECT C.[IdNC]
      ,C.[IdTipoDocumento]
	  ,A.Nombre as 'Almacen'
      ,C.[Serie]
      ,C.[Numero]
      ,cast(C.[Fecha] as date) as 'Fecha'
      ,C.[Referencia]
      ,C.[IdMotivo]
      ,C.[IdCliente]
      ,C.[DNIRUC]
      ,C.[Nombre]
      ,C.[AFavor] as 'Total'
      ,C.[IdUsuario]
      ,C.[IdAlmacen]
      ,C.[Estado]
      ,C.[Empleada]
	  ,B.Comprobante
  FROM [Movimientos].[NotaDeCreditoCabecera] C
  INNER JOIN [Maestros].[Almacen] A
  ON C.IdAlmacen = A.IdAlmacen
  LEFT JOIN 
		(select DPV.Datos 'NC', CVC.IdAlmacen,
				CVC.Serie + '-' + replicate('0', 8 - Len(cast(CVC.Numero as varchar(8)))) + cast(CVC.Numero as varchar(8)) AS 'Comprobante'
		from Movimientos.DetallePagoVenta DPV
		inner join Movimientos.ComprobanteDeVentaCabecera CVC
		on dpv.IdComprobante = cvc.IdComprobante
		where cvc.Estado <> 'A'
		and IdTipoPagoVenta = 8) B
  ON C.Serie + '-' + replicate('0', 8 - Len(cast(C.Numero as varchar(8)))) + cast(C.Numero as varchar(8)) = B.NC
  and C.IdAlmacen = B.IdAlmacen

GO
/****** Object:  Table [Almacen].[MovimientosCabecera]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Almacen].[MovimientosCabecera](
	[IdMovimiento] [int] IDENTITY(1,1) NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Tipo] [char](1) NOT NULL,
	[Motivo] [varchar](40) NOT NULL,
	[Fecha] [date] NULL,
	[Descripcion] [varchar](255) NOT NULL,
	[IdProveedor] [int] NULL,
	[IdAlmacenDestinoOrigen] [int] NULL,
	[IdOc] [int] NULL,
	[IdUsuario] [int] NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[IdGuiaRemision] [int] NULL,
	[IdUsuarioConfirma] [int] NULL,
	[FechaHoraConfirma] [datetime] NULL,
	[Estado] [char](1) NOT NULL,
 CONSTRAINT [PK_IngresosEgresosCabecera] PRIMARY KEY CLUSTERED 
(
	[IdMovimiento] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Almacen].[v_ListadoIngresosEgresosAlmacen_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** Script for SelectTopNRows command from SSMS  ******/
CREATE view [Almacen].[v_ListadoIngresosEgresosAlmacen_1]
as
SELECT C.IdMovimiento 
      ,C.[IdAlmacen] 
	  ,A.Nombre AS 'Almacen'
      ,C.[Tipo]
      ,C.[Motivo]
      ,C.[Fecha]
      ,C.[Descripcion]
	  ,C.IdGuiaRemision
	  ,C.[IdUsuarioConfirma]
	  ,C.[Estado]
  FROM [Almacen].[MovimientosCabecera] C
  inner join Maestros.Almacen A
  on C.IdAlmacen = a.IdAlmacen
GO
/****** Object:  View [Maestros].[v_Articulos]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [Maestros].[v_Articulos]
AS
SELECT        IdArticulo, IdProveedor, Descripcion, Talla, Linea, Familia, Marca, Color, Modelo, Material, UnidadAlmacen, MonedaCosteo, PrecioCompra, PrecioVenta, FechaRegistro, Estado
FROM            Maestros.Articulo
GO
/****** Object:  Table [Almacen].[GuiaRemisionCabecera]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Almacen].[GuiaRemisionCabecera](
	[IdGuiaRemision] [int] IDENTITY(1,1) NOT NULL,
	[IdMovimiento] [int] NOT NULL,
	[Serie] [varchar](4) NULL,
	[Numero] [int] NULL,
	[Fecha] [datetime] NULL,
	[DireccionOrigen] [varchar](150) NULL,
	[DPDOrigen] [varchar](100) NULL,
	[TipoDestinatario] [varchar](9) NULL,
	[RazonSocialNombre] [varchar](100) NULL,
	[RUCDNICE] [varchar](11) NULL,
	[DireccionDestino] [varchar](100) NULL,
	[DPDDestino] [varchar](100) NULL,
	[Observaciones] [varchar](300) NULL,
	[IdUsuario] [int] NULL,
	[Estado] [char](1) NULL,
	[IdAlmacen] [int] NULL,
	[IdProveedor] [int] NULL,
	[IdTipoDocumento] [int] NULL,
	[IdAlmacenDestino] [int] NULL,
 CONSTRAINT [PK_GuiaRemisionCabecera] PRIMARY KEY CLUSTERED 
(
	[IdGuiaRemision] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Almacen].[v_ListadoGR_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE view [Almacen].[v_ListadoGR_1]
as
SELECT G.[IdGuiaRemision]
      ,G.[IdMovimiento]
      ,G.[Serie] + '-' + REPLICATE('0', (8 - LEN(cast(G.[Numero] as varchar(8))))) + cast(G.[Numero] as varchar(8)) AS 'Numero'
      ,cast(G.[Fecha] as date) as 'Fecha'
      ,G.[DireccionOrigen]
      ,G.[DPDOrigen]
      ,G.[TipoDestinatario]
      ,G.[RazonSocialNombre]
      ,G.[RUCDNICE]
      ,G.[DireccionDestino]
      ,G.[DPDDestino]
      ,G.[Observaciones]
      ,G.[IdUsuario]
      ,G.[Estado]
      ,G.[IdAlmacen]
      ,G.[IdProveedor]
      ,G.[IdTipoDocumento]
      ,G.[IdAlmacenDestino]
	  ,O.Nombre as 'AlmacenOrigen'
	  ,D.Nombre as 'AlmacenDestino'
  FROM [Almacen].[GuiaRemisionCabecera] G
  left join Maestros.Almacen O
  on G.IdAlmacen = O.IdAlmacen
  left JOIN MAESTROS.Almacen D
  ON G.IdAlmacenDestino = D.IdAlmacen
GO
/****** Object:  View [dbo].[v_ConsultasArticulos]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create view [dbo].[v_ConsultasArticulos]

AS

select t.Nombre, a.IdArticulo, a.Descripcion, a.PrecioCompra, convert(varchar, c.Fecha, 103) FechaVenta, min(cc.Fecha) FechaCompra,
	count(d.Cantidad) Cantidad, sum(d.Total) / count(d.Cantidad) PrecioVentaMedio, sum(d.Total) Monto
from Movimientos.ComprobanteDeVentaCabecera c inner join Movimientos.ComprobanteDeVentaDetalle d
	on c.IdComprobante = d.IdComprobante inner join Maestros.Articulo a
	on d.IdArticulo = a.IdArticulo inner join Maestros.Almacen t
	on c.IdAlmacen = t.IdAlmacen inner join Almacen.MovimientosDetalle cd
	on cd.IdArticulo = a.IdArticulo inner join Almacen.MovimientosCabecera cc
	on cd.IdMovimiento = cc.IdMovimiento
where c.Estado = 'E' and a.Descripcion not like '%DESC%' and a.Descripcion not like '%BOLSO%' and cc.Tipo = 'I' and cc.Estado = 'E'
	--and a.IdArticulo between 8260 and 8263
group by t.Nombre, a.IdArticulo, a.Descripcion, a.PrecioCompra, convert(varchar, c.Fecha, 103)
--order by 3 desc

--cuando a entrada
-- a que precio a entrada
--que tienda lo ha vendido mas
--colores q se mueven mas
GO
/****** Object:  Table [Maestros].[Personal]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[Personal](
	[IdPersonal] [int] IDENTITY(1,1) NOT NULL,
	[Nombres] [varchar](100) NOT NULL,
	[Apellidos] [varchar](100) NOT NULL,
	[DocIdentidad] [varchar](20) NOT NULL,
	[NumeroDocIdentidad] [varchar](10) NOT NULL,
	[RUC] [varchar](11) NULL,
	[Sexo] [varchar](9) NOT NULL,
	[FechaNacimiento] [date] NULL,
	[Direccion] [varchar](100) NULL,
	[Telefono] [varchar](10) NULL,
	[Celular] [varchar](9) NULL,
	[Email] [varchar](50) NULL,
	[EstadoCivil] [varchar](20) NULL,
	[TipoEmpleado] [varchar](20) NOT NULL,
	[LugarNacimiento] [varchar](20) NULL,
	[Nacionalidad] [varchar](30) NULL,
	[GradoInstruccion] [varchar](20) NULL,
	[Especialidad] [varchar](20) NULL,
	[IdAlmacen] [int] NULL,
	[Cargo] [varchar](100) NULL,
	[FechaIngreso] [date] NULL,
	[FechaRegistro] [date] NULL,
	[Foto] [image] NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_Personal] PRIMARY KEY CLUSTERED 
(
	[IdPersonal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [Maestros].[v_Personal_3]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [Maestros].[v_Personal_3]
AS
SELECT        P.IdPersonal, P.Nombres + ' ' + P.Apellidos as Personal, A.Nombre as Local
FROM            Maestros.Personal P inner join
				Maestros.Almacen A on P.IdAlmacen = A.IdAlmacen
GO
/****** Object:  Table [Maestros].[TipoDocumentoVenta]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[TipoDocumentoVenta](
	[IdTipoDocumentoVenta] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](14) NOT NULL,
	[Abreviatura] [varchar](5) NOT NULL,
	[Manual] [bit] NOT NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_TipoDocumentoVenta] PRIMARY KEY CLUSTERED 
(
	[IdTipoDocumentoVenta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_ListadoVentaDiaria_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--select top 1 * from [Movimientos].[v_ListadoVentaDiaria_1] order by fecha desc






CREATE VIEW [Movimientos].[v_ListadoVentaDiaria_1]
AS
SELECT C.[IdComprobante]
      ,C.[IdTipoDocumento]
	  ,cast(C.[Fecha] as date) as 'Fecha'
	  ,cast(C.[Fecha] as time) as 'Hora'
	  ,A.[Nombre] as 'Almacen'
	  ,T.[Descripcion]
      ,C.[Serie]
      ,C.[Numero]
      ,C.[IdCliente]
      ,C.[DNIRUC]
      ,C.[Nombre]
	  ,C.[APagar] AS 'Total'
      ,C.[IdVendedor]
      ,C.[IdCajero]
      ,C.[IdAlmacen]
	  ,(SELECT top 1 left(Tipo, 1) FROM Movimientos.DetallePagoVenta a inner join Maestros.TipoPagoVenta b on a.idtipopagoventa = b.idtipopagoventa WHERE IDCOMPROBANTE = C.IDCOMPROBANTE) Pago
      ,C.[Estado]
	  ,C.[GeneroNC]
  FROM [Movimientos].[ComprobanteDeVentaCabecera] C
  INNER JOIN [Maestros].[TipoDocumentoVenta] T
  ON C.IdTipoDocumento = T.IdTipoDocumentoVenta
  INNER JOIN [Maestros].[Almacen] A
  ON C.IdAlmacen = A.IdAlmacen
GO
/****** Object:  View [Movimientos].[v_DetallePagoVenta_2]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [Movimientos].[v_DetallePagoVenta_2]
AS
SELECT LV.Fecha 
	  ,LV.[IdComprobante]
	  ,LV.Serie
	  ,LV.Numero
      ,LV.[IdTipoDocumento]
	  ,LV.[IdCajero]
      ,LV.[IdAlmacen]
      ,LV.[Estado]
	  ,DPV.Descripcion
	  ,DPV.Soles
	  ,DPV.Dolares
	  ,DPV.Vuelto
  FROM [Movimientos].[v_ListadoVentaDiaria_1] LV
  INNER JOIN [Movimientos].[v_DetallePagoVenta_1] DPV
  ON LV.IdComprobante = DPV.IdComprobante
GO
/****** Object:  Table [Maestros].[Proveedor]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[Proveedor](
	[IdProveedor] [int] IDENTITY(1000,1) NOT NULL,
	[TipoDocumento] [varchar](20) NULL,
	[RUC] [varchar](11) NULL,
	[TipoPersona] [varchar](15) NULL,
	[Nombre] [varchar](100) NOT NULL,
	[NombreComercial] [varchar](100) NULL,
	[Direccion] [varchar](100) NULL,
	[DPD] [varchar](100) NULL,
	[Pais] [varchar](15) NULL,
	[FormaPago] [varchar](30) NULL,
	[Banco] [varchar](30) NULL,
	[Cuenta] [varchar](20) NULL,
	[CCI] [varchar](30) NULL,
	[Contacto] [varchar](100) NULL,
	[Telefono] [varchar](10) NULL,
	[Celular] [varchar](9) NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_Proveedor] PRIMARY KEY CLUSTERED 
(
	[IdProveedor] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Maestros].[v_Proveedores_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [Maestros].[v_Proveedores_1]
AS
SELECT        IdProveedor, RUC, Nombre, Estado
FROM            Maestros.Proveedor
GO
/****** Object:  Table [FE].[Resumen]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [FE].[Resumen](
	[IdResumenFE] [int] IDENTITY(1,1) NOT NULL,
	[Correlativo] [int] NOT NULL,
	[NombreArchivo] [varchar](100) NOT NULL,
	[Hash] [varchar](100) NOT NULL,
	[DocInicio] [varchar](20) NOT NULL,
	[DocFin] [varchar](20) NOT NULL,
	[CantidadDocumentos] [int] NOT NULL,
	[FechaEnvio] [datetime] NOT NULL,
	[FechaReferencia] [datetime] NULL,
	[EnvioSUNAT] [bit] NOT NULL,
	[TicketSUNAT] [varchar](50) NOT NULL,
	[RespuestaSUNAT] [varchar](8000) NOT NULL,
	[FechaRespuestaSUNAT] [datetime] NOT NULL,
	[Tienda] [varchar](50) NOT NULL,
 CONSTRAINT [PK_Resumen] PRIMARY KEY CLUSTERED 
(
	[IdResumenFE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [FE].[Comprobantes]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [FE].[Comprobantes](
	[IdFE] [int] IDENTITY(1,1) NOT NULL,
	[IdComprobante] [int] NOT NULL,
	[Hash] [varchar](500) NOT NULL,
	[QR] [image] NULL,
	[EnviadoSUNAT] [bit] NULL,
	[FechaEnvio] [datetime] NULL,
	[TicketSUNAT] [varchar](50) NULL,
	[RespuestaSUNAT] [varchar](5000) NULL,
	[FechaRespuestaSUNAT] [datetime] NULL,
	[Estado] [bit] NOT NULL,
	[Xml] [varchar](max) NULL,
	[EsNota] [bit] NOT NULL,
 CONSTRAINT [PK_Comprobantes] PRIMARY KEY CLUSTERED 
(
	[IdFE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [FE].[v_DocumentosEnviadosSUNAT]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [FE].[v_DocumentosEnviadosSUNAT]

as

select Tienda, Hash, DocInicio, DocFin, CantidadDocumentos, FechaEnvio, FechaReferencia, TicketSUNAT, RespuestaSUNAT
from fe.Resumen fe 
wHERE EnvioSUNAT = 1
	union all
select a.Nombre Tienda, Hash, f.Serie + '-' + right('00000000' + cast(f.Numero as varchar), 8), 
f.Serie + '-' + right('00000000' + cast(f.Numero as varchar), 8), 1, FechaEnvio, f.Fecha, TicketSUNAT, RespuestaSUNAT
from fe.Comprobantes fe inner join Movimientos.ComprobanteDeVentaCabecera f
	on fe.IdComprobante = f.IdComprobante inner join Maestros.Almacen a
	on f.IdAlmacen = a.IdAlmacen
where f.IdTipoDocumento = 2 and TicketSUNAT is not null
--order by FechaEnvio desc
GO
/****** Object:  View [Maestros].[v_Articulos_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [Maestros].[v_Articulos_1]
AS
SELECT        IdArticulo, IdProveedor, Descripcion, UnidadAlmacen, PrecioVenta, Estado
FROM            Maestros.Articulo
GO
/****** Object:  Table [Maestros].[AsignacionSerieCajero]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[AsignacionSerieCajero](
	[IdAsignacion] [int] IDENTITY(1,1) NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[IdSerieCorrelativo] [int] NOT NULL,
 CONSTRAINT [PK_AsignacionSerieCajero] PRIMARY KEY CLUSTERED 
(
	[IdAsignacion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[SerieCorrelativo]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[SerieCorrelativo](
	[IdSerieCorrelativo] [int] IDENTITY(1,1) NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[IdTipoDocumentoVenta] [int] NOT NULL,
	[Serie] [char](3) NOT NULL,
	[Correlativo] [int] NOT NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_SerieCorrelativo] PRIMARY KEY CLUSTERED 
(
	[IdSerieCorrelativo] ASC,
	[IdAlmacen] ASC,
	[IdTipoDocumentoVenta] ASC,
	[Serie] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Maestros].[v_SeriesXCajero_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [Maestros].[v_SeriesXCajero_1]
AS
select ASSC.IdSerieCorrelativo, assc.IdUsuario, assc.IdAlmacen, dv.Descripcion + ' (' + sc.Serie + ')' as 'DocumentoSerie'
from Maestros.AsignacionSerieCajero ASSC
inner join maestros.SerieCorrelativo SC
	on ASSC.IdSerieCorrelativo = SC.IdSerieCorrelativo
inner join Maestros.TipoDocumentoVenta DV
	on sc.IdTipoDocumentoVenta = dv.IdTipoDocumentoVenta
where sc.Estado = 1
	and dv.Manual = 0
	and dv.Descripcion in ('BOLETA','FACTURA', 'TICKET')
	
GO
/****** Object:  View [Maestros].[v_SeriesXALmacen_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [Maestros].[v_SeriesXALmacen_1]
AS
select sc.IdSerieCorrelativo, sc.IdAlmacen, dv.Descripcion + ' (' + sc.Serie + ')' as 'DocumentoSerie'
from Maestros.SerieCorrelativo SC
inner join Maestros.TipoDocumentoVenta DV
	on sc.IdTipoDocumentoVenta = dv.IdTipoDocumentoVenta
where sc.Estado = 1
	and dv.Manual = 0
	and dv.Descripcion in ('BOLETA','FACTURA', 'TICKET')
	and SC.IdSerieCorrelativo not in
		(select IdSerieCorrelativo
			from Maestros.AsignacionSerieCajero)
GO
/****** Object:  View [Maestros].[v_SerieCorrelativo_2]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [Maestros].[v_SerieCorrelativo_2]
AS
	  SELECT AC.IdAsignacion, AC.IdUsuario, AC.IdAlmacen, SC.IdTipoDocumentoVenta, AC.IdSerieCorrelativo, SC.Serie, SC.Correlativo, SC.Estado
	  FROM Maestros.AsignacionSerieCajero AC
	  INNER JOIN Maestros.SerieCorrelativo SC
	  on AC.IdSerieCorrelativo = SC.IdSerieCorrelativo
GO
/****** Object:  View [Movimientos].[v_HistoricoVentas]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create view [Movimientos].[v_HistoricoVentas]

as

--set language 'Spanish'

select year(a.Fecha) Año, month(a.fecha) Mes, day(a.fecha) Dia, convert(varchar, Fecha, 103) Fecha, b.Nombre Almacen, sum(a.APagar) Total
from Movimientos.ComprobanteDeVentaCabecera a inner join Maestros.Almacen b
	on a.IdAlmacen = b.IdAlmacen
where a.Estado = 'E' --and fecha > '01/07/2021'
group by year(a.Fecha), month(a.fecha), day(a.fecha), convert(varchar, Fecha, 103), b.Nombre
--order by 1, 2, 3, 4
GO
/****** Object:  Table [Movimientos].[IngresosEgresosCabecera]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[IngresosEgresosCabecera](
	[IdIngresoEgreso] [int] IDENTITY(1,1) NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Naturaleza] [char](1) NOT NULL,
	[Tipo] [varchar](20) NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[Glosa] [varchar](200) NOT NULL,
	[Monto] [decimal](18, 2) NOT NULL,
	[IdProveedor] [int] NULL,
	[IdAlmacenDestino] [int] NULL,
	[IdCajeroDestino] [int] NULL,
	[FechaRegistro] [datetime] NULL,
	[Estado] [char](1) NOT NULL,
	[IdAlmacenGasto] [int] NULL,
 CONSTRAINT [PK_IngresosEgresos] PRIMARY KEY CLUSTERED 
(
	[IdIngresoEgreso] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_ResumenCierreDeCaja_2]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [Movimientos].[v_ResumenCierreDeCaja_2]
AS
SELECT 0 AS IdResumen, IdUsuario, IdAlmacen, cast(Fecha as date) as 'Fecha', IdGrupo, Grupo, Detalle, Monto AS Monto, getdate() as FechaRegistro
FROM
(SELECT IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 3 as IdGrupo
      ,'OTROS INGRESOS' as Grupo
      ,Glosa as Detalle
      ,Monto
  FROM Movimientos.IngresosEgresosCabecera
  WHERE Naturaleza = 'I' AND Estado = 'E'
	AND Tipo in ('SOBRANTE DE CAJA')
	union all
	SELECT IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 3 as IdGrupo
      ,'OTROS INGRESOS' as Grupo
      ,Glosa as Detalle
      ,Monto
  FROM Movimientos.IngresosEgresosCabecera
  WHERE Naturaleza = 'I' AND Estado = 'E'
	AND Tipo in ('TRANSFERENCIA')
	) Grupo3
UNION ALL
SELECT 0 AS IdResumen
	  ,IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 4 as IdGrupo
      ,'GASTOS DEL DIA' as Grupo
      ,Tipo + ' - ' + UPPER(Glosa) as Detalle
      ,Monto
	  ,getdate() as FechaRegistro
  FROM Movimientos.IngresosEgresosCabecera
  WHERE Naturaleza = 'E' AND Estado = 'E'
	AND Tipo NOT IN ('TRANSFERENCIA', 'PAGO PROVEEDORES')
UNION ALL
SELECT 0 AS IdResumen
	  ,IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 5 as IdGrupo
      ,'TRANSFERENCIAS' as Grupo
      ,UPPER(Glosa) as Detalle
      ,Monto
	  ,getdate() as FechaRegistro
  FROM Movimientos.IngresosEgresosCabecera
  WHERE Naturaleza = 'E' AND Estado = 'E'
	AND Tipo in ('TRANSFERENCIA')
UNION ALL
	SELECT 0 AS IdResumen
	  ,IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 8 as IdGrupo
      ,'PAGO PROVEEDORES' as Grupo
      ,UPPER(Glosa) + ' ' + PROV.Nombre as Detalle
      ,Monto
	  ,getdate() as FechaRegistro
  FROM Movimientos.IngresosEgresosCabecera IEC
  INNER JOIN [Maestros].[Proveedor] PROV
  on IEC.IdProveedor = PROV.IdProveedor
  WHERE Naturaleza = 'E' AND IEC.Estado = 'E'
	AND Tipo in ('PAGO PROVEEDORES')




  	

GO
/****** Object:  Table [Movimientos].[OrdenDeCompraCabecera]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[OrdenDeCompraCabecera](
	[IdOc] [int] IDENTITY(1,1) NOT NULL,
	[IdProveedor] [int] NOT NULL,
	[NumeroOC] [char](7) NOT NULL,
	[FechaOC] [datetime] NOT NULL,
	[RUCProveedor] [varchar](11) NOT NULL,
	[NombreProveedor] [varchar](100) NOT NULL,
	[DireccionProveedor] [varchar](100) NOT NULL,
	[Moneda] [varchar](10) NOT NULL,
	[TipoCambio] [numeric](8, 4) NOT NULL,
	[FormaPago] [varchar](30) NOT NULL,
	[SinIGV] [bit] NOT NULL,
	[FechaEntrega] [datetime] NOT NULL,
	[Atencion] [varchar](50) NOT NULL,
	[Glosa] [varchar](255) NOT NULL,
	[ImporteSubTotal] [numeric](12, 2) NOT NULL,
	[ImporteIGV] [numeric](12, 2) NOT NULL,
	[ImporteTotal] [numeric](12, 2) NOT NULL,
	[EstadoEmision] [bit] NOT NULL,
	[FechaEmision] [datetime] NULL,
	[EstadoAtencion] [char](2) NOT NULL,
	[FechaAtencionTotal] [datetime] NULL,
	[FechaAnulado] [datetime] NULL,
	[FechaCierre] [datetime] NULL,
	[IdUsuarioRegistra] [int] NULL,
	[FechaRegistra] [datetime] NOT NULL,
 CONSTRAINT [PK_OrdenDeCompraCabecera] PRIMARY KEY CLUSTERED 
(
	[IdOc] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_ListadoOC_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [Movimientos].[v_ListadoOC_1]
as
SELECT C.[IdOc]
      ,C.[IdProveedor]
	  ,P.Nombre
      ,C.[NumeroOC]
      ,C.[FechaOC]
      ,C.[FechaEntrega]
      ,C.[ImporteSubTotal]
      ,C.[ImporteIGV]
      ,C.[ImporteTotal]
      , CASE C.[EstadoAtencion] 
			WHEN 'PE' THEN 'PENDIENTE'
			WHEN 'PA' THEN 'PARCIAL'
			WHEN 'TO' THEN 'TOTAL'
			WHEN 'AN' THEN 'ANULADO'
	     END as 'Estado'
      ,C.[FechaAtencionTotal]
      ,C.[FechaAnulado]
	  ,C.Glosa
  FROM [Movimientos].[OrdenDeCompraCabecera] C
  inner join [Maestros].[Proveedor] P
  on C.IdProveedor = P.IdProveedor
GO
/****** Object:  Table [Movimientos].[AperturaCierreCaja]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[AperturaCierreCaja](
	[IdAperturaCierre] [int] IDENTITY(1,1) NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Fecha] [date] NOT NULL,
	[FondoFijo] [decimal](18, 2) NOT NULL,
	[SaldoInicial] [decimal](18, 2) NOT NULL,
	[VentaDia] [decimal](18, 2) NOT NULL,
	[Ingresos] [decimal](18, 2) NOT NULL,
	[Egresos] [decimal](18, 2) NOT NULL,
	[SaldoFinal] [decimal](18, 2) NOT NULL,
	[Estado] [char](1) NOT NULL,
	[ObservacionApertura] [varchar](200) NULL,
	[ObservacionCierre] [varchar](200) NULL,
 CONSTRAINT [PK_AperturaCierreCaja] PRIMARY KEY CLUSTERED 
(
	[IdAperturaCierre] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[Usuario]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[Usuario](
	[IdUsuario] [int] IDENTITY(1,1) NOT NULL,
	[Nombre] [varchar](50) NOT NULL,
	[IdPersonal] [int] NOT NULL,
	[Estado] [bit] NOT NULL,
	[Clave] [varbinary](128) NULL,
 CONSTRAINT [PK_Usuario] PRIMARY KEY CLUSTERED 
(
	[IdUsuario] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_AlmacenesAperturaFecha_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE view [Movimientos].[v_AlmacenesAperturaFecha_1]
as
SELECT distinct acc.IdAlmacen
      ,a.Nombre AS Almacen
      ,acc.[Fecha], acc.Estado
  FROM [Movimientos].[AperturaCierreCaja] As ACC
  inner join [Maestros].[Almacen] as A
  on ACC.IdAlmacen = a.IdAlmacen
  inner join [Maestros].[Usuario] as U
  on acc.IdUsuario = u.IdUsuario
  inner join [Maestros].[Personal] as P
  on u.IdPersonal = p.IdPersonal
  --where acc.Estado <> 'C';
GO
/****** Object:  View [Movimientos].[v_UsuarioAperturaAlmacen_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [Movimientos].[v_UsuarioAperturaAlmacen_1]
as
SELECT acc.IdUsuario
      ,p.Nombres + ' ' + p.Apellidos as Cajero
      ,acc.IdAlmacen, acc.Estado, acc.Fecha
  FROM [Movimientos].[AperturaCierreCaja] As ACC
  inner join [Maestros].[Almacen] as A
  on ACC.IdAlmacen = a.IdAlmacen
  inner join [Maestros].[Usuario] as U
  on acc.IdUsuario = u.IdUsuario
  inner join [Maestros].[Personal] as P
  on u.IdPersonal = p.IdPersonal
  --where acc.Estado <> 'C';
GO
/****** Object:  View [Maestros].[v_SerieCorrelativo_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE VIEW [Maestros].[v_SerieCorrelativo_1]
AS
SELECT        SC.IdSerieCorrelativo, SC.IdAlmacen, TDV.IdTipoDocumentoVenta, TDV.Descripcion as DescripcionTipoDoc, SC.Serie, SC.Correlativo, SC.Estado
FROM            Maestros.SerieCorrelativo SC inner join
				Maestros.TipoDocumentoVenta TDV on SC.IdTipoDocumentoVenta = TDV.IdTipoDocumentoVenta
GO
/****** Object:  View [Movimientos].[v_ListadoAperturaCierre_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE view [Movimientos].[v_ListadoAperturaCierre_1]
as
SELECT AC.[IdAperturaCierre]
	  ,AC.[IdAlmacen]
	  ,A.Nombre
      ,AC.[IdUsuario]
      ,P.Nombres + ' ' + P.Apellidos AS 'Cajero'
      ,AC.[Fecha]
      ,isnull(AC.[SaldoInicial],0) as 'SaldoInicial'
      ,isnull(AC.[VentaDia],0) as 'VentaDia'
      ,isnull(AC.[Ingresos],0) as 'Ingresos'
      ,isnull(AC.[Egresos],0) as 'Egresos'
      ,isnull(AC.[SaldoFinal],0) as 'SaldoFinal'
      ,AC.[Estado]
      ,AC.[ObservacionApertura]
      ,AC.[ObservacionCierre]
  FROM [Movimientos].[AperturaCierreCaja] AC
  INNER JOIN Maestros.Almacen A
  ON AC.IdAlmacen = A.IdAlmacen
  INNER JOIN Maestros.Usuario U
  on AC.IdUsuario = U.IdUsuario
  INNER JOIN Maestros.Personal P
  ON U.IdPersonal = P.IdPersonal
GO
/****** Object:  View [Movimientos].[v_ListadoIngresosEgresos_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/****** Script for SelectTopNRows command from SSMS  ******/

CREATE view [Movimientos].[v_ListadoIngresosEgresos_1]
as
SELECT C.[IdIngresoEgreso]
      ,C.[IdUsuario]
	  ,p.Nombres + ' ' + p.Apellidos as Cajero
      ,C.[IdAlmacen]
	  ,A.[Nombre] as Almacen
      ,C.[Naturaleza]
      ,C.[Tipo]
      ,C.[Fecha]
      ,C.[Glosa]
      ,C.[Monto]
	  ,C.[IdAlmacenDestino]
	  ,C.[IdCajeroDestino]
	  ,C.[Estado]
  FROM [Movimientos].[IngresosEgresosCabecera] C
  inner join [Maestros].[Almacen] as A
  on C.IdAlmacen = a.IdAlmacen
  inner join [Maestros].[Usuario] as U
  on C.IdUsuario = u.IdUsuario
  inner join [Maestros].[Personal] as P
  on u.IdPersonal = p.IdPersonal
GO
/****** Object:  View [Movimientos].[v_ResumenCierreDeCaja_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [Movimientos].[v_ResumenCierreDeCaja_1]
AS
SELECT 0 AS IdResumen, IdUsuario, IdAlmacen, cast(Fecha as date) as 'Fecha', IdGrupo, Grupo, Detalle, Monto AS Monto, getdate() as FechaRegistro
FROM
(SELECT IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 3 as IdGrupo
      ,'OTROS INGRESOS' as Grupo
      ,Glosa as Detalle
      ,Monto
  FROM Movimientos.IngresosEgresosCabecera
  WHERE Naturaleza = 'I' AND Estado = 'E'
	AND Tipo in ('SOBRANTE DE CAJA')
	union all
	SELECT IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 3 as IdGrupo
      ,'OTROS INGRESOS' as Grupo
      ,Glosa as Detalle
      ,Monto
  FROM Movimientos.IngresosEgresosCabecera
  WHERE Naturaleza = 'I' AND Estado = 'E'
	AND Tipo in ('TRANSFERENCIA')
	) Grupo3
UNION ALL
SELECT 0 AS IdResumen
	  ,IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 4 as IdGrupo
      ,'GASTOS DEL DIA' as Grupo
      ,UPPER(Glosa) as Detalle
      ,Monto
	  ,getdate() as FechaRegistro
  FROM Movimientos.IngresosEgresosCabecera
  WHERE Naturaleza = 'E' AND Estado = 'E'
	AND Tipo NOT IN ('TRANSFERENCIA', 'PAGO PROVEEDORES')
UNION ALL
SELECT 0 AS IdResumen
	  ,IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 5 as IdGrupo
      ,'TRANSFERENCIAS' as Grupo
      ,UPPER(Glosa) as Detalle
      ,Monto
	  ,getdate() as FechaRegistro
  FROM Movimientos.IngresosEgresosCabecera
  WHERE Naturaleza = 'E' AND Estado = 'E'
	AND Tipo in ('TRANSFERENCIA')
UNION ALL
	SELECT 0 AS IdResumen
	  ,IdUsuario
      ,IdAlmacen
	  ,cast(Fecha as date) as 'Fecha'
	  , 8 as IdGrupo
      ,'PAGO PROVEEDORES' as Grupo
      ,UPPER(Glosa) + ' ' + PROV.Nombre as Detalle
      ,Monto
	  ,getdate() as FechaRegistro
  FROM Movimientos.IngresosEgresosCabecera IEC
  INNER JOIN [Maestros].[Proveedor] PROV
  on IEC.IdProveedor = PROV.IdProveedor
  WHERE Naturaleza = 'E' AND IEC.Estado = 'E'
	AND Tipo in ('PAGO PROVEEDORES')




  	

GO
/****** Object:  View [Maestros].[v_Personal_2]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [Maestros].[v_Personal_2]
AS
SELECT        U.IdUsuario, P.IdPersonal, P.Nombres + ' ' + P.Apellidos as Personal, A.Nombre as Local, P.Cargo , P.Estado
FROM            Maestros.Personal P inner join
				Maestros.Almacen A on P.IdAlmacen = A.IdAlmacen
				inner join Maestros.Usuario U
				on u.IdPersonal = P.IdPersonal
GO
/****** Object:  Table [Movimientos].[OrdenDeCompraDetalle]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[OrdenDeCompraDetalle](
	[IdOc] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[DescripcionArticulo] [varchar](300) NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[CostoUnitario] [numeric](14, 2) NOT NULL,
	[Total] [numeric](12, 2) NOT NULL,
 CONSTRAINT [PK_OrdenDeCompraDetalle] PRIMARY KEY CLUSTERED 
(
	[IdOc] ASC,
	[Item] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Almacen].[v_DetalleOCParaIngreso_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [Almacen].[v_DetalleOCParaIngreso_1]
as

SELECT OC.IdOC as 'IdMovimiento' --Se renombra así para que no haya conflicto al usar en el formulario de ingresos/egresos a almacén
      ,OC.[Item]
      ,OC.[IdArticulo]
      ,OC.[DescripcionArticulo]
      ,isnull(OC.[Cantidad] - M.Cantidad,OC.[Cantidad]) as 'Cantidad'
      ,OC.[CostoUnitario] as 'Valor'
  FROM [Movimientos].[OrdenDeCompraDetalle] OC
  LEFT JOIN (select C.IdOC, d.Item 
      ,D.[IdArticulo]
      ,D.[Cantidad]
  from [Almacen].[MovimientosCabecera] C
  inner join [Almacen].[MovimientosDetalle] D
  on C.[IdMovimiento] = D.[IdMovimiento]
  where c.Estado = 'E'
  and c.IdOc is not null) M 
  ON OC.IdOc = M.IdOc
  and OC.Item = M.Item
  and OC.IdArticulo = M.IdArticulo;
GO
/****** Object:  View [Maestros].[v_Almacen_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Script for SelectTopNRows command from SSMS  ******/
create view [Maestros].[v_Almacen_1]
as
SELECT [IdAlmacen]
      ,[Nombre]
      ,[EsTienda]
      ,[Direccion]
      ,[DPD]
      ,[Telefono]
      ,[Celular]
      ,[RazonSocial]
      ,[RUC]
      ,[Estado]
      ,[Ubigeo]
      ,[Certificado]
      ,[PasswordCertificado]
      ,[Abreviacion]
      ,[UsuarioSOL]
      ,[ClaveSOL]
      ,[AfectoIGV]
  FROM [Maestros].[Almacen]
GO
/****** Object:  View [Movimientos].[v_VentasXAlmacenXMesXAnoXProveedor_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [Movimientos].[v_VentasXAlmacenXMesXAnoXProveedor_1]
AS
SELECT [IdComprobante]
      ,[IdTipoDocumento]
      ,[Serie]
      ,[Numero]
      ,[Fecha]
      ,[IdCliente]
      ,[DNIRUC]
      ,[Nombre]
      ,[Total]
      ,[IdVendedor]
      ,[IdCajero]
      ,[IdAlmacen]
      ,[Estado]
  FROM [Movimientos].[ComprobanteDeVentaCabecera]
GO
/****** Object:  View [Maestros].[v_Articulos_Busqueda_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE VIEW [Maestros].[v_Articulos_Busqueda_1]
AS
SELECT        A.IdArticulo, A.Descripcion, P.Nombre as Proveedor, A.Estado
FROM            Maestros.Articulo A inner join Maestros.Proveedor P
				on A.IdProveedor = P.IdProveedor				
GO
/****** Object:  View [Movimientos].[v_ListadoComprasAProveedores_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Script for SelectTopNRows command from SSMS  ******/

CREATE view [Movimientos].[v_ListadoComprasAProveedores_1]
as
SELECT C.[IdOc]
      ,C.[IdProveedor]
      ,C.[NumeroOC]
      ,C.[FechaOC]
      ,D.[DescripcionArticulo]
	  ,D.Cantidad
	  ,D.CostoUnitario
	  ,D.Total
	  ,C.Glosa
  FROM [Movimientos].[OrdenDeCompraCabecera] C
  INNER JOIN [Movimientos].[OrdenDeCompraDetalle] D
  ON C.IdOc = D.IdOc
  WHERE C.EstadoAtencion <> 'AN'
GO
/****** Object:  Table [Maestros].[Cliente]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[Cliente](
	[IdCliente] [int] IDENTITY(1,1) NOT NULL,
	[TipoDocumento] [varchar](10) NOT NULL,
	[DNIRUC] [varchar](11) NOT NULL,
	[Nombre] [varchar](100) NOT NULL,
	[Direccion] [varchar](100) NULL,
	[DPD] [varchar](100) NULL,
	[Telefono] [varchar](10) NULL,
	[Celular] [varchar](9) NULL,
	[Email] [varchar](50) NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_Cliente] PRIMARY KEY CLUSTERED 
(
	[IdCliente] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Maestros].[v_Clientes_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [Maestros].[v_Clientes_1]
AS
SELECT        IdCliente, DNIRUC, Nombre, Direccion, Estado
FROM            Maestros.Cliente
GO
/****** Object:  Table [Movimientos].[StockAlmacen]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[StockAlmacen](
	[IdAlmacen] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[Stock] [int] NOT NULL,
 CONSTRAINT [PK_Stock] PRIMARY KEY CLUSTERED 
(
	[IdAlmacen] ASC,
	[IdArticulo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_StockXAlmacen_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [Movimientos].[v_StockXAlmacen_1]
as
Select S.IdAlmacen, Al.Nombre as 'Almacen', Ar.Familia, ar.Linea, S.IdArticulo, Ar.Descripcion,
		S.Stock, Ar.PrecioCompra, S.Stock * Ar.PrecioCompra as 'ValorCompra', isnull(d.[Precio Final], ar.PrecioVenta) PrecioVenta, S.Stock * isnull(d.[Precio Final], ar.PrecioVenta) as 'ValorVenta'
from Movimientos.StockAlmacen S
inner join Maestros.Almacen Al
on S.IdAlmacen = Al.IdAlmacen
inner join Maestros.Articulo Ar
on S.IdArticulo = Ar.IdArticulo
left join Movimientos.v_Descuentos d
on ar.IdArticulo = d.idArticulo and al.IdAlmacen = d.idAlmacen

GO
/****** Object:  Table [Movimientos].[IngresosEgresosDetalle]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[IngresosEgresosDetalle](
	[IdDetalleIngresoEgreso] [int] IDENTITY(1,1) NOT NULL,
	[IdIngresoEgreso] [int] NOT NULL,
	[Forma] [char](8) NOT NULL,
	[Detalle] [varchar](200) NOT NULL,
	[Monto] [decimal](18, 2) NOT NULL,
	[Banco] [varchar](20) NULL,
	[Cuenta] [varchar](25) NULL,
	[Imagen] [image] NULL,
 CONSTRAINT [PK_DetalleIngresosEgresos] PRIMARY KEY CLUSTERED 
(
	[IdDetalleIngresoEgreso] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [Movimientos].[v_ListadoPagosAProveedores_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [Movimientos].[v_ListadoPagosAProveedores_1]
as
  SELECT C.IdProveedor, C.Fecha, C.Glosa, D.Forma, D.Detalle, D.Monto, D.Banco, D.Cuenta, C.FechaRegistro, D.Imagen, A.Nombre AS 'Almacén'
  FROM [Movimientos].[IngresosEgresosCabecera] C
  INNER JOIN [Movimientos].[IngresosEgresosDetalle] D
  ON C.IdIngresoEgreso = D.IdIngresoEgreso
  INNER JOIN [Maestros].[Almacen] A
  on C.IdAlmacen = A.IdAlmacen
  WHERE C.TIPO = 'PAGO PROVEEDORES' and C.Estado <> 'A'
GO
/****** Object:  View [Movimientos].[v_Recaudacion_3]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [Movimientos].[v_Recaudacion_3]
AS

SELECT        cast(C.Fecha as date) as 'Fecha', C.IdAlmacen, c.IdCajero, SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1) AS 'Descripcion', SUM(D.Soles - D.Vuelto) as 'Monto'
FROM          Movimientos.ComprobanteDeVentaCabecera AS C
				INNER JOIN Movimientos.DetallePagoVenta AS D
				ON C.IdComprobante = D.IdComprobante
				INNER JOIN Maestros.TipoPagoVenta AS T
				ON D.IdTipoPagoVenta = T.IdTipoPagoVenta
				where C.Estado in ('E','D')
				--where SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1) = 'efectivo'
				group by cast(C.Fecha as date), C.IdAlmacen, c.IdCajero, SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1)
	union all
SELECT        cast(C.Fecha as date) as 'Fecha', C.IdAlmacen, 0, SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1) AS 'Descripcion', SUM(D.Soles - D.Vuelto) as 'Monto'
FROM          Movimientos.ComprobanteDeVentaCabecera AS C
				INNER JOIN Movimientos.DetallePagoVenta AS D
				ON C.IdComprobante = D.IdComprobante
				INNER JOIN Maestros.TipoPagoVenta AS T
				ON D.IdTipoPagoVenta = T.IdTipoPagoVenta
				where C.Estado in ('E','D')
				--where SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1) = 'efectivo'
				group by cast(C.Fecha as date), C.IdAlmacen, SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1)
	union all
SELECT        cast(C.Fecha as date) as 'Fecha', 0, 0, SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1) AS 'Descripcion', SUM(D.Soles - D.Vuelto) as 'Monto'
FROM          Movimientos.ComprobanteDeVentaCabecera AS C
				INNER JOIN Movimientos.DetallePagoVenta AS D
				ON C.IdComprobante = D.IdComprobante
				INNER JOIN Maestros.TipoPagoVenta AS T
				ON D.IdTipoPagoVenta = T.IdTipoPagoVenta
				where C.Estado in ('E','D')
				--where SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1) = 'efectivo'
				group by cast(C.Fecha as date), SUBSTRING(T.Descripcion, 1, CHARINDEX(' ', T.Descripcion) - 1)


GO
/****** Object:  View [Maestros].[v_Personal_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [Maestros].[v_Personal_1]
AS
SELECT        P.IdPersonal, P.Nombres + ' ' + P.Apellidos as Personal, A.Nombre as Local, P.Cargo , P.Estado
FROM            Maestros.Personal P inner join
				Maestros.Almacen A on P.IdAlmacen = A.IdAlmacen
GO
/****** Object:  View [Movimientos].[v_CierreEnLinea_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [Movimientos].[v_CierreEnLinea_1]
AS

SELECT        cast(C.Fecha as date) as 'Fecha', C.IdAlmacen, C.IdUsuario, 'Saldo Inicial' Categoria, C.SaldoInicial Monto
from Movimientos.AperturaCierreCaja C
UNION ALL
select cast(C.Fecha as date) as 'Fecha', C.IdAlmacen, C.IdUsuario, Naturaleza, SUM(MONTO) 
from [Movimientos].[IngresosEgresosCabecera] C
WHERE C.ESTADO <> 'A'
GROUP BY cast(C.Fecha as date), C.IdAlmacen, C.IdUsuario, Naturaleza
UNION ALL
SELECT        cast(C.Fecha as date) as 'Fecha', 0, 0, 'Saldo Inicial' Categoria, SUM(C.SaldoInicial) Monto
from Movimientos.AperturaCierreCaja C
GROUP BY cast(C.Fecha as date)
UNION ALL
select cast(C.Fecha as date) as 'Fecha', 0, 0, Naturaleza, SUM(MONTO) 
from [Movimientos].[IngresosEgresosCabecera] C
WHERE C.ESTADO <> 'A'
GROUP BY cast(C.Fecha as date), Naturaleza


GO
/****** Object:  View [Maestros].[v_Articulos_2]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [Maestros].[v_Articulos_2]
AS
Select 0 'IdAlmacen', 0 'Almacen', ar.IdArticulo, Ar.Descripcion, null 'Stock', isnull(ar.[PrecioVenta], ar.PrecioVenta) Precio, ar.Estado
from Maestros.Articulo Ar
GO
/****** Object:  View [Movimientos].[v_Kardex_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [Movimientos].[v_Kardex_1]
as
SELECT       Movimientos.Kardex.IdKardex, Movimientos.Kardex.IdAlmacen, Maestros.Almacen.Nombre AS Almacen, Movimientos.Kardex.IdArticulo AS Codigo, Maestros.Articulo.Descripcion AS Articulo,
			 Movimientos.Kardex.TipoMovimiento, cast(Movimientos.Kardex.Fecha as date) Fecha, 
             Movimientos.Kardex.SaldoInicial, Movimientos.Kardex.SaldoInicial * Movimientos.Kardex.Valor as 'ValorizadoInicial',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'E' THEN Movimientos.Kardex.Cantidad * -1 ELSE Movimientos.Kardex.Cantidad END 'Cantidad',
			 CASE Movimientos.Kardex.TipoMovimiento WHEN 'E' THEN Movimientos.Kardex.Cantidad * Movimientos.Kardex.Valor * -1 ELSE Movimientos.Kardex.Cantidad * Movimientos.Kardex.Valor END 'Valorizado',
			 Movimientos.Kardex.SaldoFinal, Movimientos.Kardex.SaldoFinal * Movimientos.Kardex.Valor as 'ValorizadoFinal',
			 Movimientos.Kardex.Valor, Movimientos.Kardex.Origen
FROM            Movimientos.Kardex INNER JOIN
                         Maestros.Almacen ON Movimientos.Kardex.IdAlmacen = Maestros.Almacen.IdAlmacen INNER JOIN
                         Maestros.Articulo ON Movimientos.Kardex.IdArticulo = Maestros.Articulo.IdArticulo
GO
/****** Object:  View [Movimientos].[v_Kardex_2]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [Movimientos].[v_Kardex_2]
as
select IdAlmacen, Almacen, Codigo, Articulo, SaldoInicial,  ValorizadoInicial, Cantidad, Valorizado, SaldoFinal, ValorizadoFinal
from movimientos.v_Kardex_1 a



GO
/****** Object:  View [FE].[v_Comprobantes]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [FE].[v_Comprobantes]
AS
Select f.IdFE, a.Nombre Tienda, t.Descripcion TipoDoc, right('0000' + v.Serie, 4) + '-' + right('00000000' + cast(v.Numero as varchar), 8) Numero, 
	convert(varchar, v.Fecha, 103) Fecha, v.APagar, f.Hash, isnull(f.EnviadoSUNAT, 0) EnviadoSUNAT, f.FechaEnvio, 
	f.FechaRespuestaSUNAT, f.RespuestaSUNAT, f.TicketSUNAT, cast(f.Xml as xml) XML, f.IdComprobante
from fe.Comprobantes f inner join Movimientos.ComprobanteDeVentaCabecera v
	on f.IdComprobante = v.IdComprobante inner join Maestros.Almacen a
	on v.IdAlmacen = a.IdAlmacen inner join Maestros.TipoDocumentoVenta t
	on v.IdTipoDocumento = t.IdTipoDocumentoVenta
where v.Estado <> 'A' and v.IdTipoDocumento IN (1, 2)
	and year(v.Fecha) >= 2024
	and (RespuestaSUNAT is null or (RespuestaSUNAT NOT like '%aceptado%' and RespuestaSUNAT NOT like '%aceptada%' and RespuestaSUNAT NOT like '%rechazado%' and RespuestaSUNAT NOT like '%existe documento%'))
	union all
Select f.IdFE, a.Nombre Tienda, 'N/C', right('0000' + v.Serie, 4) + '-' + right('00000000' + cast(v.Numero as varchar), 8) Numero, 
	convert(varchar, v.Fecha, 103) Fecha, v.Total, f.Hash, isnull(f.EnviadoSUNAT, 0) EnviadoSUNAT, f.FechaEnvio, 
	f.FechaRespuestaSUNAT, f.RespuestaSUNAT, f.TicketSUNAT, cast(f.Xml as xml) XML, f.IdComprobante
from fe.Comprobantes f inner join Movimientos.NotaDeCreditoCabecera v
	on f.IdComprobante = v.IdNC inner join Maestros.Almacen a
	on v.IdAlmacen = a.IdAlmacen
where v.Estado <> 'A' and f.EsNota = 1
	and year(v.Fecha) >= 2024 and v.IdTipoDocumento IN (7, 9)
	and (RespuestaSUNAT is null or (RespuestaSUNAT NOT like '%aceptado%' and RespuestaSUNAT NOT like '%aceptada%' and RespuestaSUNAT NOT like '%rechazado%' and RespuestaSUNAT NOT like '%existe documento%'))
GO
/****** Object:  Table [Movimientos].[NotaDeCreditoDetalle]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[NotaDeCreditoDetalle](
	[IdNC] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NULL,
	[Descripcion] [varchar](300) NOT NULL,
	[UnidadMedida] [varchar](20) NULL,
	[Cantidad] [int] NULL,
	[Precio] [decimal](18, 2) NULL,
	[PorcentajeDescuento] [decimal](18, 2) NULL,
	[Total] [decimal](18, 2) NOT NULL,
 CONSTRAINT [PK_NotaDeCreditoDetalle] PRIMARY KEY CLUSTERED 
(
	[IdNC] ASC,
	[Item] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [DW].[v_DetallesVentas]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [DW].[v_DetallesVentas]
as
select alm.IdAlmacen, alm.Nombre Almacen, c.Fecha, d.*, a.PrecioCompra, d.Cantidad * a.PrecioCompra Costo, p.RUC, p.Nombre Proveedor
from Movimientos.ComprobanteDeVentaCabecera c inner join Movimientos.ComprobanteDeVentaDetalle d 
	on c.IdComprobante = d.IdComprobante inner join Maestros.Articulo a
	on d.IdArticulo = a.IdArticulo inner join Maestros.Proveedor p
	on a.[IdProveedor] = p.IdProveedor inner join Maestros.Almacen alm
	on c.idAlmacen = alm.idAlmacen
where c.Estado = 'E'
	union all
select alm.IdAlmacen, alm.Nombre Almacen, c.Fecha, c.IdNC, d.Item, a.IdArticulo, a.Descripcion, d.UnidadMedida, d.Cantidad, d.Precio, d.PorcentajeDescuento, 
	d.Total * -1 Total, a.PrecioCompra, d.Cantidad * a.PrecioCompra * -1 Costo, p.RUC, p.Nombre Proveedor
from Movimientos.NotaDeCreditoCabecera c inner join Movimientos.NotaDeCreditoDetalle d
	on c.IdNC = d.IdNC inner join Maestros.Articulo a
	on d.IdArticulo = a.IdArticulo inner join Maestros.Proveedor p
	on a.[IdProveedor] = p.IdProveedor inner join Maestros.Almacen alm
	on c.idAlmacen = alm.idAlmacen
where c.Estado = 'E'
GO
/****** Object:  View [Movimientos].[v_CierreVentaDiaria_1]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [Movimientos].[v_CierreVentaDiaria_1]
as
select DPV.IdTipoPagoVenta, TPV.Descripcion, isnull(DPV.Datos, '') Datos, CV.Serie, CV.Numero, CV.Fecha, CV.Total, CV.Estado, DPV.Soles, DPV.Dolares, CV.Redondeo, DPV.Vuelto, CV.IdCajero, CV.IdAlmacen
from Movimientos.ComprobanteDeVentaCabecera CV
inner join Movimientos.DetallePagoVenta DPV
on CV.IdComprobante = DPV.IdComprobante
inner join Maestros.TipoPagoVenta TPV
on DPV.IdTipoPagoVenta = TPV.IdTipoPagoVenta
GO
/****** Object:  Table [Almacen].[GuiaRemisionDetalle]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Almacen].[GuiaRemisionDetalle](
	[IdGuiaRemision] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[DescripcionArticulo] [varchar](300) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL,
 CONSTRAINT [PK_GuiaRemisionDetalle] PRIMARY KEY CLUSTERED 
(
	[IdGuiaRemision] ASC,
	[Item] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Almacen].[Inventario]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Almacen].[Inventario](
	[InventarioId] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[IdArticulo] [varchar](20) NULL,
	[IdAlmacen] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[InventarioId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Almacen].[TomaInventario]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Almacen].[TomaInventario](
	[IdTomaInventario] [int] IDENTITY(1,1) NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[EstadoToma] [varchar](50) NOT NULL,
	[Estado] [bit] NOT NULL,
	[Intervienen] [varchar](500) NULL,
 CONSTRAINT [PK_TomaInventario] PRIMARY KEY CLUSTERED 
(
	[IdTomaInventario] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Almacen].[TomaInventarioDetalle]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Almacen].[TomaInventarioDetalle](
	[idTomaInventarioDetalle] [int] IDENTITY(1,1) NOT NULL,
	[idTomaInventario] [int] NOT NULL,
	[idArticulo] [char](6) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[Estado] [bit] NOT NULL,
	[Sobrante] [int] NULL,
	[Faltante] [int] NULL,
 CONSTRAINT [PK_TomaInventarioDetalle] PRIMARY KEY CLUSTERED 
(
	[idTomaInventarioDetalle] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Auditoria].[Eventos]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Auditoria].[Eventos](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Glosa] [varchar](5000) NULL,
	[FilasAfectadas] [xml] NULL,
	[CRUD] [char](1) NULL,
 CONSTRAINT [PK_Eventos] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Auditoria].[Log]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Auditoria].[Log](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Modulo] [varchar](150) NULL,
	[Error] [varchar](max) NULL,
	[Usuario] [varchar](20) NULL,
 CONSTRAINT [PK_Log] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Auxiliares].[ComprobanteDeVentaDetalleTemporal]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Auxiliares].[ComprobanteDeVentaDetalleTemporal](
	[IdComprobante] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[Descripcion] [varchar](100) NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[Precio] [decimal](18, 2) NOT NULL,
	[PorcentajeDescuento] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
 CONSTRAINT [PK_ComprobanteDeVentaDetalleTemporal] PRIMARY KEY CLUSTERED 
(
	[IdComprobante] ASC,
	[Item] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[abc]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[abc](
	[IdComprobante] [int] NOT NULL,
	[Item] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[Descripcion] [varchar](100) NOT NULL,
	[UnidadMedida] [varchar](20) NOT NULL,
	[Cantidad] [int] NOT NULL,
	[Precio] [decimal](18, 2) NOT NULL,
	[PorcentajeDescuento] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ArticulosBK]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ArticulosBK](
	[IdArticulo] [char](6) NOT NULL,
	[Descripcion] [varchar](300) NOT NULL,
	[DescripcionCorta] [varchar](100) NOT NULL,
	[Familia] [varchar](100) NOT NULL,
	[Linea] [varchar](100) NOT NULL,
	[Marca] [varchar](100) NOT NULL,
	[Material] [varchar](100) NOT NULL,
	[Modelo] [varchar](100) NOT NULL,
	[Color] [varchar](100) NOT NULL,
	[Detalle] [varchar](100) NOT NULL,
	[Talla] [varchar](100) NOT NULL,
	[IdProveedor] [int] NOT NULL,
	[UnidadAlmacen] [varchar](100) NOT NULL,
	[MonedaCosteo] [varchar](100) NOT NULL,
	[PrecioCompra] [decimal](18, 2) NOT NULL,
	[PrecioVenta] [decimal](18, 2) NOT NULL,
	[FechaRegistro] [date] NOT NULL,
	[Foto] [image] NULL,
	[CodigoBarra] [image] NULL,
	[Estado] [bit] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuxTIPrincipal]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuxTIPrincipal](
	[codigo] [int] NULL,
	[fisico] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AV]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AV](
	[Almacén] [nvarchar](255) NULL,
	[Familia] [nvarchar](255) NULL,
	[Línea] [nvarchar](255) NULL,
	[Código Artículo] [float] NULL,
	[Descripción Artículo] [nvarchar](255) NULL,
	[Stock] [float] NULL,
	[Precio Venta] [float] NULL,
	[PRECIO $] [float] NULL,
	[PRECIO S/] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AV08022022]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AV08022022](
	[Almacén] [nvarchar](255) NULL,
	[Familia] [nvarchar](255) NULL,
	[Línea] [nvarchar](255) NULL,
	[Código Artículo] [float] NULL,
	[Descripción Artículo] [nvarchar](255) NULL,
	[Stock] [float] NULL,
	[Precio Venta] [float] NULL,
	[PRECIO $] [float] NULL,
	[Tipo de Cambio] [float] NULL,
	[PRECIO S/] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[bakfebolsinenvio]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[bakfebolsinenvio](
	[IdComprobante] [int] NOT NULL,
	[Hash] [varchar](500) NOT NULL,
	[FechaEnvio] [datetime] NULL,
	[TicketSUNAT] [varchar](50) NULL,
	[RespuestaSUNAT] [varchar](5000) NULL,
	[FechaRespuestaSUNAT] [datetime] NULL,
	[Xml] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[bakfequenoaparecenensunat]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[bakfequenoaparecenensunat](
	[IdFE] [int] IDENTITY(1,1) NOT NULL,
	[IdComprobante] [int] NOT NULL,
	[Hash] [varchar](500) NOT NULL,
	[QR] [image] NULL,
	[EnviadoSUNAT] [bit] NULL,
	[FechaEnvio] [datetime] NULL,
	[TicketSUNAT] [varchar](50) NULL,
	[RespuestaSUNAT] [varchar](5000) NULL,
	[FechaRespuestaSUNAT] [datetime] NULL,
	[Estado] [bit] NOT NULL,
	[Xml] [varchar](max) NULL,
	[EsNota] [bit] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[bkMovimientosDescuentos]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[bkMovimientosDescuentos](
	[idDescuento] [int] IDENTITY(1,1) NOT NULL,
	[idAlmacen] [int] NOT NULL,
	[idArticulo] [int] NOT NULL,
	[Descuento] [float] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[bkStocks25022020]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[bkStocks25022020](
	[IdAlmacen] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[Stock] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ComprobantesDeclaradosNoSUNAT]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ComprobantesDeclaradosNoSUNAT](
	[Fecha] [datetime] NOT NULL,
	[Numero] [int] NOT NULL,
	[EstadoComprobante] [char](1) NOT NULL,
	[IdFE] [int] NOT NULL,
	[IdComprobante] [int] NOT NULL,
	[Hash] [varchar](500) NOT NULL,
	[QR] [image] NULL,
	[EnviadoSUNAT] [bit] NULL,
	[FechaEnvio] [datetime] NULL,
	[TicketSUNAT] [varchar](50) NULL,
	[RespuestaSUNAT] [varchar](5000) NULL,
	[FechaRespuestaSUNAT] [datetime] NULL,
	[Estado] [bit] NOT NULL,
	[Xml] [varchar](max) NULL,
	[EsNota] [bit] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Descuentosbk25032022]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Descuentosbk25032022](
	[idDescuento] [int] IDENTITY(1,1) NOT NULL,
	[idAlmacen] [int] NOT NULL,
	[idArticulo] [int] NOT NULL,
	[Descuento] [float] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Maestros.Fijos2022]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Maestros.Fijos2022](
	[Mes] [nvarchar](255) NULL,
	[CHICLAYO AFP ] [float] NULL,
	[CHICLAYO SUNAT] [float] NULL,
	[CHICLAYO ALQUILER ] [float] NULL,
	[PIURA AFP ] [float] NULL,
	[PIURA SUNAT] [float] NULL,
	[PIURA ALQUILER ] [float] NULL,
	[SULLANA AFP ] [float] NULL,
	[SULLANA SUNAT] [float] NULL,
	[SULLANA ALQUILER ] [float] NULL,
	[TRUJILLO AFP ] [float] NULL,
	[TRUJILLO SUNAT] [float] NULL,
	[TRUJILLO ALQUILER ] [float] NULL,
	[AGUAS VERDES AFP ] [float] NULL,
	[AGUAS VERDES SUNAT] [float] NULL,
	[AGUAS VERDES ALQUILER ] [float] NULL,
	[IQUITOS AFP ] [float] NULL,
	[IQUITOS SUNAT] [float] NULL,
	[IQUITOS ALQUILER ] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StockICAbk]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StockICAbk](
	[IdAlmacen] [int] NOT NULL,
	[IdArticulo] [char](6) NOT NULL,
	[Stock] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TODOSALMACENES25032022]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TODOSALMACENES25032022](
	[IdAlmacen] [float] NULL,
	[CODIGO] [float] NULL,
	[PRECIOULTIMO] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VentasBak09112020]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VentasBak09112020](
	[IdComprobante] [int] IDENTITY(1,1) NOT NULL,
	[IdTipoDocumento] [int] NOT NULL,
	[Serie] [varchar](4) NOT NULL,
	[Numero] [int] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[IdCliente] [int] NULL,
	[DNIRUC] [varchar](11) NULL,
	[Nombre] [varchar](100) NOT NULL,
	[Direccion] [varchar](100) NULL,
	[TipoCambio] [decimal](18, 3) NOT NULL,
	[SubTotal] [decimal](18, 2) NOT NULL,
	[IGV] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
	[Redondeo] [decimal](18, 2) NULL,
	[APagar] [decimal](18, 2) NULL,
	[IdVendedor] [int] NOT NULL,
	[IdCajero] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Estado] [char](1) NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[IdUsuarioAnula] [int] NULL,
	[FechaHoraUsuarioAnula] [datetime] NULL,
	[GeneroNC] [varchar](13) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VentasBk01012019]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VentasBk01012019](
	[IdComprobante] [int] IDENTITY(1,1) NOT NULL,
	[IdTipoDocumento] [int] NOT NULL,
	[Serie] [varchar](4) NOT NULL,
	[Numero] [int] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[IdCliente] [int] NULL,
	[DNIRUC] [varchar](11) NULL,
	[Nombre] [varchar](100) NOT NULL,
	[Direccion] [varchar](100) NULL,
	[TipoCambio] [decimal](18, 3) NOT NULL,
	[SubTotal] [decimal](18, 2) NOT NULL,
	[IGV] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
	[Redondeo] [decimal](18, 2) NULL,
	[APagar] [decimal](18, 2) NULL,
	[IdVendedor] [int] NOT NULL,
	[IdCajero] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Estado] [char](1) NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[IdUsuarioAnula] [int] NULL,
	[FechaHoraUsuarioAnula] [datetime] NULL,
	[GeneroNC] [varchar](13) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[xyz]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[xyz](
	[IdComprobante] [int] IDENTITY(1,1) NOT NULL,
	[IdTipoDocumento] [int] NOT NULL,
	[Serie] [varchar](4) NOT NULL,
	[Numero] [int] NOT NULL,
	[Fecha] [datetime] NOT NULL,
	[IdCliente] [int] NULL,
	[DNIRUC] [varchar](11) NULL,
	[Nombre] [varchar](100) NOT NULL,
	[Direccion] [varchar](100) NULL,
	[TipoCambio] [decimal](18, 3) NOT NULL,
	[SubTotal] [decimal](18, 2) NOT NULL,
	[IGV] [decimal](18, 2) NOT NULL,
	[Total] [decimal](18, 2) NOT NULL,
	[Redondeo] [decimal](18, 2) NULL,
	[APagar] [decimal](18, 2) NULL,
	[IdVendedor] [int] NOT NULL,
	[IdCajero] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Estado] [char](1) NOT NULL,
	[FechaHoraRegistro] [datetime] NOT NULL,
	[IdUsuarioAnula] [int] NULL,
	[FechaHoraUsuarioAnula] [datetime] NULL,
	[GeneroNC] [varchar](13) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [FE].[Sunat]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [FE].[Sunat](
	[Serie] [varchar](5) NULL,
	[Numero] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[AlmacenCuenta]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[AlmacenCuenta](
	[IdAlmacenCuenta] [int] IDENTITY(1,1) NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Banco] [varchar](30) NOT NULL,
	[Cuenta] [varchar](20) NOT NULL,
	[CCI] [varchar](30) NOT NULL,
 CONSTRAINT [PK_CuentaAlmacen] PRIMARY KEY CLUSTERED 
(
	[IdAlmacenCuenta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[AuxiliarVarios]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[AuxiliarVarios](
	[IdAuxiliar] [int] IDENTITY(1,1) NOT NULL,
	[Auxiliar] [varchar](50) NOT NULL,
	[Descripcion] [varchar](100) NOT NULL,
	[Alias] [varchar](20) NOT NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_AuxiliarVarios] PRIMARY KEY CLUSTERED 
(
	[IdAuxiliar] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[ComplementoArticulo]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[ComplementoArticulo](
	[IdComplemento] [int] IDENTITY(1,1) NOT NULL,
	[Complemento] [char](20) NOT NULL,
	[Descripcion] [varchar](100) NOT NULL,
	[Alias] [varchar](20) NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_ComplementoArticulo] PRIMARY KEY CLUSTERED 
(
	[IdComplemento] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[Configuracion]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[Configuracion](
	[Configuracion] [varchar](30) NOT NULL,
	[Valor] [varchar](250) NOT NULL,
	[Descripcion] [varchar](max) NULL,
 CONSTRAINT [PK_Configuracion] PRIMARY KEY CLUSTERED 
(
	[Configuracion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[Maquinas]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[Maquinas](
	[IdPC] [int] IDENTITY(1,1) NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[MAC] [varchar](100) NOT NULL,
	[Anydesk] [varchar](50) NOT NULL,
 CONSTRAINT [PK_Maquinas] PRIMARY KEY CLUSTERED 
(
	[IdPC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[PlanDeCuentas]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[PlanDeCuentas](
	[Cuenta] [varchar](6) NOT NULL,
	[Descripcion] [varchar](100) NOT NULL,
	[AfectoMovimiento] [bit] NOT NULL,
	[GeneraCuentasAutomaticas] [bit] NOT NULL,
	[RequiereCuentaAuxiliar] [bit] NOT NULL,
	[RegistraDocumentos] [bit] NOT NULL,
	[FiltroCajaEgresos] [bit] NOT NULL,
	[NotaCredito] [bit] NOT NULL,
	[NotaDebito] [bit] NOT NULL,
	[AfectaResultado] [char](1) NOT NULL,
	[TipoCuenta] [char](1) NOT NULL,
	[Estado] [bit] NOT NULL,
 CONSTRAINT [PK_Maestro.PlanDeCuentas] PRIMARY KEY CLUSTERED 
(
	[Cuenta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Maestros].[TipoDeCambio]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Maestros].[TipoDeCambio](
	[Fecha] [date] NOT NULL,
	[Compra] [decimal](18, 3) NOT NULL,
	[Venta] [decimal](18, 3) NOT NULL,
 CONSTRAINT [PK_TipoDeCambio] PRIMARY KEY CLUSTERED 
(
	[Fecha] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Movimientos].[Descuentosbk09022022]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[Descuentosbk09022022](
	[idDescuento] [int] IDENTITY(1,1) NOT NULL,
	[idAlmacen] [int] NOT NULL,
	[idArticulo] [int] NOT NULL,
	[Descuento] [float] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [Movimientos].[ResumenCierreDeCaja]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Movimientos].[ResumenCierreDeCaja](
	[IdResumen] [int] IDENTITY(1,1) NOT NULL,
	[IdUsuario] [int] NOT NULL,
	[IdAlmacen] [int] NOT NULL,
	[Fecha] [date] NOT NULL,
	[IdGrupo] [int] NOT NULL,
	[Grupo] [varchar](50) NOT NULL,
	[Detalle] [varchar](max) NOT NULL,
	[Monto] [decimal](18, 2) NOT NULL,
	[FechaRegistro] [datetime] NULL,
 CONSTRAINT [PK_ResumenCierreDeCaja] PRIMARY KEY CLUSTERED 
(
	[IdResumen] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE [Almacen].[Inventario] ADD  DEFAULT (getdate()) FOR [Fecha]
GO
ALTER TABLE [FE].[Comprobantes] ADD  CONSTRAINT [DF_Comprobantes_Estado]  DEFAULT ((1)) FOR [Estado]
GO
ALTER TABLE [FE].[Comprobantes] ADD  CONSTRAINT [DF_Comprobantes_EsNota]  DEFAULT ((0)) FOR [EsNota]
GO
ALTER TABLE [Maestros].[Almacen] ADD  CONSTRAINT [DF_Almacen_AfectoIGV]  DEFAULT ((1)) FOR [AfectoIGV]
GO
ALTER TABLE [Maestros].[Maquinas] ADD  CONSTRAINT [DF_Maquinas_IdUsuario]  DEFAULT ((1)) FOR [IdUsuario]
GO
ALTER TABLE [Maestros].[Usuario] ADD  CONSTRAINT [DF_Usuario_Estado]  DEFAULT ((1)) FOR [Estado]
GO
ALTER TABLE [Movimientos].[AperturaCierreCaja] ADD  CONSTRAINT [DF_AperturaCierreCaja_VentaDia]  DEFAULT ((0)) FOR [VentaDia]
GO
ALTER TABLE [Movimientos].[AperturaCierreCaja] ADD  CONSTRAINT [DF_AperturaCierreCaja_Ingresos]  DEFAULT ((0)) FOR [Ingresos]
GO
ALTER TABLE [Movimientos].[AperturaCierreCaja] ADD  CONSTRAINT [DF_AperturaCierreCaja_Egresos]  DEFAULT ((0)) FOR [Egresos]
GO
ALTER TABLE [Movimientos].[AperturaCierreCaja] ADD  CONSTRAINT [DF_AperturaCierreCaja_SaldoFinal]  DEFAULT ((0)) FOR [SaldoFinal]
GO
ALTER TABLE [Movimientos].[DetallePagoVenta] ADD  CONSTRAINT [DF_DetallePagoVenta_Vuelto]  DEFAULT ((0)) FOR [Vuelto]
GO
ALTER TABLE [Movimientos].[Kardex] ADD  CONSTRAINT [DF_Kardex_NoKardexGeneral]  DEFAULT ((0)) FOR [NoKardexGeneral]
GO
ALTER TABLE [Movimientos].[NotaDeCreditoCabecera] ADD  CONSTRAINT [DF_NotaDeCreditoCabecera_Empleada]  DEFAULT ((0)) FOR [Empleada]
GO
ALTER TABLE [Movimientos].[OrdenDeCompraCabecera] ADD  CONSTRAINT [DF_OrdenDeCompraCabecera_EstadoValida]  DEFAULT ((0)) FOR [EstadoEmision]
GO
ALTER TABLE [Movimientos].[OrdenDeCompraCabecera] ADD  CONSTRAINT [DF_OrdenDeCompraCabecera_EstadoAtencion]  DEFAULT ('P') FOR [EstadoAtencion]
GO
ALTER TABLE [Almacen].[GuiaRemisionCabecera]  WITH CHECK ADD  CONSTRAINT [FK_GuiaRemisionCabecera_MovimientosCabecera] FOREIGN KEY([IdMovimiento])
REFERENCES [Almacen].[MovimientosCabecera] ([IdMovimiento])
GO
ALTER TABLE [Almacen].[GuiaRemisionCabecera] CHECK CONSTRAINT [FK_GuiaRemisionCabecera_MovimientosCabecera]
GO
ALTER TABLE [Almacen].[GuiaRemisionDetalle]  WITH CHECK ADD  CONSTRAINT [FK_GuiaRemisionDetalle_GuiaRemisionCabecera] FOREIGN KEY([IdGuiaRemision])
REFERENCES [Almacen].[GuiaRemisionCabecera] ([IdGuiaRemision])
GO
ALTER TABLE [Almacen].[GuiaRemisionDetalle] CHECK CONSTRAINT [FK_GuiaRemisionDetalle_GuiaRemisionCabecera]
GO
ALTER TABLE [Almacen].[MovimientosCabecera]  WITH CHECK ADD  CONSTRAINT [FK_MovimientosCabecera_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Almacen].[MovimientosCabecera] CHECK CONSTRAINT [FK_MovimientosCabecera_Almacen]
GO
ALTER TABLE [Almacen].[MovimientosCabecera]  WITH CHECK ADD  CONSTRAINT [FK_MovimientosCabecera_OrdenDeCompraCabecera] FOREIGN KEY([IdOc])
REFERENCES [Movimientos].[OrdenDeCompraCabecera] ([IdOc])
GO
ALTER TABLE [Almacen].[MovimientosCabecera] CHECK CONSTRAINT [FK_MovimientosCabecera_OrdenDeCompraCabecera]
GO
ALTER TABLE [Almacen].[MovimientosDetalle]  WITH CHECK ADD  CONSTRAINT [FK_MovimientosDetalle_Articulo] FOREIGN KEY([IdArticulo])
REFERENCES [Maestros].[Articulo] ([IdArticulo])
GO
ALTER TABLE [Almacen].[MovimientosDetalle] CHECK CONSTRAINT [FK_MovimientosDetalle_Articulo]
GO
ALTER TABLE [Almacen].[MovimientosDetalle]  WITH CHECK ADD  CONSTRAINT [FK_MovimientosDetalle_MovimientosCabecera] FOREIGN KEY([IdMovimiento])
REFERENCES [Almacen].[MovimientosCabecera] ([IdMovimiento])
GO
ALTER TABLE [Almacen].[MovimientosDetalle] CHECK CONSTRAINT [FK_MovimientosDetalle_MovimientosCabecera]
GO
ALTER TABLE [Almacen].[TomaInventario]  WITH CHECK ADD  CONSTRAINT [FK_TomaInventario_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Almacen].[TomaInventario] CHECK CONSTRAINT [FK_TomaInventario_Almacen]
GO
ALTER TABLE [Almacen].[TomaInventarioDetalle]  WITH CHECK ADD  CONSTRAINT [FK_TomaInventarioDetalle_Articulo] FOREIGN KEY([idArticulo])
REFERENCES [Maestros].[Articulo] ([IdArticulo])
GO
ALTER TABLE [Almacen].[TomaInventarioDetalle] CHECK CONSTRAINT [FK_TomaInventarioDetalle_Articulo]
GO
ALTER TABLE [Almacen].[TomaInventarioDetalle]  WITH CHECK ADD  CONSTRAINT [FK_TomaInventarioDetalle_TomaInventario] FOREIGN KEY([idTomaInventario])
REFERENCES [Almacen].[TomaInventario] ([IdTomaInventario])
GO
ALTER TABLE [Almacen].[TomaInventarioDetalle] CHECK CONSTRAINT [FK_TomaInventarioDetalle_TomaInventario]
GO
ALTER TABLE [Maestros].[AlmacenCuenta]  WITH CHECK ADD  CONSTRAINT [FK_CuentaAlmacen_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Maestros].[AlmacenCuenta] CHECK CONSTRAINT [FK_CuentaAlmacen_Almacen]
GO
ALTER TABLE [Maestros].[Articulo]  WITH CHECK ADD  CONSTRAINT [FK_Articulo_Proveedor] FOREIGN KEY([IdProveedor])
REFERENCES [Maestros].[Proveedor] ([IdProveedor])
GO
ALTER TABLE [Maestros].[Articulo] CHECK CONSTRAINT [FK_Articulo_Proveedor]
GO
ALTER TABLE [Maestros].[Personal]  WITH CHECK ADD  CONSTRAINT [FK_Personal_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Maestros].[Personal] CHECK CONSTRAINT [FK_Personal_Almacen]
GO
ALTER TABLE [Maestros].[SerieCorrelativo]  WITH CHECK ADD  CONSTRAINT [FK_SerieCorrelativo_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Maestros].[SerieCorrelativo] CHECK CONSTRAINT [FK_SerieCorrelativo_Almacen]
GO
ALTER TABLE [Maestros].[SerieCorrelativo]  WITH CHECK ADD  CONSTRAINT [FK_SerieCorrelativo_TipoDocumentoVenta] FOREIGN KEY([IdTipoDocumentoVenta])
REFERENCES [Maestros].[TipoDocumentoVenta] ([IdTipoDocumentoVenta])
GO
ALTER TABLE [Maestros].[SerieCorrelativo] CHECK CONSTRAINT [FK_SerieCorrelativo_TipoDocumentoVenta]
GO
ALTER TABLE [Maestros].[Usuario]  WITH CHECK ADD  CONSTRAINT [FK_Usuario_Personal] FOREIGN KEY([IdPersonal])
REFERENCES [Maestros].[Personal] ([IdPersonal])
GO
ALTER TABLE [Maestros].[Usuario] CHECK CONSTRAINT [FK_Usuario_Personal]
GO
ALTER TABLE [Movimientos].[AperturaCierreCaja]  WITH CHECK ADD  CONSTRAINT [FK_AperturaCierreCaja_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Movimientos].[AperturaCierreCaja] CHECK CONSTRAINT [FK_AperturaCierreCaja_Almacen]
GO
ALTER TABLE [Movimientos].[AperturaCierreCaja]  WITH CHECK ADD  CONSTRAINT [FK_AperturaCierreCaja_Usuario] FOREIGN KEY([IdUsuario])
REFERENCES [Maestros].[Usuario] ([IdUsuario])
GO
ALTER TABLE [Movimientos].[AperturaCierreCaja] CHECK CONSTRAINT [FK_AperturaCierreCaja_Usuario]
GO
ALTER TABLE [Movimientos].[ComprobanteDeVentaCabecera]  WITH CHECK ADD  CONSTRAINT [FK_ComprobanteDeVentaCabecera_Cliente] FOREIGN KEY([IdCliente])
REFERENCES [Maestros].[Cliente] ([IdCliente])
GO
ALTER TABLE [Movimientos].[ComprobanteDeVentaCabecera] CHECK CONSTRAINT [FK_ComprobanteDeVentaCabecera_Cliente]
GO
ALTER TABLE [Movimientos].[ComprobanteDeVentaCabecera]  WITH CHECK ADD  CONSTRAINT [FK_ComprobanteDeVentaCabecera_TipoDocumentoVenta] FOREIGN KEY([IdTipoDocumento])
REFERENCES [Maestros].[TipoDocumentoVenta] ([IdTipoDocumentoVenta])
GO
ALTER TABLE [Movimientos].[ComprobanteDeVentaCabecera] CHECK CONSTRAINT [FK_ComprobanteDeVentaCabecera_TipoDocumentoVenta]
GO
ALTER TABLE [Movimientos].[ComprobanteDeVentaDetalle]  WITH CHECK ADD  CONSTRAINT [FK_ComprobanteDeVentaDetalle_Articulo] FOREIGN KEY([IdArticulo])
REFERENCES [Maestros].[Articulo] ([IdArticulo])
GO
ALTER TABLE [Movimientos].[ComprobanteDeVentaDetalle] CHECK CONSTRAINT [FK_ComprobanteDeVentaDetalle_Articulo]
GO
ALTER TABLE [Movimientos].[ComprobanteDeVentaDetalle]  WITH CHECK ADD  CONSTRAINT [FK_ComprobanteDeVentaDetalle_ComprobanteDeVentaCabecera] FOREIGN KEY([IdComprobante])
REFERENCES [Movimientos].[ComprobanteDeVentaCabecera] ([IdComprobante])
ON DELETE CASCADE
GO
ALTER TABLE [Movimientos].[ComprobanteDeVentaDetalle] CHECK CONSTRAINT [FK_ComprobanteDeVentaDetalle_ComprobanteDeVentaCabecera]
GO
ALTER TABLE [Movimientos].[DetallePagoVenta]  WITH CHECK ADD  CONSTRAINT [FK_DetallePagoVenta_ComprobanteDeVentaCabecera] FOREIGN KEY([IdComprobante])
REFERENCES [Movimientos].[ComprobanteDeVentaCabecera] ([IdComprobante])
ON DELETE CASCADE
GO
ALTER TABLE [Movimientos].[DetallePagoVenta] CHECK CONSTRAINT [FK_DetallePagoVenta_ComprobanteDeVentaCabecera]
GO
ALTER TABLE [Movimientos].[DetallePagoVenta]  WITH CHECK ADD  CONSTRAINT [FK_DetallePagoVenta_TipoPagoVenta] FOREIGN KEY([IdTipoPagoVenta])
REFERENCES [Maestros].[TipoPagoVenta] ([IdTipoPagoVenta])
GO
ALTER TABLE [Movimientos].[DetallePagoVenta] CHECK CONSTRAINT [FK_DetallePagoVenta_TipoPagoVenta]
GO
ALTER TABLE [Movimientos].[IngresosEgresosCabecera]  WITH CHECK ADD  CONSTRAINT [FK_IngresosEgresos_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Movimientos].[IngresosEgresosCabecera] CHECK CONSTRAINT [FK_IngresosEgresos_Almacen]
GO
ALTER TABLE [Movimientos].[IngresosEgresosCabecera]  WITH CHECK ADD  CONSTRAINT [FK_IngresosEgresos_Usuario] FOREIGN KEY([IdUsuario])
REFERENCES [Maestros].[Usuario] ([IdUsuario])
GO
ALTER TABLE [Movimientos].[IngresosEgresosCabecera] CHECK CONSTRAINT [FK_IngresosEgresos_Usuario]
GO
ALTER TABLE [Movimientos].[IngresosEgresosDetalle]  WITH CHECK ADD  CONSTRAINT [FK_DetalleIngresosEgresos_IngresosEgresos] FOREIGN KEY([IdIngresoEgreso])
REFERENCES [Movimientos].[IngresosEgresosCabecera] ([IdIngresoEgreso])
ON DELETE CASCADE
GO
ALTER TABLE [Movimientos].[IngresosEgresosDetalle] CHECK CONSTRAINT [FK_DetalleIngresosEgresos_IngresosEgresos]
GO
ALTER TABLE [Movimientos].[Kardex]  WITH CHECK ADD  CONSTRAINT [FK_Kardex_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Movimientos].[Kardex] CHECK CONSTRAINT [FK_Kardex_Almacen]
GO
ALTER TABLE [Movimientos].[Kardex]  WITH CHECK ADD  CONSTRAINT [FK_Kardex_Articulo] FOREIGN KEY([IdArticulo])
REFERENCES [Maestros].[Articulo] ([IdArticulo])
GO
ALTER TABLE [Movimientos].[Kardex] CHECK CONSTRAINT [FK_Kardex_Articulo]
GO
ALTER TABLE [Movimientos].[NotaDeCreditoCabecera]  WITH CHECK ADD  CONSTRAINT [FK_NotaDeCreditoCabecera_Cliente] FOREIGN KEY([IdCliente])
REFERENCES [Maestros].[Cliente] ([IdCliente])
GO
ALTER TABLE [Movimientos].[NotaDeCreditoCabecera] CHECK CONSTRAINT [FK_NotaDeCreditoCabecera_Cliente]
GO
ALTER TABLE [Movimientos].[NotaDeCreditoCabecera]  WITH CHECK ADD  CONSTRAINT [FK_NotaDeCreditoCabecera_TipoDocumentoVenta] FOREIGN KEY([IdTipoDocumento])
REFERENCES [Maestros].[TipoDocumentoVenta] ([IdTipoDocumentoVenta])
GO
ALTER TABLE [Movimientos].[NotaDeCreditoCabecera] CHECK CONSTRAINT [FK_NotaDeCreditoCabecera_TipoDocumentoVenta]
GO
ALTER TABLE [Movimientos].[NotaDeCreditoDetalle]  WITH CHECK ADD  CONSTRAINT [FK_NotaDeCreditoDetalle_NotaDeCreditoCabecera] FOREIGN KEY([IdNC])
REFERENCES [Movimientos].[NotaDeCreditoCabecera] ([IdNC])
GO
ALTER TABLE [Movimientos].[NotaDeCreditoDetalle] CHECK CONSTRAINT [FK_NotaDeCreditoDetalle_NotaDeCreditoCabecera]
GO
ALTER TABLE [Movimientos].[OrdenDeCompraCabecera]  WITH CHECK ADD  CONSTRAINT [FK_OrdenDeCompraCabecera_Usuario] FOREIGN KEY([IdUsuarioRegistra])
REFERENCES [Maestros].[Usuario] ([IdUsuario])
GO
ALTER TABLE [Movimientos].[OrdenDeCompraCabecera] CHECK CONSTRAINT [FK_OrdenDeCompraCabecera_Usuario]
GO
ALTER TABLE [Movimientos].[OrdenDeCompraDetalle]  WITH CHECK ADD  CONSTRAINT [FK_OrdenDeCompraDetalle_Articulo] FOREIGN KEY([IdArticulo])
REFERENCES [Maestros].[Articulo] ([IdArticulo])
GO
ALTER TABLE [Movimientos].[OrdenDeCompraDetalle] CHECK CONSTRAINT [FK_OrdenDeCompraDetalle_Articulo]
GO
ALTER TABLE [Movimientos].[OrdenDeCompraDetalle]  WITH CHECK ADD  CONSTRAINT [FK_OrdenDeCompraDetalle_OrdenDeCompraCabecera] FOREIGN KEY([IdOc])
REFERENCES [Movimientos].[OrdenDeCompraCabecera] ([IdOc])
GO
ALTER TABLE [Movimientos].[OrdenDeCompraDetalle] CHECK CONSTRAINT [FK_OrdenDeCompraDetalle_OrdenDeCompraCabecera]
GO
ALTER TABLE [Movimientos].[ResumenCierreDeCaja]  WITH CHECK ADD  CONSTRAINT [FK_ResumenCierreDeCaja_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Movimientos].[ResumenCierreDeCaja] CHECK CONSTRAINT [FK_ResumenCierreDeCaja_Almacen]
GO
ALTER TABLE [Movimientos].[ResumenCierreDeCaja]  WITH CHECK ADD  CONSTRAINT [FK_ResumenCierreDeCaja_Usuario] FOREIGN KEY([IdUsuario])
REFERENCES [Maestros].[Usuario] ([IdUsuario])
GO
ALTER TABLE [Movimientos].[ResumenCierreDeCaja] CHECK CONSTRAINT [FK_ResumenCierreDeCaja_Usuario]
GO
ALTER TABLE [Movimientos].[StockAlmacen]  WITH CHECK ADD  CONSTRAINT [FK_Stock_Almacen] FOREIGN KEY([IdAlmacen])
REFERENCES [Maestros].[Almacen] ([IdAlmacen])
GO
ALTER TABLE [Movimientos].[StockAlmacen] CHECK CONSTRAINT [FK_Stock_Almacen]
GO
ALTER TABLE [Movimientos].[StockAlmacen]  WITH CHECK ADD  CONSTRAINT [FK_Stock_Articulo] FOREIGN KEY([IdArticulo])
REFERENCES [Maestros].[Articulo] ([IdArticulo])
GO
ALTER TABLE [Movimientos].[StockAlmacen] CHECK CONSTRAINT [FK_Stock_Articulo]
GO
/****** Object:  StoredProcedure [Almacen].[usp_get_TomaInventario]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [Almacen].[usp_get_TomaInventario]
	@año		int = null,
	@idAlmacen	int = null
as

if @año is null and @idAlmacen is null
	Select t.IdTomaInventario, a.IdAlmacen, a.Nombre Tienda, t.Fecha, t.EstadoToma, t.Estado, t.Intervienen
	from Almacen.TomaInventario t inner join Maestros.Almacen a
		on  t.IdAlmacen = a.IdAlmacen
else
	if @año is null and @idAlmacen is not null
		Select t.IdTomaInventario, a.IdAlmacen, a.Nombre Tienda, t.Fecha, t.EstadoToma, t.Estado, t.Intervienen
		from Almacen.TomaInventario t inner join Maestros.Almacen a
			on  t.IdAlmacen = a.IdAlmacen
		where a.IdAlmacen = @idAlmacen
	else
		if @idAlmacen is null
			Select t.IdTomaInventario, a.IdAlmacen, a.Nombre Tienda, t.Fecha, t.EstadoToma, t.Estado, t.Intervienen
			from Almacen.TomaInventario t inner join Maestros.Almacen a
				on  t.IdAlmacen = a.IdAlmacen
			where (year(t.Fecha) = @año or year(t.Fecha) = @año - 1)
		else
			Select t.IdTomaInventario, a.IdAlmacen, a.Nombre Tienda, t.Fecha, t.EstadoToma, t.Estado, t.Intervienen
			from Almacen.TomaInventario t inner join Maestros.Almacen a
				on  t.IdAlmacen = a.IdAlmacen
			where a.IdAlmacen = @idAlmacen and (year(t.Fecha) = @año or year(t.Fecha) = @año - 1)
GO
/****** Object:  StoredProcedure [Almacen].[usp_InsUpd_GuiaRemision]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [Almacen].[usp_InsUpd_GuiaRemision]
	@tblCabecera Almacen.GuiaRemisionCabeceraType readonly, 
	@tblDetalle Almacen.GuiaRemisionDetalleType readonly

AS
	BEGIN
		SET NOCOUNT ON;

		--DECLARACIONES
		
		DECLARE @IdGR INT --IdGuiaRemision generado para el detalle
		DECLARE @IdMov INT --IdMovimiento origen de la GR
		DECLARE @IdTipoDoc INT -- IdTipo Documento para actualizar correlativo
		DECLARE @Serie varchar(4) --Serie del documento
		DECLARE @IdAlm INT --IdAlmacen
			

		--TABLAS AUXILIARES
		
		DECLARE @TablaIdGRv table (IdGR int); --IdGR insertado
				

		--LLENA VARIABLES
		
		select @IdMov = C.IdMovimiento, @IdAlm = IdAlmacen, @serie = Serie, @IdTipoDoc = IdTipoDocumento from @tblCabecera C;


		--INSERTA CABECERA
		
		MERGE INTO Almacen.GuiaRemisionCabecera T1
		USING @tblCabecera T2
		ON T1.IdGuiaRemision=T2.IdGuiaRemision
		WHEN NOT MATCHED THEN
			INSERT(IdMovimiento,
					Serie,
					Numero,
					Fecha,
					DireccionOrigen,
					DPDOrigen,
					TipoDestinatario,
					RazonSocialNombre,
					RUCDNICE,
					DireccionDestino,
					DPDDestino,
					Observaciones,
					IdUsuario,
					Estado,
					IdAlmacen,
					IdProveedor,
					IdTipoDocumento,
					IdAlmacenDestino)
			VALUES(T2.IdMovimiento,
					T2.Serie,
					T2.Numero,
					getdate(),
					T2.DireccionOrigen,
					T2.DPDOrigen,
					T2.TipoDestinatario,
					T2.RazonSocialNombre,
					T2.RUCDNICE,
					T2.DireccionDestino,
					T2.DPDDestino,
					T2.Observaciones,
					T2.IdUsuario,
					T2.Estado,
					T2.IdAlmacen,
					T2.IdProveedor,
					T2.IdTipoDocumento,
					T2.IdAlmacenDestino)
			output inserted.IdGuiaRemision INTO @TablaIdGRv;
			

		--LLENA IdGuiaRemision
		
		SELECT @IdGR = IdGR from @TablaIdGRv;

		
		--INSERTA DETALLE
		
		MERGE INTO Almacen.GuiaRemisionDetalle T1
		USING @tblDetalle T2
		ON T1.IdGuiaRemision = 0 and T1.Item=T2.Item
		WHEN NOT MATCHED THEN
			INSERT(IdGuiaRemision,
					Item,
					IdArticulo,
					DescripcionArticulo,
					Cantidad,
					UnidadMedida)
			VALUES(@IdGR,
					T2.Item,
					T2.IdArticulo,
					T2.DescripcionArticulo,
					T2.Cantidad,
					T2.UnidadMedida);
		
		
		--ACTUALIZA IdGuiaRemision en [Almacen].[MovimientosCabecera]
		
		update Almacen.MovimientosCabecera
		set IdGuiaRemision = @IdGR
		where IdMovimiento = @IdMov;


	   --ACTUALIZA CORRELATIVO
	   update [Maestros].[SerieCorrelativo]
	   set Correlativo = Correlativo + 1
	   where IdAlmacen = @IdAlm
	   and IdTipoDocumentoVenta = @IdTipoDoc
	   and Serie = @Serie;


	END      
GO
/****** Object:  StoredProcedure [Almacen].[usp_InsUpd_MovimientoAlmacen]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [Almacen].[usp_InsUpd_MovimientoAlmacen]
	@tblCabecera Almacen.MovimientosCabeceraType readonly,
	@tblDetalle Almacen.MovimientosDetalleType readonly

AS
	BEGIN
		SET NOCOUNT ON;

		--DECLARACIONES
		
		DECLARE @IdMov INT --IdMovimiento generado para el detalle
		DECLARE @IdMovT INT --IdMovimiento generado para el detalle tranferencia
		DECLARE @IdTipoMov char(1) -- Tipo de movimiento
		DECLARE @IdAlm INT --IdAlmacen
		DECLARE @IdAlmT INT --IdAlmacen tranferencia
		DECLARE @FechaMov date --Fecha del movimiento
		DECLARE @FechaHoraRegistro datetime --Fecha y hora de registro
		DECLARE @IdTipoMovKardex char(1) -- Tipo de movimiento para el kardex
		DECLARE @IdOc INT --Id de la Orden de Compra
		DECLARE @Motivo varchar(60) -- Motivo
		DECLARE @MotivoT varchar(60) -- Motivo Transferencia
		

		--TABLAS AUXILIARES
		
		DECLARE @TablaIdMov table (IdMov int); --Id movimiento insertado
		DECLARE @TablaIdMovT table (IdMovT int); --Id movimiento insertado Transferencia
		DECLARE @TablaKardex table (Id int, Item int, IdAlm int, IdArt char(6), TipMov char(1), Fecha datetime, Cantidad int, Valor decimal(18,2), Orig varchar(100)); --Tabla auxiliar para actualizar Kardex
		DECLARE @TablaKardexT table (Id int, Item int, IdAlm int, IdArt char(6), TipMov char(1), Fecha datetime, Cantidad int, Valor decimal(18,2), Orig varchar(100)); --Tabla auxiliar para actualizar Kardex Tranferencia
		DECLARE @TablaStocks table (Item int, IdAlm int, Inicial int, Final int); --Tabla auxiliar para obtener saldo inicial y final para el KARDEX
		DECLARE @TablaStocksT table (Item int, IdAlm int, Inicial int, Final int); --Tabla auxiliar para obtener saldo inicial y final para el KARDEX Transferencia
		

		--LLENA VARIABLES
		
		select @IdTipoMov = C.Tipo, @Motivo = C.Motivo, @IdAlm = C.IdAlmacen, @IdAlmT = C.IdAlmacenDestinoOrigen, @FechaMov = C.Fecha, @FechaHoraRegistro = C.FechaHoraRegistro, @IdOc = IdOc from @tblCabecera C;

		IF @IdTipoMov IN ('T','E')
			begin
				SET @IdTipoMovKardex = 'E';

				IF @IdTipoMov = 'T'
					begin
						select @motivo = lower(@motivo) + ' a ' + Nombre
						from Maestros.Almacen
						where IdAlmacen = @IdAlmT
					end
				else
					begin
						set @motivo = lower(@motivo)
					end
			end
		ELSE
			begin
				SET @IdTipoMovKardex = 'I';
				set @motivo = lower(@motivo)
			end
		

		--INSERTA CABECERA
		
		MERGE INTO Almacen.MovimientosCabecera T1
		USING @tblCabecera T2
		ON T1.IdMovimiento=T2.IdMovimiento
		WHEN NOT MATCHED THEN
			INSERT(IdAlmacen,
					Tipo,
					Motivo,
					Fecha,
					Descripcion,
					IdProveedor,
					IdAlmacenDestinoOrigen,
					IdOC,
					IdUsuario,
					FechaHoraRegistro,
					Estado)
			VALUES(T2.IdAlmacen,
					T2.Tipo,
					T2.Motivo,
					T2.Fecha,
					T2.Descripcion,
					T2.IdProveedor,
					T2.IdAlmacenDestinoOrigen,
					T2.IdOc,
					T2.IdUsuario,
					T2.FechaHoraRegistro,
					T2.Estado)
			output inserted.IdMovimiento INTO @TablaIdMov;
			

		--LLENA IdMovimiento
		
		SELECT @IdMov = IdMov from @TablaIdMov;
		
		
		--INSERTA DETALLE
		
		MERGE INTO Almacen.MovimientosDetalle T1
		USING @tblDetalle T2
		ON T1.IdMovimiento=T2.IdMovimiento and T1.Item=T2.Item
		WHEN NOT MATCHED THEN
			INSERT(IdMovimiento,
					Item,
					IdArticulo,
					DescripcionArticulo,
					Cantidad,
					Valor)
			VALUES(@IdMov,
					T2.Item,
					T2.IdArticulo,
					T2.DescripcionArticulo,
					T2.Cantidad,
					T2.Valor)
			output 0, T2.Item, @IdAlm, inserted.IdArticulo, @IdTipoMovKardex, @FechaHoraRegistro, inserted.Cantidad, inserted.Valor, 'Movimiento Almacen: ' + @Motivo + ' (' + @IdTipoMov + '-' + CONVERT(varchar(10),@IdMov) + ')' INTO @TablaKardex;
		
		
		--ACTUALIZA STOCKS
		
		IF @IdTipoMovKardex = 'I'
			BEGIN
				MERGE INTO Movimientos.StockAlmacen T1
				USING @TablaKardex T2
				ON T1.IdAlmacen = T2.IdAlm and T1.IdArticulo = T2.IdArt
				WHEN MATCHED THEN
					UPDATE SET T1.Stock = T1.Stock + T2.Cantidad
				WHEN NOT MATCHED THEN
					INSERT(IdAlmacen,
							IdArticulo,
							Stock)
					VALUES(T2.IdAlm,
							T2.IdArt,
							T2.Cantidad)
					output T2.Item, t2.IdAlm, isnull(deleted.Stock, 0), inserted.Stock INTO @TablaStocks;
			END
		ELSE
			BEGIN
				MERGE INTO Movimientos.StockAlmacen T1
				USING @TablaKardex T2
				ON T1.IdAlmacen = T2.IdAlm and T1.IdArticulo = T2.IdArt
				WHEN MATCHED THEN
					UPDATE SET T1.Stock = T1.Stock - T2.Cantidad
				WHEN NOT MATCHED THEN
					INSERT(IdAlmacen,
							IdArticulo,
							Stock)
					VALUES(T2.IdAlm,
							T2.IdArt,
							T2.Cantidad)
					output T2.Item, t2.IdAlm, isnull(deleted.Stock, 0), inserted.Stock INTO @TablaStocks;
			END
			
		
		--PREPARA DATOS FINALES PARA KARDEX
		
		select K.Id, K.IdAlm, K.IdArt, K.TipMov, K.Fecha, S.Inicial, K.Cantidad, S.Final, K.Valor, K.Orig
		INTO #TempKardex
		from @TablaKardex K
		inner join @TablaStocks S
		on K.Item = S.Item
		
		
		--REGISTRA MOVIMIENTO EN KARDEX
		
		MERGE INTO Movimientos.Kardex T1
		USING #TempKardex T2
		ON T1.IdKardex = T2.Id
		WHEN NOT MATCHED THEN
			INSERT(IdAlmacen,
					IdArticulo,
					TipoMovimiento,
					Fecha,
					SaldoInicial,
					Cantidad,
					SaldoFinal,
					Valor,
					Origen)
			VALUES(T2.IdAlm,
					T2.IdArt,
					T2.TipMov,
					T2.Fecha,
					T2.Inicial,
					T2.Cantidad,
					T2.Final,
					T2.Valor,
					T2.Orig);
			
		DROP TABLE #TempKardex;


		--ACTUALIZA ESTADO DE ORDEN DE COMPRA
		DECLARE @CANTIDAD INT

		if @IdOc <> 0
			begin
				SELECT @CANTIDAD = count(*)
				FROM [Almacen].[v_DetalleOCParaIngreso_1]
				WHERE IdMovimiento = @IdOc
				and Cantidad > 0;

				IF @CANTIDAD > 0
					BEGIN
						update [Movimientos].[OrdenDeCompraCabecera]
						set EstadoAtencion = 'PA'
						where IdOc = @IdOc;
					END
				ELSE
					BEGIN
						update [Movimientos].[OrdenDeCompraCabecera]
						set EstadoAtencion = 'TO',
							FechaAtencionTotal = @FechaHoraRegistro
						where IdOc = @IdOc;
					END
			end
	
	
		--REALIZA INGRESO EN EL ALMACEN DE DESTINO CUANDO ES TRANSFERENCIA
		
		IF @IdTipoMov = 'T'
		BEGIN
		
			--INSERTA CABECERA EN ALMACEN DESTINO
			
			MERGE INTO Almacen.MovimientosCabecera T1
			USING @tblCabecera T2
			ON T1.IdMovimiento=T2.IdMovimiento
			WHEN NOT MATCHED THEN
				INSERT(IdAlmacen,
						Tipo,
						Motivo,
						Descripcion,
						IdProveedor,
						IdAlmacenDestinoOrigen,
						IdOc,
						IdUsuario,
						FechaHoraRegistro,
						Estado)
				VALUES(@IdAlmT,
						'T',
						'TRANSFERENCIA INGRESO',
						T2.Descripcion,
						T2.IdProveedor,
						@IdAlm,
						T2.IdOc,
						T2.IdUsuario,
						T2.FechaHoraRegistro,
						T2.Estado)
				output inserted.IdMovimiento INTO @TablaIdMovT;
				
			
			--LLENA IdMovimiento
			
			SELECT @IdMovT = IdMovT from @TablaIdMovT;
			

			--PREPARA VARIABLE MOTIVO TRANFERENCIA

			select @motivo = 'transferencia ingreso de ' + Nombre
			from Maestros.Almacen
			where IdAlmacen = @IdAlm
			
			--INSERTA DETALLE
			
			MERGE INTO Almacen.MovimientosDetalle T1
			USING @tblDetalle T2
			ON T1.IdMovimiento=T2.IdMovimiento and T1.Item=T2.Item
			WHEN NOT MATCHED THEN
				INSERT(IdMovimiento,
						Item,
						IdArticulo,
						DescripcionArticulo,
						Cantidad,
						Valor)
				VALUES(@IdMovT,
						T2.Item,
						T2.IdArticulo,
						T2.DescripcionArticulo,
						T2.Cantidad,
						T2.Valor)
				output 0, T2.Item, @IdAlmT, inserted.IdArticulo, 'I', @FechaHoraRegistro, inserted.Cantidad, inserted.Valor, 'Movimiento Almacen: ' + @Motivo + ' (' + @IdTipoMov + '-' + CONVERT(varchar(10),@IdMovT) + ')' INTO @TablaKardexT;
							
				
			----ACTUALIZA STOCK
			--MERGE INTO Movimientos.StockAlmacen T1
			--USING @TablaKardexT T2
			--ON T1.IdAlmacen = T2.IdAlm and T1.IdArticulo = T2.IdArt
			--WHEN MATCHED THEN
			--	UPDATE SET T1.Stock = T1.Stock + T2.Cantidad
			--WHEN NOT MATCHED THEN
			--	INSERT(IdAlmacen,
			--			IdArticulo,
			--			Stock)
			--	VALUES(T2.IdAlm,
			--			T2.IdArt,
			--			T2.Cantidad)
			--	output T2.Item, t2.IdAlm, isnull(deleted.Stock, 0), inserted.Stock INTO @TablaStocksT;
				
				
			----PREPARA DATOS FINALES PARA KARDEX
			
			--select K.Id, K.IdAlm, K.IdArt, K.TipMov, K.Fecha, S.Inicial, K.Cantidad, S.Final, K.Valor, K.Orig
			--INTO #TempKardexT
			--from @TablaKardexT K
			--inner join @TablaStocksT S
			--on K.Item = S.Item
			

			----REGISTRA MOVIMIENTO EN KARDEX
			
			--MERGE INTO Movimientos.Kardex T1
			--USING #TempKardexT T2
			--ON T1.IdKardex = T2.Id
			--WHEN NOT MATCHED THEN
			--	INSERT(IdAlmacen,
			--			IdArticulo,
			--			TipoMovimiento,
			--			Fecha,
			--			SaldoInicial,
			--			Cantidad,
			--			SaldoFinal,
			--			Valor,
			--			Origen)
			--	VALUES(T2.IdAlm,
			--			T2.IdArt,
			--			T2.TipMov,
			--			T2.Fecha,
			--			T2.Inicial,
			--			T2.Cantidad,
			--			T2.Final,
			--			T2.Valor,
			--			T2.Orig);
			
			--DROP TABLE #TempKardexT;
		END
	END      
GO
/****** Object:  StoredProcedure [dbo].[sp_Recover_Dropped_Objects]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Recover_Dropped_Objects] 
    @Database_Name NVARCHAR(MAX), 
    @Date_From CHAR(10), 
    @Date_To CHAR(10) 
AS 

DECLARE @Compatibility_Level INT 

SELECT @Compatibility_Level=dtb.compatibility_level 
FROM master.sys.databases AS dtb WHERE dtb.name=@Database_Name 

IF ISNULL(@Compatibility_Level,0)<=80 
BEGIN 
    RAISERROR('The compatibility level should be equal to or greater SQL SERVER 2005 (90)',16,1) 
    RETURN 
END 

Select [Database Name],Convert(varchar(Max),Substring([RowLog Contents 0],33,LEN([RowLog Contents 0]))) as [Script] 
from fn_dblog(NULL,NULL) 
Where [Operation]='LOP_DELETE_ROWS' And [Context]='LCX_MARK_AS_GHOST' 
And [AllocUnitName]='sys.sysobjvalues.clst' 
AND [TRANSACTION ID] IN (SELECT DISTINCT [TRANSACTION ID] FROM sys.fn_dblog(NULL, NULL) 
WHERE Context IN ('LCX_NULL') AND Operation in ('LOP_BEGIN_XACT') 
And [Transaction Name]='DROPOBJ' 
And CONVERT(NVARCHAR(11),[Begin Time]) BETWEEN @Date_From AND @Date_To) 
And Substring([RowLog Contents 0],33,LEN([RowLog Contents 0]))<>0 
GO
/****** Object:  StoredProcedure [dbo].[usp_get_Configuration]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROC [dbo].[usp_get_Configuration]

@IdConfig		varchar(100)

AS

OPEN SYMMETRIC KEY SYS_Key_01  
   DECRYPTION BY CERTIFICATE Usuarios001;  

SELECT CONVERT(varchar,  
    DecryptByKey(Valor, 1 ,   
    HashBytes('SHA1', CONVERT(varbinary, @IdConfig))))  
    AS 'Pass Desencriptado' FROM Maestros.Configuracion WHERE Configuracion = @IdConfig;  
GO
/****** Object:  StoredProcedure [dbo].[usp_get_descargarInventario]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[usp_get_descargarInventario]

	@id	int

as

set language 'Spanish'

declare @fecha	datetime

select @fecha = max(Fecha) from Almacen.Inventario where IdAlmacen = @id

select c.Nombre Almacen, b.IdArticulo CodigoArticulo, b.Descripcion NombreArticulo, b.PrecioVenta Precio, count(*) Cantidad
from Almacen.Inventario a inner join Maestros.Articulo b on a.IdArticulo = b.IdArticulo
		inner join Maestros.Almacen c on a.IdAlmacen = c.IdAlmacen
where a.IdAlmacen = @id and Fecha = @fecha
group by c.Nombre, b.IdArticulo, b.Descripcion, b.PrecioVenta
GO
/****** Object:  StoredProcedure [dbo].[usp_get_listAlmacen]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create proc [dbo].[usp_get_listAlmacen]

as

select IdAlmacen Id, Nombre
from Maestros.Almacen
where estado = 1
GO
/****** Object:  StoredProcedure [dbo].[usp_get_password]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_get_password]

@usuario	varchar(50)

AS

OPEN SYMMETRIC KEY SYS_Key_01  
   DECRYPTION BY CERTIFICATE Usuarios001;  
   
   declare @Id int
   Select @Id = IdUsuario from Maestros.Usuario where Nombre = @usuario

SELECT CONVERT(varchar,  
    DecryptByKey(Clave, 1 ,   
    HashBytes('SHA2_256', CONVERT(varbinary, IdUsuario))))  
    AS 'Pass Desencriptado' FROM Maestros.Usuario WHERE IdUsuario = @Id;  
GO
/****** Object:  StoredProcedure [dbo].[usp_get_VentasdeHoy]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[usp_get_VentasdeHoy]

as

Select CASE b.IdAlmacen WHEN 63 THEN 'JB'
						WHEN 66 THEN 'CA' 
						WHEN 56 THEN 'CM' 
						WHEN 61 THEN 'CP'
						WHEN 64 THEN 'SC'
						WHEN 65 THEN 'EP'
						WHEN 67 THEN 'RP'
						WHEN 62 THEN 'JU'
						END Tienda, Sum(a.APagar) Venta
from Movimientos.ComprobanteDeVentaCabecera a inner join Maestros.Almacen b
	on a.IdAlmacen = b.IdAlmacen
where convert(varchar, a.Fecha, 103) = convert(varchar, getdate(), 103)
group by b.IdAlmacen
	union all
Select 'VENTA TOTAL' Tienda, Sum(a.APagar) Venta
from Movimientos.ComprobanteDeVentaCabecera a inner join Maestros.Almacen b
	on a.IdAlmacen = b.IdAlmacen
where convert(varchar, a.Fecha, 103) = convert(varchar, getdate(), 103)
Order by Sum(a.APagar)
GO
/****** Object:  StoredProcedure [dbo].[usp_GetArticulobyCodigo]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create proc [dbo].[usp_GetArticulobyCodigo]

@codigo	varchar(20)

as

select IdArticulo CodigoArticulo, Descripcion DescripcionArticulo from Maestros.Articulo where IdArticulo = @codigo
GO
/****** Object:  StoredProcedure [dbo].[usp_ins_inventario]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[usp_ins_inventario]
	@codigo	varchar(20),
	@fecha	datetime,
	@idAlmacen	int
as

set language 'Spanish'

insert into Almacen.Inventario(Fecha, IdArticulo, IdAlmacen) values(@fecha, @codigo, @idAlmacen)
GO
/****** Object:  StoredProcedure [dbo].[usp_ins_Log]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[usp_ins_Log]
	@Modulo		varchar(150),
	@Error		varchar(max),
	@Usuario	varchar(20)
as
	insert into Auditoria.Log(Fecha, Modulo, Error, Usuario)
	values(getdate(), @Modulo, @Error, @Usuario)
GO
/****** Object:  StoredProcedure [dbo].[usp_set_Configuration]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_set_Configuration]

@valor			varchar(max),
@IdConfig		varchar(100)

AS

OPEN SYMMETRIC KEY SYS_Key_01  
   DECRYPTION BY CERTIFICATE Usuarios001;  

UPDATE [Maestros].[Configuracion] 
SET Valor = EncryptByKey(Key_GUID('SYS_Key_01')  
    , @valor, 1, HashBytes('SHA2_256', CONVERT( varbinary  
    , Configuracion)))
WHERE Configuracion = @IdConfig;
GO
/****** Object:  StoredProcedure [dbo].[usp_set_password]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_set_password]

@password		varchar(50),
@IdUsuario		int

AS

OPEN SYMMETRIC KEY SYS_Key_01  
   DECRYPTION BY CERTIFICATE Usuarios001;  

UPDATE [Maestros].[Usuario] 
SET Clave = EncryptByKey(Key_GUID('SYS_Key_01')  
    , @password, 1, HashBytes('SHA2_256', CONVERT( varbinary  
    , IdUsuario)))
WHERE IdUsuario = @IdUsuario;
GO
/****** Object:  StoredProcedure [dbo].[usp_upd_DesliquidarCaja]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[usp_upd_DesliquidarCaja]

@Almacen		int,
@Usuario		int,
@Fecha			date

AS

declare @FilasAfectadas		xml

/*Eliminación de las filas del Resumen de Cierre mayores a la fecha indicada*/
SET @FilasAfectadas =
(
	Select *
	from [Movimientos].[ResumenCierreDeCaja]
	where IdUsuario = @Usuario and IdAlmacen = @Almacen and Fecha > @Fecha
	FOR XML AUTO, ELEMENTS
)

delete
from [Movimientos].[ResumenCierreDeCaja]
where IdUsuario = @Usuario and IdAlmacen = @Almacen and Fecha > @Fecha

insert into [Auditoria].[Eventos]
Select getdate() Fecha, 'Desliquidación de Caja desde el ' + convert(varchar, @Fecha, 103) Glosa, @FilasAfectadas Datos, 'D' CRUD
/******************************************************************************/

/*Eliminación de las filas del Resumen de Cierre en la fecha indicada menos el SI y el Monto Fijo*/
SET @FilasAfectadas =
(
	Select *
	from [Movimientos].[ResumenCierreDeCaja]
	where IdUsuario = @Usuario and IdAlmacen = @Almacen and Fecha = @Fecha and IdGrupo not in(1, 10)
	FOR XML AUTO, ELEMENTS
)

Delete
from [Movimientos].[ResumenCierreDeCaja]
where IdUsuario = @Usuario and IdAlmacen = @Almacen and Fecha = @Fecha and IdGrupo not in(1, 10)

insert into [Auditoria].[Eventos]
Select getdate() Fecha, 'Desliquidación de Caja desde el ' + convert(varchar, @Fecha, 103) Glosa, @FilasAfectadas Datos, 'D' CRUD
/******************************************************************************/

/*Eliminación de las filas de la Apertura / Cierre mayores a la fecha indicada*/
SET @FilasAfectadas =
(
	Select *
	from [Movimientos].[AperturaCierreCaja]
	where IdUsuario = @Usuario and IdAlmacen = @Almacen and Fecha > @Fecha
	FOR XML AUTO, ELEMENTS
)

Delete
from [Movimientos].[AperturaCierreCaja]
where IdUsuario = @Usuario and IdAlmacen = @Almacen and Fecha > @Fecha

insert into [Auditoria].[Eventos]
Select getdate() Fecha, 'Desliquidación de Caja desde el ' + convert(varchar, @Fecha, 103) Glosa, @FilasAfectadas Datos, 'D' CRUD
/******************************************************************************/

/*Eliminación de las filas de la Apertura / Cierre mayores a la fecha indicada*/
SET @FilasAfectadas =
(
	Select *
	from [Movimientos].[AperturaCierreCaja]
	where IdUsuario = @Usuario and IdAlmacen = @Almacen and Fecha = @Fecha
	FOR XML AUTO, ELEMENTS
)

update [Movimientos].[AperturaCierreCaja] set VentaDia = 0, Ingresos = 0, Egresos = 0, SaldoFinal = 0, Estado = 'A'
where IdUsuario = @Usuario and IdAlmacen = @Almacen and Fecha = @Fecha

insert into [Auditoria].[Eventos]
Select getdate() Fecha, 'Desliquidación de Caja desde el ' + convert(varchar, @Fecha, 103) Glosa, @FilasAfectadas Datos, 'U' CRUD

/******************************************************************************/
GO
/****** Object:  StoredProcedure [FE].[usp_get_DiasPendientesEnvio]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--fe.usp_get_DiasPendientesEnvio 2, 57, 2019

CREATE proc [FE].[usp_get_DiasPendientesEnvio]
	@tipodoc		int,
	@alm			int,
	@año			int
as

set language Spanish

if	@tipodoc != 3
	Select distinct a.Nombre Tienda, cast(convert(varchar, Fecha, 103) as datetime) Fecha
	from Movimientos.ComprobanteDeVentaCabecera c inner join fe.Comprobantes f
		on c.IdComprobante = f.IdComprobante inner join Maestros.Almacen a
		on c.IdAlmacen = a.IdAlmacen
	where c.Estado = 'E' and c.IdTipoDocumento = @tipodoc and year(c.Fecha) = @año and a.IdAlmacen = @alm
		and (f.RespuestaSUNAT is null 
		or (f.RespuestaSUNAT not like 'Codigo Valida: 0%' and RespuestaSUNAT 
							not like 'Mensaje: 0%' and RespuestaSUNAT 
							not like '%aceptado%' and RespuestaSUNAT 
							not like '%aceptada%' and RespuestaSUNAT 
							not like '%anteriormente%' and RespuestaSUNAT 
							<> ''))
	order by a.Nombre, cast(convert(varchar, Fecha, 103) as datetime)
else
	Select distinct a.Nombre Tienda, cast(convert(varchar, Fecha, 103) as datetime) Fecha
	from Movimientos.ComprobanteDeVentaCabecera c inner join fe.Comprobantes f
		on c.IdComprobante = f.IdComprobante inner join Maestros.Almacen a
		on c.IdAlmacen = a.IdAlmacen
	where c.Estado = 'E' and c.IdTipoDocumento in(select IdTipoDocumentoVenta from Maestros.TipoDocumentoVenta where Manual = 1) 
		and year(c.Fecha) = @año and a.IdAlmacen = @alm
		and (f.RespuestaSUNAT is null 
		or (f.RespuestaSUNAT not like 'Codigo Valida: 0%' and RespuestaSUNAT 
							not like 'Mensaje: 0%' and RespuestaSUNAT 
							not like '%aceptado%' and RespuestaSUNAT 
							not like '%aceptada%' and RespuestaSUNAT 
							not like '%anteriormente%' and RespuestaSUNAT 
							<> ''))
	order by a.Nombre, cast(convert(varchar, Fecha, 103) as datetime)

	
GO
/****** Object:  StoredProcedure [Maestros].[usp_get_DestinoFacturacion]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [Maestros].[usp_get_DestinoFacturacion]
as
declare @Destino varchar(30)
declare @Ruta varchar(MAX)

select @Destino = Valor
from Maestros.Configuracion
where Configuracion = 'DestinoFacturacion';

if @Destino = 0
	begin
		select @Ruta = Valor
		from Maestros.Configuracion
		where Configuracion = 'SunatWSPrueba';
	end
else
	begin
		select @Ruta = Valor
		from Maestros.Configuracion
		where Configuracion = 'SunatWSProduccion';
	end

select @Ruta;
GO
/****** Object:  StoredProcedure [Maestros].[usp_get_FechaHoraServidor]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [Maestros].[usp_get_FechaHoraServidor]

AS

Select getdate() as FechaHoraServidor; 
GO
/****** Object:  StoredProcedure [Maestros].[usp_InsUpd_AlmacenCuenta]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [Maestros].[usp_InsUpd_AlmacenCuenta]
		@tblLista Maestros.AlmacenCuentaType readonly,
		@Id int
AS
BEGIN

	  SET NOCOUNT ON;

	  DELETE FROM Maestros.AlmacenCuenta
	  WHERE IdAlmacen = @Id;
 
      MERGE INTO Maestros.AlmacenCuenta T1
      USING @tblLista T2
      ON T1.IdAlmacenCuenta=T2.IdAlmacenCuenta
      WHEN NOT MATCHED THEN
      INSERT(IdAlmacen,
			 Banco, 
			 Cuenta,
			 CCI)
	  VALUES(@Id, 
			 T2.Banco,
			 T2.Cuenta,
			 T2.CCI);

	  
END


GO
/****** Object:  StoredProcedure [Maestros].[usp_InsUpd_SeriesCajero]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [Maestros].[usp_InsUpd_SeriesCajero]
		@tbl Maestros.AsignacionSerieCajeroType readonly,
		@IdUsuario	int,
		@IdAlmacen	int
		
AS
BEGIN

	  SET NOCOUNT ON;

	  --BORRA EXISTENTES
	  DELETE FROM Maestros.AsignacionSerieCajero
	  WHERE IdUsuario = @IdUsuario
	  AND IdAlmacen = @IdAlmacen; 


	  --INSERTA CABECERA VENTA
	  MERGE INTO Maestros.AsignacionSerieCajero T1
      USING @tbl T2
      ON T1.IdAsignacion = T2.IdAsignacion
      WHEN NOT MATCHED THEN
      INSERT(IdUsuario,
			 IdAlmacen, 
			 IdSerieCorrelativo)
	  VALUES(T2.IdUsuario,
			 T2.IdAlmacen, 
			 T2.IdSerieCorrelativo);

END


GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_Detalles]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [Movimientos].[usp_get_Detalles]
	@Filtro varchar(50),
	@Id int,
	@IdUsuario int,
	@IdAlmacen int,
	@Fecha date
as
	if @Filtro = 'DetalleIngresoEgreso'
		begin
			SELECT Forma, Detalle, Monto, Banco, Cuenta, Imagen
			FROM Movimientos.IngresosEgresosDetalle
			WHERE IdIngresoEgreso = @Id
		end

	if @Filtro = 'DetalleOtrosIngresos'
		begin
			SELECT /*c.Glosa, C.Monto as 'Monto Total',*/ D.Forma, D.Detalle, D.Monto as 'Monto Detalle', D.Banco, D.Cuenta, D.Imagen
			FROM Movimientos.IngresosEgresosCabecera C
			INNER JOIN Movimientos.IngresosEgresosDetalle D
			ON C.IdIngresoEgreso = D.IdIngresoEgreso
			WHERE Naturaleza = 'I'
			AND C.IdUsuario = @IdUsuario
			AND C.IdAlmacen = @IdAlmacen
			and C.Fecha = @Fecha
			and c.Estado = 'E'
		end

	if @Filtro = 'DetalleGastosDelDia'
		begin
			SELECT /*c.Glosa, C.Monto as 'Monto Total',*/ D.Forma, D.Detalle, D.Monto as 'Monto Detalle', D.Banco, D.Cuenta, D.Imagen
			FROM Movimientos.IngresosEgresosCabecera C
			INNER JOIN Movimientos.IngresosEgresosDetalle D
			ON C.IdIngresoEgreso = D.IdIngresoEgreso
			WHERE Naturaleza = 'E'
			AND C.IdUsuario = @IdUsuario
			AND C.IdAlmacen = @IdAlmacen
			and C.Fecha = @Fecha
			AND Tipo NOT IN ('TRANSFERENCIA','PAGO PROVEEDORES')
			and c.Estado = 'E'
		end

	if @Filtro = 'DetalleTransferencias'
		begin
			SELECT /*c.Glosa, C.Monto as 'Monto Total',*/ D.Forma, D.Detalle, D.Monto as 'Monto Detalle', D.Banco, D.Cuenta, D.Imagen
			FROM Movimientos.IngresosEgresosCabecera C
			INNER JOIN Movimientos.IngresosEgresosDetalle D
			ON C.IdIngresoEgreso = D.IdIngresoEgreso
			WHERE Naturaleza = 'E'
			AND C.IdUsuario = @IdUsuario
			AND C.IdAlmacen = @IdAlmacen
			and C.Fecha = @Fecha
			AND Tipo in ('TRANSFERENCIA')
			and c.Estado = 'E'
		end

	if @Filtro = 'DetallePagoProveedores'
		begin
			SELECT /*c.Glosa, C.Monto as 'Monto Total',*/ D.Forma, D.Detalle, D.Monto as 'Monto Detalle', D.Banco, D.Cuenta, D.Imagen
			FROM Movimientos.IngresosEgresosCabecera C
			INNER JOIN Movimientos.IngresosEgresosDetalle D
			ON C.IdIngresoEgreso = D.IdIngresoEgreso
			WHERE Naturaleza = 'E'
			AND C.IdUsuario = @IdUsuario
			AND C.IdAlmacen = @IdAlmacen
			and C.Fecha = @Fecha
			and Tipo in ('PAGO PROVEEDORES')
			and c.Estado = 'E'
		end

	if @Filtro = 'DetalleAlmacenIngresoEgreso'
		begin
			if (select Cargo from Maestros.Personal a inner join Maestros.Usuario b on a.IdPersonal = b.IdPersonal where b.IdUsuario = @IdUsuario) = 'ADMINISTRADOR'
				SELECT Item, IdArticulo as 'Código', DescripcionArticulo as 'Artículo', Cantidad, Valor, (select PrecioVenta from Maestros.Articulo where IdArticulo = x.IdArticulo) Venta
				  FROM [Almacen].[MovimientosDetalle] x
				 WHERE IdMovimiento = @Id
			else
				SELECT Item, IdArticulo as 'Código', DescripcionArticulo as 'Artículo', Cantidad, Valor--, (select PrecioVenta from Maestros.Articulo where IdArticulo = x.IdArticulo) Venta
				  FROM [Almacen].[MovimientosDetalle] x
				 WHERE IdMovimiento = @Id
		end

	if @Filtro = 'DetalleOC'
		begin
			SELECT Item ,[IdArticulo] as 'Código', [DescripcionArticulo] as 'Artículo', [Cantidad], [CostoUnitario] as 'Costo Unitario', [Total]
			  FROM [Movimientos].[OrdenDeCompraDetalle]
			 WHERE [IdOc] = @Id
		end

	if @Filtro = 'DetalleGuiaRemision'
		begin
			SELECT [Item]
				  ,[IdArticulo] as 'Código'
				  ,[DescripcionArticulo] as 'Artículo'
				  ,[Cantidad]
				  ,[UnidadMedida] as 'Unidades'
			  FROM [Almacen].[GuiaRemisionDetalle]
			  WHERE [IdGuiaRemision] = @Id
		end

	if @Filtro = 'DetalleVenta'
		begin
			SELECT /*[IdComprobante]
				  ,*/[Item]
				  ,[IdArticulo] as 'Código'
				  ,[Descripcion] as 'Artículo'
				  ,[UnidadMedida] as 'Unidad de Medida'
				  ,[Cantidad]
				  ,[Precio]
				  ,[Total]
			  FROM [Movimientos].[ComprobanteDeVentaDetalle]
			  WHERE [IdComprobante] = @Id
		end

	if @Filtro = 'DetalleNC'
		begin
			SELECT /*[IdNC]
				  ,*/[Item]
				  ,[IdArticulo] as 'Código'
				  ,[Descripcion] as 'Artículo'
				  ,[UnidadMedida] as 'Unidad de Medida'
				  ,[Cantidad]
				  ,[Precio]
				  ,[Total]
			  FROM [Movimientos].[NotaDeCreditoDetalle]
			  WHERE [IdNC] = @Id
		end
GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_DetallesVenta]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--[Movimientos].[usp_get_DetallesVenta] '01/10/2019','31/10/2019',0

CREATE Proc [Movimientos].[usp_get_DetallesVenta]

@fi		datetime,
@ff		datetime,
@tienda	int --0 para ver todas las tiendas

AS

if @tienda = 0
	SELECT Almacen, Fecha, IdArticulo, Descripcion, Cantidad, Precio, Total, PrecioCompra, Costo, Proveedor
	FROM	DW.v_DetallesVentas where Fecha between @fi and @ff
else
	SELECT Almacen, Fecha, IdArticulo, Descripcion, Cantidad, Precio, Total, PrecioCompra, Costo, Proveedor
	FROM	[DW].[v_DetallesVentas] where Fecha between @fi and @ff and IdAlmacen = @tienda
GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_KardexGeneral]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [Movimientos].[usp_get_KardexGeneral]
	@FechaInicial date,
	@FechaFinal date
as
select null as 'IdKardex', a.IdAlmacen, a.Almacen, a.Familia, a.Linea, a.Codigo, a.Articulo, a.PrecioCompra, a.PrecioVenta, null as 'Fecha', null as 'Operacion', b.SaldoInicial,  b.ValorizadoInicial,
		SUM(a.Entrada) 'Entrada', sum(a.ValorizadoEntrada) 'ValorizadoEntrada', SUM(a.Salida) 'Salida', sum(a.ValorizadoSalida) 'ValorizadoSalida', b.SaldoFinal, b.ValorizadoFinal,
		b.SaldoFinal * a.PrecioCompra 'ValorizadoFinalPC', b.SaldoFinal * a.PrecioVenta 'ValorizadoVentaPC'
from
(	SELECT * FROM MOVIMIENTOS.v_KardexGeneral
) a inner join
(	Select b.IdAlmacen, b.IdArticulo, b.SaldoInicial, b.ValorizadoInicial, k.SaldoFinal, K.SaldoFinal * K.Valor as 'ValorizadoFinal'
	from
	(    Select a.*, k.SaldoInicial, K.SaldoInicial * K.Valor as 'ValorizadoInicial'
		 from
		 (
			Select IdAlmacen, IdArticulo, min(IdKardex) Mi, max(IdKardex) Ma
			from Movimientos.Kardex
			where cast(Fecha as date) between @FechaInicial and @FechaFinal
			and NoKardexGeneral = 0 
			Group by IdAlmacen, IdArticulo
		 ) a inner join
			Movimientos.Kardex k on a.IdAlmacen = k.IdAlmacen and a.IdArticulo = k.IdArticulo and a.Mi = k.IdKardex
	) b inner join
		Movimientos.Kardex k on b.IdAlmacen = k.IdAlmacen and b.IdArticulo = k.IdArticulo and b.Ma = k.IdKardex
) b on a.IdAlmacen = b.IdAlmacen and a.Codigo = b.IdArticulo
where cast(a.Fecha as date) between @FechaInicial and @FechaFinal
group by a.IdAlmacen, a.Almacen, a.Familia, a.Linea, a.Codigo, a.Articulo, a.PrecioCompra, a.PrecioVenta, b.SaldoInicial, b.ValorizadoInicial, b.SaldoFinal, b.ValorizadoFinal
GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_KardexGeneralFinal]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [Movimientos].[usp_get_KardexGeneralFinal]
	@IdAlmacen int,
	@PorCodigoDescripcion int,
	@Texto varchar(300),
	@FechaInicial date,
	@FechaFinal date
as
begin
	declare @tabla [Movimientos].[KardexGeneralType];

	insert into @tabla
	execute [Movimientos].[usp_get_KardexGeneral] @FechaInicial , @FechaFinal;

	if @IdAlmacen = -1 
		
		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where codigo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where Articulo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

	else

		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and codigo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and Articulo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

end
	


	

GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_KardexGeneralGrilla]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [Movimientos].[usp_get_KardexGeneralGrilla]
	@IdAlmacen int,
	@PorCodigoDescripcion int,
	@Texto varchar(300),
	@FechaInicial date,
	@FechaFinal date
as
begin
	declare @tabla [Movimientos].[KardexGeneralType];

	insert into @tabla
	execute [Movimientos].[usp_get_KardexGeneral] @FechaInicial , @FechaFinal;

	if @IdAlmacen = -1 
		
		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where codigo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where Articulo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

	else

		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and codigo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and Articulo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

end
	


	

GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_KardexGeneralGrilla_10]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [Movimientos].[usp_get_KardexGeneralGrilla_10]
	@IdAlmacen int,
	@PorCodigoDescripcion int,
	@Texto varchar(300),
	@FechaInicial date,
	@FechaFinal date
as
begin
	declare @tabla [Movimientos].[KardexGeneralType];

	insert into @tabla
	execute [Movimientos].[usp_get_KardexGeneral] @FechaInicial , @FechaFinal;

	if @IdAlmacen = -1 
		
		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where codigo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where Articulo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

	else

		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and codigo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and Articulo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

end
	


	

GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_KardexGeneralGrilla_3]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [Movimientos].[usp_get_KardexGeneralGrilla_3]
	@IdAlmacen int,
	@PorCodigoDescripcion int,
	@Texto varchar(300),
	@FechaInicial date,
	@FechaFinal date
as
begin
	declare @tabla [Movimientos].[KardexGeneralType];

	insert into @tabla
	execute [Movimientos].[usp_get_KardexGeneral] @FechaInicial , @FechaFinal;

	if @IdAlmacen = -1 
		
		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where codigo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where Articulo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

	else

		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and codigo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and Articulo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

end
	


	

GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_KardexGeneralGrilla_5]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [Movimientos].[usp_get_KardexGeneralGrilla_5]
	@IdAlmacen int,
	@PorCodigoDescripcion int,
	@Texto varchar(300),
	@FechaInicial date,
	@FechaFinal date
as
begin
	declare @tabla [Movimientos].[KardexGeneralType];

	insert into @tabla
	execute [Movimientos].[usp_get_KardexGeneral] @FechaInicial , @FechaFinal;

	if @IdAlmacen = -1 
		
		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where codigo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla order by IdAlmacen, Codigo;

			else

				select * from @tabla where Articulo like '%' + @Texto + '%'  order by IdAlmacen, Codigo;

	else

		if @PorCodigoDescripcion = 1 

			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and codigo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

		else
		
			if @Texto = ''

				select * from @tabla where IdAlmacen = @IdAlmacen order by IdAlmacen, Codigo;

			else

				select * from @tabla where IdAlmacen = @IdAlmacen and Articulo like '%' + @Texto + '%' order by IdAlmacen, Codigo;

end
	


	

GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_LibroVentas]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Movimientos.usp_get_LibroVentas '01/01/2023', '31/12/2023', 0

CREATE Proc [Movimientos].[usp_get_LibroVentas]

@fi		datetime,
@ff		datetime,
@tienda	int --0 para ver todas las tiendas

AS
set language 'spanish'
declare @reporte	table(TipoDoc	varchar(50), Almacen	varchar(50), Comprobante	varchar(50), Fecha	varchar(50), DNIRUC	varchar(50), Cliente	varchar(500), SubTotal	float, IGV	float, Total	float, Estado	char(1))

if @tienda = 0
	begin
		insert into @reporte
		select t.Descripcion TipoDoc, a.Nombre Almacen, Serie + '-' + right('0000000' + cast(Numero as varchar), 8) Comprobante, Convert(varchar, Fecha, 103) Fecha, DNIRUC, v.Nombre Cliente, SubTotal, IGV, APagar Total, v.Estado
		from Movimientos.ComprobanteDeVentaCabecera v inner join Maestros.Personal p
			on v.IdVendedor = p.IdPersonal inner join maestros.Almacen a
			on v.IdAlmacen = a.IdAlmacen inner join Maestros.TipoDocumentoVenta t
			on v.IdTipoDocumento = t.IdTipoDocumentoVenta
		where v.Fecha between @fi and @ff and v.Estado = 'E'
			union all
		select t.Descripcion TipoDoc, a.Nombre Almacen, Serie + '-' + right('0000000' + cast(Numero as varchar), 8) Comprobante, Convert(varchar, Fecha, 103) Fecha, DNIRUC, v.Nombre Cliente, SubTotal * -1 SubTotal, IGV * -1 IGV, Total * -1 Total, v.Estado
		from Movimientos.NotaDeCreditoCabecera v inner join maestros.Almacen a
			on v.IdAlmacen = a.IdAlmacen inner join Maestros.TipoDocumentoVenta t
			on v.IdTipoDocumento = t.IdTipoDocumentoVenta
		where v.Fecha between @fi and @ff and v.Estado = 'E'
		Order by 1, 2, 3
	end
else	
	begin
		insert into @reporte
		select t.Descripcion TipoDoc, a.Nombre Almacen, Serie + '-' + right('0000000' + cast(Numero as varchar), 8) Comprobante, Convert(varchar, Fecha, 103) Fecha, DNIRUC, v.Nombre Cliente, SubTotal, IGV, APagar Total, v.Estado
		from Movimientos.ComprobanteDeVentaCabecera v inner join Maestros.Personal p
			on v.IdVendedor = p.IdPersonal inner join maestros.Almacen a
			on v.IdAlmacen = a.IdAlmacen inner join Maestros.TipoDocumentoVenta t
			on v.IdTipoDocumento = t.IdTipoDocumentoVenta
		where v.Fecha between @fi and @ff and a.IdAlmacen = @tienda and v.Estado = 'E'
					union all
		select t.Descripcion TipoDoc, a.Nombre Almacen, Serie + '-' + right('0000000' + cast(Numero as varchar), 8) Comprobante, Convert(varchar, Fecha, 103) Fecha, DNIRUC, v.Nombre Cliente, SubTotal * -1 SubTotal, IGV * -1 IGV, Total * -1 Total, v.Estado
		from Movimientos.NotaDeCreditoCabecera v inner join maestros.Almacen a
			on v.IdAlmacen = a.IdAlmacen inner join Maestros.TipoDocumentoVenta t
			on v.IdTipoDocumento = t.IdTipoDocumentoVenta
		where v.Fecha between @fi and @ff and a.IdAlmacen = @tienda and v.Estado = 'E'
		Order by 1, 2, 3
	end
	   


update a set Almacen = b.AlmacenFinal
from @reporte a inner join (
							select cast(rank() over(order by sum(total)) as varchar) + ' ' + Almacen AlmacenFinal, Almacen, sum(total) Total
							from @reporte
							group by Almacen
							) b
	on a.Almacen = b.Almacen

select * from @reporte
GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_LibroVentasContable]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--Movimientos.usp_get_LibroVentasContable 6, 0, '20515409051'

--20515409051
--20602187412
--20522231488

CREATE proc [Movimientos].[usp_get_LibroVentasContable]
	@periodo	int,
	@tienda		int,
	@ruc		varchar(11)
as
	set language 'Spanish';

	if @ruc = ''
		begin
			Select MIN([Nro. Asto]) [Nro. Asto], Fecha, [Fec.Venc o Pago], [Cód Doc], [Ser.Doc. o Maq.Reg.], 
				RIGHT('00000000' + cast(MIN([Número Doc.]) as varchar), 8) + ' al ' + RIGHT('00000000' + cast(MAX([Número Doc.]) as varchar), 8) [Número Doc.], 
				'' [TD Cl], '' [Nro.Doc. Cliente], 'VENTA DEL DIA' [Apellidos y Nombres/Razón Social],
				SUM([Valor Exportación]) [Valor Exportación], SUM([B. Imponible]) [B. Imponible], SUM([B. Exonerada]) [B. Exonerada], SUM([B. Inafecta]) [B. Inafecta], 
				SUM([I.S.C.]) [I.S.C.],	SUM([I.G.V. / I.P.M]) [I.G.V. / I.P.M],  0 [I.C.B.], SUM([Otros Tributos y Cargos]) [Otros Tributos y Cargos], SUM(Total) Total, 
				MAX([T.Camb]) [T.Camb], '' [Fecha Doc.Ref.], '' [Cod Doc Ref], '' [Serie Doc. Ref], '' [Número Doc.Ref]
			from
			(
				Select c.IdComprobante [Nro. Asto], convert(varchar, Fecha, 103) Fecha, '' [Fec.Venc o Pago], t.Abreviatura [Cód Doc], RIGHT('0000' + Serie, 4) [Ser.Doc. o Maq.Reg.],
					c.Numero [Número Doc.], 
					case c.Estado when 'E' then CASE WHEN t.Abreviatura = '01' THEN '6' ELSE '0' END when 'A' then '' end [TD Cl], 
					case c.Estado when 'E' then c.DNIRUC when 'A' then '' end [Nro.Doc. Cliente], 
					case c.Estado when 'E' then cl.Nombre when 'A' then 'ANULADO' end [Apellidos y Nombres/Razón Social],
					0 [Valor Exportación], 
					Case IdAlmacen when 61 then 0 else c.SubTotal end [B. Imponible], 
					Case IdAlmacen when 61 then c.SubTotal else 0 end [B. Exonerada], 
					0 [B. Inafecta], 0 [I.S.C.], c.IGV [I.G.V. / I.P.M], 0 [I.C.B.],
					0 [Otros Tributos y Cargos], c.APagar Total, c.TipoCambio [T.Camb], '' [Fecha Doc.Ref.],'' [Cod Doc Ref],'' [Serie Doc. Ref],'' [Número Doc.Ref]
				from Movimientos.ComprobanteDeVentaCabecera c inner join
					Maestros.TipoDocumentoVenta t on c.IdTipoDocumento = t.IdTipoDocumentoVenta inner join
					Maestros.Cliente cl on c.IdCliente = cl.IdCliente
				where c.Estado in ('E') and month(Fecha) = @periodo + 1 and year(Fecha) = 2024
						and t.Abreviatura in ('03') and IdAlmacen = @tienda
			) e
			where [Cód Doc] = '03'
			GROUP BY Fecha, [Fec.Venc o Pago], [Cód Doc], [Ser.Doc. o Maq.Reg.], [TD Cl]
				union all
			Select c.IdComprobante [Nro. Asto], convert(varchar, Fecha, 103) Fecha, '' [Fec.Venc o Pago], t.Abreviatura [Cód Doc], RIGHT('0000' + Serie, 4) [Ser.Doc. o Maq.Reg.],
				right('00000000' + cast(c.Numero as varchar), 8) [Número Doc.], 
				case c.Estado when 'E' then CASE WHEN t.Abreviatura = '01' THEN '6' ELSE CASE WHEN c.DNIRUC = '99999999' THEN '0' ELSE '1' END END when 'A' then '' end [TD Cl], 
				case c.Estado when 'E' then c.DNIRUC when 'A' then '' end [Nro.Doc. Cliente], 
				case c.Estado when 'E' then cl.Nombre when 'A' then 'ANULADO' end [Apellidos y Nombres/Razón Social],
				0 [Valor Exportación], case c.Estado when 'E' then c.SubTotal when 'A' then 0 end [B. Imponible], 0 [B. Exonerada], 0 [B. Inafecta], 0 [I.S.C.], 
				case c.Estado when 'E' then c.IGV WHEN 'A' then 0 end [I.G.V. / I.P.M], 0 [I.C.B.],
				0 [Otros Tributos y Cargos], case c.Estado when 'E' then c.APagar when 'A' then 0 end Total, 
				c.TipoCambio [T.Camb], '' [Fecha Doc.Ref.],'' [Cod Doc Ref],'' [Serie Doc. Ref],'' [Número Doc.Ref]
			from Movimientos.ComprobanteDeVentaCabecera c inner join
				Maestros.TipoDocumentoVenta t on c.IdTipoDocumento = t.IdTipoDocumentoVenta inner join
				Maestros.Cliente cl on c.IdCliente = cl.IdCliente
			where c.Estado in ('A') and month(Fecha) = @periodo + 1 and year(Fecha) = 2024
				and t.Abreviatura in ('03') and IdAlmacen = @tienda
				union all
			Select c.IdComprobante [Nro. Asto], convert(varchar, Fecha, 103) Fecha, '' [Fec.Venc o Pago], t.Abreviatura [Cód Doc], RIGHT('0000' + Serie, 4) [Ser.Doc. o Maq.Reg.],
				right('00000000' + cast(c.Numero as varchar), 8) [Número Doc.], 
				case c.Estado when 'E' then CASE WHEN t.Abreviatura = '01' THEN '6' ELSE CASE WHEN c.DNIRUC = '99999999' THEN '0' ELSE '1' END END when 'A' then '' end [TD Cl], 
				case c.Estado when 'E' then c.DNIRUC when 'A' then '' end [Nro.Doc. Cliente], 
				case c.Estado when 'E' then cl.Nombre when 'A' then 'ANULADO' end [Apellidos y Nombres/Razón Social],
				0 [Valor Exportación], 
				case IdAlmacen when 61 then 0 else case c.Estado when 'E' then c.SubTotal when 'A' then 0 end end [B. Imponible], 
				case IdAlmacen when 61 then case c.Estado when 'E' then c.SubTotal when 'A' then 0 end else 0 end [B. Exonerada], 
				0 [B. Inafecta], 0 [I.S.C.], 
				case c.Estado when 'E' then c.IGV WHEN 'A' then 0 end [I.G.V. / I.P.M], 0 [I.C.B.],
				0 [Otros Tributos y Cargos], case c.Estado when 'E' then c.APagar when 'A' then 0 end Total, 
				c.TipoCambio [T.Camb], '' [Fecha Doc.Ref.],'' [Cod Doc Ref],'' [Serie Doc. Ref],'' [Número Doc.Ref]
			from Movimientos.ComprobanteDeVentaCabecera c inner join
				Maestros.TipoDocumentoVenta t on c.IdTipoDocumento = t.IdTipoDocumentoVenta inner join
				Maestros.Cliente cl on c.IdCliente = cl.IdCliente
			where c.Estado in ('E', 'A') and month(Fecha) = @periodo + 1 and year(Fecha) = 2024
				and t.Abreviatura in ('01') and IdAlmacen = @tienda
				union all
			select v.IdNC [Nro. Asto], convert(varchar, Fecha, 103) Fecha, '' [Fec.Venc o Pago], t.Abreviatura [Cód Doc], RIGHT('0000' + Serie, 4) [Ser.Doc. o Maq.Reg.],
				right('00000000' + cast(v.Numero as varchar), 8) [Número Doc.], 
				case v.Estado when 'E' then CASE WHEN t.Abreviatura = '01' THEN '6' ELSE CASE WHEN v.DNIRUC = '99999999' THEN '0' ELSE '1' END END when 'A' then '' end [TD Cl], 
				case v.Estado when 'E' then v.DNIRUC when 'A' then '' end [Nro.Doc. Cliente], 
				case v.Estado when 'E' then cl.Nombre when 'A' then 'ANULADO' end [Apellidos y Nombres/Razón Social],
				0 [Valor Exportación], 
				case a.IdAlmacen when 61 then 0 else case v.Estado when 'E' then v.SubTotal * -1 else 0 end end [B. Imponible], 
				case a.IdAlmacen when 61 then case v.Estado when 'E' then v.SubTotal * -1 else 0 end else 0 end [B. Exonerada], 
				0 [B. Inafecta], 0 [I.S.C.], 
				case v.Estado when 'E' then v.IGV * -1 else 0 end [I.G.V. / I.P.M], 0 [I.C.B.],
				0 [Otros Tributos y Cargos], 
				case v.Estado when 'E' then v.Total * -1 else 0 end Total, 
				0 [T.Camb], 
					cast((
							Select top 1 CONVERT(varchar, Fecha, 103) 
							from Movimientos.ComprobanteDeVentaCabecera 
							where numero = right(v.Referencia, 8) and 
								Serie = case when left(v.Referencia, 1) in ('B', 'F') then left(v.Referencia, 4) 
											else left(v.Referencia, 3) end and IdTipoDocumento in (1, 2, 4, 5)) as varchar) [Fecha Doc.Ref.],
					cast((
							Select top 1 t.Abreviatura
							from Movimientos.ComprobanteDeVentaCabecera c inner join Maestros.TipoDocumentoVenta t on c.IdTipoDocumento = t.IdTipoDocumentoVenta
							where numero = right(v.Referencia, 8) and 
								Serie = case when left(v.Referencia, 1) in ('B', 'F') then left(v.Referencia, 4) 
											else left(v.Referencia, 3) end and IdTipoDocumento in (1, 2, 4, 5)) as varchar) [Cod Doc Ref],
					cast((
							Select top 1 RIGHT('0000' + Serie, 4) 
							from Movimientos.ComprobanteDeVentaCabecera 
							where numero = right(v.Referencia, 8) and 
								Serie = case when left(v.Referencia, 1) in ('B', 'F') then left(v.Referencia, 4) 
											else left(v.Referencia, 3) end and IdTipoDocumento in (1, 2, 4, 5)) as varchar) [Serie Doc. Ref],
					right('00000000' + cast((
							Select top 1 Numero 
							from Movimientos.ComprobanteDeVentaCabecera 
							where numero = right(v.Referencia, 8) and 
								Serie = case when left(v.Referencia, 1) in ('B', 'F') then left(v.Referencia, 4) 
											else left(v.Referencia, 3) end and IdTipoDocumento in (1, 2, 4, 5)) as varchar), 8) [Número Doc.Ref]
			from Movimientos.NotaDeCreditoCabecera v inner join maestros.Almacen a
				on v.IdAlmacen = a.IdAlmacen inner join Maestros.TipoDocumentoVenta t
				on v.IdTipoDocumento = t.IdTipoDocumentoVenta inner join
				Maestros.Cliente cl on v.IdCliente = cl.IdCliente
			where v.Estado in ('E', 'A') and month(Fecha) = @periodo + 1 and year(Fecha) = 2024
				and t.Abreviatura in ('07') and a.IdAlmacen = @tienda and left(Serie, 1) != 'T'
			Order by [Ser.Doc. o Maq.Reg.], Fecha, [Cód Doc]
		end
	else
		begin
			Select MIN([Nro. Asto]) [Nro. Asto], Fecha, [Fec.Venc o Pago], [Cód Doc], [Ser.Doc. o Maq.Reg.], 
				RIGHT('00000000' + cast(MIN([Número Doc.]) as varchar), 8) + ' al ' + RIGHT('00000000' + cast(MAX([Número Doc.]) as varchar), 8) [Número Doc.], 
				'' [TD Cl], '' [Nro.Doc. Cliente], 'VENTA DEL DIA' [Apellidos y Nombres/Razón Social],
				SUM([Valor Exportación]) [Valor Exportación], SUM([B. Imponible]) [B. Imponible], SUM([B. Exonerada]) [B. Exonerada], SUM([B. Inafecta]) [B. Inafecta], 
				SUM([I.S.C.]) [I.S.C.],	SUM([I.G.V. / I.P.M]) [I.G.V. / I.P.M],  0 [I.C.B.], SUM([Otros Tributos y Cargos]) [Otros Tributos y Cargos], SUM(Total) Total, 
				MAX([T.Camb]) [T.Camb], '' [Fecha Doc.Ref.], '' [Cod Doc Ref], '' [Serie Doc. Ref], '' [Número Doc.Ref]
			from
			(
				Select c.IdComprobante [Nro. Asto], convert(varchar, Fecha, 103) Fecha, '' [Fec.Venc o Pago], t.Abreviatura [Cód Doc], RIGHT('0000' + Serie, 4) [Ser.Doc. o Maq.Reg.],
					c.Numero [Número Doc.], 
					case c.Estado when 'E' then CASE WHEN t.Abreviatura = '01' THEN 6 ELSE 0 END when 'A' then '' end [TD Cl], 
					case c.Estado when 'E' then c.DNIRUC when 'A' then '' end [Nro.Doc. Cliente], 
					case c.Estado when 'E' then cl.Nombre when 'A' then 'ANULADO' end [Apellidos y Nombres/Razón Social],
					0 [Valor Exportación], 
					Case IdAlmacen when 61 then 0 else c.SubTotal end [B. Imponible], 
					Case IdAlmacen when 61 then c.SubTotal else 0 end [B. Exonerada], 
					0 [B. Inafecta], 0 [I.S.C.], c.IGV [I.G.V. / I.P.M], 0 [I.C.B.],
					0 [Otros Tributos y Cargos], c.APagar Total, c.TipoCambio [T.Camb], '' [Fecha Doc.Ref.],'' [Cod Doc Ref],'' [Serie Doc. Ref],'' [Número Doc.Ref]
				from Movimientos.ComprobanteDeVentaCabecera c inner join
					Maestros.TipoDocumentoVenta t on c.IdTipoDocumento = t.IdTipoDocumentoVenta inner join
					Maestros.Cliente cl on c.IdCliente = cl.IdCliente
				where c.Estado in ('E') and month(Fecha) = @periodo + 1 and year(Fecha) = 2024
						and t.Abreviatura in ('03') and IdAlmacen in(Select IdAlmacen from Maestros.Almacen where RUC = @ruc)
			) e
			where [Cód Doc] = '03'
			GROUP BY Fecha, [Fec.Venc o Pago], [Cód Doc], [Ser.Doc. o Maq.Reg.], [TD Cl]

				union all

			Select c.IdComprobante [Nro. Asto], convert(varchar, Fecha, 103) Fecha, '' [Fec.Venc o Pago], t.Abreviatura [Cód Doc], RIGHT('0000' + Serie, 4) [Ser.Doc. o Maq.Reg.],
				right('00000000' + cast(c.Numero as varchar), 8) [Número Doc.], 
				case c.Estado when 'E' then CASE WHEN t.Abreviatura = '01' THEN '6' ELSE CASE WHEN c.DNIRUC = '99999999' THEN '0' ELSE '1' END END when 'A' then '' end [TD Cl], 
				case c.Estado when 'E' then c.DNIRUC when 'A' then '' end [Nro.Doc. Cliente], 
				case c.Estado when 'E' then cl.Nombre when 'A' then 'ANULADO' end [Apellidos y Nombres/Razón Social],
				0 [Valor Exportación], case c.Estado when 'E' then c.SubTotal when 'A' then 0 end [B. Imponible], 0 [B. Exonerada], 0 [B. Inafecta], 0 [I.S.C.], 
				case c.Estado when 'E' then c.IGV WHEN 'A' then 0 end [I.G.V. / I.P.M], 0 [I.C.B.],
				0 [Otros Tributos y Cargos], case c.Estado when 'E' then c.APagar when 'A' then 0 end Total, 
				c.TipoCambio [T.Camb], '' [Fecha Doc.Ref.],'' [Cod Doc Ref],'' [Serie Doc. Ref],'' [Número Doc.Ref]
			from Movimientos.ComprobanteDeVentaCabecera c inner join
				Maestros.TipoDocumentoVenta t on c.IdTipoDocumento = t.IdTipoDocumentoVenta inner join
				Maestros.Cliente cl on c.IdCliente = cl.IdCliente
			where c.Estado in ('A') and month(Fecha) = @periodo + 1 and year(Fecha) = 2024
				and t.Abreviatura in ('03') and IdAlmacen in(Select IdAlmacen from Maestros.Almacen where RUC = @ruc)

				union all

			Select c.IdComprobante [Nro. Asto], convert(varchar, Fecha, 103) Fecha, '' [Fec.Venc o Pago], t.Abreviatura [Cód Doc], RIGHT('0000' + Serie, 4) [Ser.Doc. o Maq.Reg.],
				right('00000000' + cast(c.Numero as varchar), 8) [Número Doc.], 
				case c.Estado when 'E' then CASE WHEN t.Abreviatura = '01' THEN '6' ELSE CASE WHEN c.DNIRUC = '99999999' THEN '0' ELSE '1' END END when 'A' then '' end [TD Cl], 
				case c.Estado when 'E' then c.DNIRUC when 'A' then '' end [Nro.Doc. Cliente], 
				case c.Estado when 'E' then cl.Nombre when 'A' then 'ANULADO' end [Apellidos y Nombres/Razón Social],
				0 [Valor Exportación], 
				case IdAlmacen when 61 then 0 else case c.Estado when 'E' then c.SubTotal when 'A' then 0 end end [B. Imponible], 
				case IdAlmacen when 61 then case c.Estado when 'E' then c.SubTotal when 'A' then 0 end else 0 end [B. Exonerada], 
				0 [B. Inafecta], 0 [I.S.C.], 
				case c.Estado when 'E' then c.IGV WHEN 'A' then 0 end [I.G.V. / I.P.M], 0 [I.C.B.],
				0 [Otros Tributos y Cargos], case c.Estado when 'E' then c.APagar when 'A' then 0 end Total, 
				c.TipoCambio [T.Camb], '' [Fecha Doc.Ref.],'' [Cod Doc Ref],'' [Serie Doc. Ref],'' [Número Doc.Ref]
			from Movimientos.ComprobanteDeVentaCabecera c inner join
				Maestros.TipoDocumentoVenta t on c.IdTipoDocumento = t.IdTipoDocumentoVenta inner join
				Maestros.Cliente cl on c.IdCliente = cl.IdCliente
			where c.Estado in ('E', 'A') and month(Fecha) = @periodo + 1 and year(Fecha) = 2024
				and t.Abreviatura in ('01') and IdAlmacen in(Select IdAlmacen from Maestros.Almacen where RUC = @ruc)

				union all

			select v.IdNC [Nro. Asto], convert(varchar, Fecha, 103) Fecha, '' [Fec.Venc o Pago], t.Abreviatura [Cód Doc], RIGHT('0000' + Serie, 4) [Ser.Doc. o Maq.Reg.],
				right('00000000' + cast(v.Numero as varchar), 8) [Número Doc.], 
				case v.Estado when 'E' then CASE WHEN t.Abreviatura = '01' THEN '6' ELSE CASE WHEN v.DNIRUC = '99999999' THEN '0' ELSE '1' END END when 'A' then '' end [TD Cl], 
				case v.Estado when 'E' then v.DNIRUC when 'A' then '' end [Nro.Doc. Cliente], 
				case v.Estado when 'E' then cl.Nombre when 'A' then 'ANULADO' end [Apellidos y Nombres/Razón Social],
				0 [Valor Exportación], 
				case a.IdAlmacen when 61 then 0 else case v.Estado when 'E' then v.SubTotal * -1 else 0 end end [B. Imponible], 
				case a.IdAlmacen when 61 then case v.Estado when 'E' then v.SubTotal * -1 else 0 end else 0 end [B. Exonerada], 
				0 [B. Inafecta], 0 [I.S.C.], 
				case v.Estado when 'E' then v.IGV * -1 else 0 end [I.G.V. / I.P.M], 0 [I.C.B.],
				0 [Otros Tributos y Cargos], 
				case v.Estado when 'E' then v.Total * -1 else 0 end Total, 
				0 [T.Camb],
					cast((
							Select top 1 CONVERT(varchar, Fecha, 103) 
							from Movimientos.ComprobanteDeVentaCabecera
							where numero = right(v.Referencia, 8) and 
								Serie = case when left(v.Referencia, 1) in ('B', 'F') then left(v.Referencia, 4) 
											else left(v.Referencia, 3) end and IdTipoDocumento in (1, 2, 4, 5)) as varchar) [Fecha Doc.Ref.],
					cast((
							Select top 1 t.Abreviatura
							from Movimientos.ComprobanteDeVentaCabecera c inner join Maestros.TipoDocumentoVenta t on c.IdTipoDocumento = t.IdTipoDocumentoVenta
							where numero = right(v.Referencia, 8) and 
								Serie = case when left(v.Referencia, 1) in ('B', 'F') then left(v.Referencia, 4) 
											else left(v.Referencia, 3) end and IdTipoDocumento in (1, 2, 4, 5)) as varchar) [Cod Doc Ref],
					cast((
							Select top 1 RIGHT('0000' + Serie, 4) 
							from Movimientos.ComprobanteDeVentaCabecera
							where numero = right(v.Referencia, 8) and 
								Serie = case when left(v.Referencia, 1) in ('B', 'F') then left(v.Referencia, 4) 
											else left(v.Referencia, 3) end and IdTipoDocumento in (1, 2, 4, 5)) as varchar) [Serie Doc. Ref],
					right('00000000' + cast((
							Select top 1 Numero 
							from Movimientos.ComprobanteDeVentaCabecera 
							where numero = right(v.Referencia, 8) and 
								Serie = case when left(v.Referencia, 1) in ('B', 'F') then left(v.Referencia, 4) 
											else left(v.Referencia, 3) end and IdTipoDocumento in (1, 2, 4, 5)) as varchar), 8) [Número Doc.Ref]
			from Movimientos.NotaDeCreditoCabecera v inner join maestros.Almacen a
				on v.IdAlmacen = a.IdAlmacen inner join Maestros.TipoDocumentoVenta t
				on v.IdTipoDocumento = t.IdTipoDocumentoVenta inner join
				Maestros.Cliente cl on v.IdCliente = cl.IdCliente
			where v.Estado in ('E', 'A') and month(Fecha) = @periodo + 1 and year(Fecha) = 2024
				and t.Abreviatura in ('07') and a.IdAlmacen in(Select IdAlmacen from Maestros.Almacen where RUC = @ruc) and left(Serie, 1) != 'T'
			Order by [Ser.Doc. o Maq.Reg.], Fecha, [Cód Doc]
		end
GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_RankingVendedores]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [Movimientos].[usp_get_RankingVendedores]

@fi		datetime,
@ff		datetime,
@tienda	int, --0 para ver todas las tiendas
@tipo	int --0 Ranking de Vendedores, 1 Evolución de Ventas, 2 Ranking de Productos Vendidos

AS

if @tienda = 0
	begin
	if @tipo = 0
		select RANK () OVER (PARTITION BY a.Nombre ORDER BY sum(v.Total) desc) Ranking, a.Nombre Tienda, Nombres + ' ' + Apellidos Vendedor, 
				COUNT(*) Cantidad, sum(v.Total) Monto
		from Movimientos.ComprobanteDeVentaCabecera v inner join Maestros.Personal p
			on v.IdVendedor = p.IdPersonal inner join maestros.Almacen a
			on v.IdAlmacen = a.IdAlmacen
		where v.Fecha between @fi and @ff and v.Estado <> 'A'
		group by a.Nombre, Nombres, Apellidos
		Order by sum(v.Total) desc

	if @tipo = 1
		Select convert(varchar, fecha, 3) Fecha, sum(APagar) Monto
		from Movimientos.ComprobanteDeVentaCabecera c
		where c.Fecha between @fi and @ff and Estado <> 'A'
		group by convert(varchar, fecha, 3)

	if @tipo = 2
		Select a.Nombre Almacen, p.IdArticulo Codigo, p.Descripcion Articulo, sum(d.Total) Monto
		from Movimientos.ComprobanteDeVentaCabecera c inner join Movimientos.ComprobanteDeVentaDetalle d
			on c.IdComprobante = d.IdComprobante inner join Maestros.Articulo p
			on d.IdArticulo = p.IdArticulo inner join Maestros.Almacen a
			on a.IdAlmacen = c.IdAlmacen
		where c.Fecha between @fi and @ff and c.Estado <> 'A'
		group by a.Nombre, p.IdArticulo, p.Descripcion
		Order by 4 desc
	end
else
	begin
	if @tipo = 0
		select RANK () OVER (ORDER BY sum(v.Total) desc) Ranking, a.Nombre Tienda, Nombres + ' ' + Apellidos Vendedor, 
				COUNT(*) Cantidad, sum(v.Total) Monto
		from Movimientos.ComprobanteDeVentaCabecera v inner join Maestros.Personal p
			on v.IdVendedor = p.IdPersonal inner join maestros.Almacen a
			on v.IdAlmacen = a.IdAlmacen
		where v.Fecha between @fi and @ff and v.IdAlmacen = @tienda and v.Estado <> 'A'
		group by a.Nombre, Nombres, Apellidos
		Order by sum(v.Total) desc

	if @tipo = 1
		Select convert(varchar, fecha, 3) Fecha, sum(APagar) Monto
		from Movimientos.ComprobanteDeVentaCabecera c
		where c.Fecha between @fi and @ff and Estado <> 'A' and IdAlmacen = @tienda
		group by convert(varchar, fecha, 3)

	if @tipo = 2
		Select convert(varchar, fecha, 3) Fecha, sum(APagar) Monto
		from Movimientos.ComprobanteDeVentaCabecera c
		where c.Fecha between @fi and @ff and Estado <> 'A' and IdAlmacen = @tienda
		group by convert(varchar, fecha, 3)
	end
GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_ResumenCierreDeCajaDetallado]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--exec [Movimientos].[usp_get_ResumenCierreDeCajaDetallado] 1021, 63, '05/03/2024'
--GO

CREATE PROCEDURE [Movimientos].[usp_get_ResumenCierreDeCajaDetallado]
	@IdUsuario int,
	@IdAlmacen int,
	@Fecha date

as


--declare @IdUsuario int;
--declare @IdAlmacen int;
--declare @Fecha date;
--select @IdUsuario = 7;
--select @IdALmacen = 56;
--select @Fecha = '02/09/2019'

	select 'VENTA CON ' + CASE VENTA.Descripcion WHEN 'TICKET' THEN 'BOLETA 2' ELSE VENTA.Descripcion END AS 'Tipo', 'DEL ' + VENTA.Minimo + ' AL ' + VENTA.Maximo AS 'Detalle', VENTA.Total -- VENTAS CON COMPROBANTE
	from
	(select B.IdTipoDocumento, B.Descripcion, B.Minimo, max(CVC.Serie + '-' + RIGHT('00000000' + Ltrim(Rtrim(CAST(CVC.Numero AS VARCHAR(8)))),8)) as 'Maximo', B.Total
	from Movimientos.ComprobanteDeVentaCabecera CVC
	inner join
	(select A.IdTipoDocumento, A.Descripcion, min(CVC.Serie + '-' + RIGHT('00000000' + Ltrim(Rtrim(CAST(CVC.Numero AS VARCHAR(8)))),8)) as 'Minimo', A.Total
	from Movimientos.ComprobanteDeVentaCabecera CVC
	inner join
	(select CVC.IdTipoDocumento, TDV.Descripcion, SUM(CVC.APagar) as 'Total'
	from Maestros.TipoDocumentoVenta TDV
	inner join Movimientos.ComprobanteDeVentaCabecera CVC
	on TDV.IdTipoDocumentoVenta = CVC.IdTipoDocumento
	where CVC.IdCajero = @IdUsuario and CVC.IdAlmacen = @IdAlmacen and cast(CVC.Fecha as date) = @Fecha and	CVC.Estado <> 'A'
	group by CVC.IdTipoDocumento, TDV.Descripcion) A
	on A.IdTipoDocumento = CVC.IdTipoDocumento
	where CVC.IdCajero = @IdUsuario and CVC.IdAlmacen = @IdAlmacen and cast(CVC.Fecha as date) = @Fecha and	CVC.Estado <> 'A'
	group by A.IdTipoDocumento, A.Descripcion, A.Total) B
	on B.IdTipoDocumento = CVC.IdTipoDocumento
	where CVC.IdCajero = @IdUsuario and CVC.IdAlmacen = @IdAlmacen and cast(CVC.Fecha as date) = @Fecha and	CVC.Estado <> 'A'
	group by B.IdTipoDocumento, B.Descripcion, B.Minimo, B.Total) VENTA

	union all

	SELECT UPPER(RCC.[Grupo]) as 'Tipo', UPPER(RCC.[Detalle]), RCC.[Monto] as 'Total' --OTROS INGRESOS DEL DIA
	  FROM [Movimientos].[ResumenCierreDeCaja] RCC
	 where RCC.IdUsuario = @IdUsuario and RCC.IdAlmacen = @IdAlmacen and cast(RCC.Fecha as date) = @Fecha AND RCC.IdGrupo = 3

	 union all

	SELECT UPPER(RCC.[Grupo]) as 'Tipo', UPPER(RCC.[Detalle]), RCC.[Monto] * -1 as 'Total' --GASTOS DEL DIA
	  FROM [Movimientos].[ResumenCierreDeCaja] RCC
	 where RCC.IdUsuario = @IdUsuario and RCC.IdAlmacen = @IdAlmacen and cast(RCC.Fecha as date) = @Fecha AND RCC.IdGrupo = 4
	 --GROUP BY RCC.[Grupo], RCC.[Detalle]

	   union all

	SELECT UPPER(RCC.[Grupo]) as 'Tipo', UPPER(RCC.[Detalle]), RCC.[Monto] * -1 as 'Total' --TRANSFERENCIAS
	  FROM [Movimientos].[ResumenCierreDeCaja] RCC
	 where RCC.IdUsuario = @IdUsuario and RCC.IdAlmacen = @IdAlmacen and cast(RCC.Fecha as date) = @Fecha AND RCC.IdGrupo = 5
 
	  union all

	SELECT UPPER(RCC.[Grupo]) as 'Tipo', UPPER(RCC.[Detalle]), SUM(RCC.[Monto]) * -1 as 'Total' --VENTAS CON TARJETA
	  FROM [Movimientos].[ResumenCierreDeCaja] RCC
	 where RCC.IdUsuario = @IdUsuario and RCC.IdAlmacen = @IdAlmacen and cast(RCC.Fecha as date) = @Fecha AND RCC.IdGrupo = 6
	 GROUP BY RCC.[Grupo], RCC.[Detalle]

	   union all

	SELECT UPPER(RCC.[Grupo]) as 'Tipo', UPPER(RCC.[Detalle]), RCC.[Monto] * -1 as 'Total' --VENTAS CON NC
	  FROM [Movimientos].[ResumenCierreDeCaja] RCC
	 where RCC.IdUsuario = @IdUsuario and RCC.IdAlmacen = @IdAlmacen and cast(RCC.Fecha as date) = @Fecha AND RCC.IdGrupo = 7
	 --GROUP BY RCC.[Grupo], RCC.[Detalle]

		union all

	SELECT UPPER(RCC.[Grupo]) as 'Tipo', UPPER(RCC.[Detalle]), RCC.[Monto] * -1 as 'Total' --PAGO PROVEEDORES
	  FROM [Movimientos].[ResumenCierreDeCaja] RCC
	 where RCC.IdUsuario = @IdUsuario and RCC.IdAlmacen = @IdAlmacen and cast(RCC.Fecha as date) = @Fecha AND RCC.IdGrupo = 8
GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_ResumenCierreDeCajaResumido]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Movimientos].[usp_get_ResumenCierreDeCajaResumido]
	@IdUsuario int,
	@IdAlmacen int,
	@Fecha date

as

--declare @IdUsuario int;
--declare @IdAlmacen int;
--declare @Fecha date;
--select @IdUsuario = 7;
--select @IdALmacen = 56;
--select @Fecha = '29/08/2019'

	SELECT RCC.IdGrupo, UPPER(RCC.[Grupo]) as 'Tipo', UPPER(RCC.[Grupo]) as 'Column1', 
		CASE WHEN RCC.IdGrupo IN (4,5,6,7,8) THEN SUM(RCC.[Monto]) * -1 ELSE SUM(RCC.[Monto]) END  as 'Total' --GASTOS DEL DIA
	  FROM [Movimientos].[ResumenCierreDeCaja] RCC
	 where RCC.IdUsuario = @IdUsuario and RCC.IdAlmacen = @IdAlmacen and cast(RCC.Fecha as date) = @Fecha
	 GROUP BY RCC.IdGrupo, RCC.[Grupo], RCC.[Grupo]
	 order by IdGrupo
GO
/****** Object:  StoredProcedure [Movimientos].[usp_get_v_ResumenCierreDeCaja_2]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [Movimientos].[usp_get_v_ResumenCierreDeCaja_2]
	@IdUsuario int,
	@IdAlmacen int,
	@Fecha date
as
begin

	select * from Movimientos.v_ResumenCierreDeCaja_2 where IdUsuario = @IdUsuario and IdAlmacen = @IdAlmacen and Fecha = @Fecha order by FechaRegistro;

end
	


	

GO
/****** Object:  StoredProcedure [Movimientos].[usp_InsUpd_ComprobanteDeVenta]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [Movimientos].[usp_InsUpd_ComprobanteDeVenta]
		@tblCabecera Movimientos.ComprobanteDeVentaCabeceraType readonly,
		@tblDetalle Movimientos.ComprobanteDeVentaDetalleType readonly,
		@tblDetallePago Movimientos.DetallePagoVentaType readonly,
		@hash	varchar(500) = null,
		@qr		image = null,
		@xml	varchar(max) = null

AS
BEGIN

	  SET NOCOUNT ON;

	  --DECLARACIONES
	  DECLARE @IdComp INT --IdComprobante generado para el detalle
	  DECLARE @IdTipoDoc INT -- IdTipo Documento para actualizar correlativo
	  DECLARE @Serie varchar(4) --Serie del documento
	  DECLARE @IdAlm INT --IdAlmacen
	  DECLARE @Numero int --Correlativo
	  DECLARE @FechaHoraComp datetime --Fecha y hora del documento (documentos manuales solo fecha)
	  DECLARE @FechaHoraRegistro datetime --Fecha y hora de registro


	  --TABLAS AUXILIARES
	  DECLARE @TablaIdComp table (IdComp int); --Id comprobante insertado
	  DECLARE @TablaKardex table (Id int, Item int, IdAlm int, IdArt char(6), TipMov char(1), Fecha datetime, Cantidad int, Valor decimal(18,2), Orig varchar(50)); --Tabla auxiliar para actualizar Kardex
	  DECLARE @TablaStocks table (Item int, Inicial int, Final int); --Tabla auxiliar para obtener saldo inicial y final para el KARDEX


	  --LLENA VARIABLES
	  select @IdTipoDoc = C.IdTipoDocumento, @serie = C.Serie, @Numero = C.Numero, @FechaHoraComp = C.Fecha, @IdAlm = C.IdAlmacen, @FechaHoraRegistro = C.FechaHoraRegistro from @tblCabecera C;


	  --INSERTA CABECERA VENTA
	  MERGE INTO Movimientos.ComprobanteDeVentaCabecera T1
      USING @tblCabecera T2
      ON T1.IdComprobante=T2.IdComprobante
      WHEN NOT MATCHED THEN
      INSERT(IdTipoDocumento,
			 Serie, 
			 Numero,
			 Fecha,
			 IdCliente,
			 DNIRUC,
			 Nombre,
			 Direccion,
			 TipoCambio,
			 SubTotal,
			 IGV,
			 Total,
			 Redondeo,
			 APagar,
			 IdVendedor,
			 IdCajero,
			 IdAlmacen,
			 Estado,
			 FechaHoraRegistro)
	  VALUES(T2.IdTipoDocumento,
			 T2.Serie, 
			 T2.Numero,
			 T2.Fecha,
			 T2.IdCliente,
			 T2.DNIRUC,
			 T2.Nombre,
			 T2.Direccion,
			 T2.TipoCambio,
			 T2.SubTotal,
			 T2.IGV,
			 T2.Total,
			 T2.Redondeo,
			 T2.APagar,
			 T2.IdVendedor,
			 T2.IdCajero,
			 T2.IdAlmacen,
			 T2.Estado,
			 T2.FechaHoraRegistro)
	  output inserted.IdComprobante INTO @TablaIdComp;


	  --LLENA IdComprobante
	  select @IdComp = IdComp from @TablaIdComp;
	  

	  --INSERTA DETALLE VENTA
	  MERGE INTO Movimientos.ComprobanteDeVentaDetalle T1
      USING @tblDetalle T2
      ON T1.IdComprobante=T2.IdComprobante and T1.Item=T2.Item
      WHEN NOT MATCHED THEN
      INSERT(IdComprobante,
			 Item, 
			 IdArticulo,
			 Descripcion,
			 UnidadMedida,
			 Cantidad,
			 Precio,
			 PorcentajeDescuento,
			 Total)
	  VALUES(@IdComp, 
			 T2.Item, 
			 T2.IdArticulo,
			 T2.Descripcion,
			 T2.UnidadMedida,
			 T2.Cantidad,
			 T2.Precio,
			 T2.PorcentajeDescuento,
			 T2.Total)
	  output 0, T2.Item, @IdAlm, inserted.IdArticulo, 'E', @FechaHoraRegistro, inserted.Cantidad, inserted.Precio * (1 - inserted.PorcentajeDescuento) , 'Venta: ' + @serie + '-' + CONVERT(varchar(10),@Numero) INTO @TablaKardex;

	  --REGISTRA DETALLE PAGO			 
	  MERGE INTO Movimientos.DetallePagoVenta T1
      USING @tblDetallePago T2
      ON T1.IdDetallePagoVenta=T2.IdDetallePagoVenta and T1.IdComprobante=T2.IdComprobante
      WHEN NOT MATCHED THEN
      INSERT(IdComprobante, 
			 IdTipoPagoVenta,
			 Soles,
			 Dolares,
			 Datos,
			 Vuelto,
			 PorcentajeTarjetaSoles,
			 PorcentajeTarjetaDolares)
	  VALUES(@IdComp, 
			 T2.IdTipoPagoVenta, 
			 T2.Soles,
			 T2.Dolares,
			 T2.Datos,
			 T2.Vuelto,
			 T2.PorcentajeTarjetaSoles,
			 T2.PorcentajeTarjetaDolares);


	  --MARCA NOTAS DE CREDITO USADAS

	  UPDATE Movimientos.NotaDeCreditoCabecera
	  SET Empleada = 1
	  WHERE Serie + '-' + replicate('0', 8 - Len(cast(Numero as varchar(8)))) + cast(Numero as varchar(8))
	  IN (SELECT DPV.Datos
		  FROM Movimientos.DetallePagoVenta DPV
		  INNER JOIN Maestros.TipoPagoVenta TPV
		  ON DPV.IdTipoPagoVenta = TPV.IdTipoPagoVenta
		  WHERE TPV.Tipo = 'N.C.'
		  AND DPV.IdComprobante = @IdComp)
	  AND IdAlmacen = @IdAlm;


	  --ACTUALIZA STOCKS
	  MERGE INTO Movimientos.StockAlmacen T1
	  USING @TablaKardex T2
	  ON T1.IdAlmacen = T2.IdAlm and T1.IdArticulo = T2.IdArt
	  WHEN MATCHED THEN
      UPDATE SET T1.Stock = T1.Stock - T2.Cantidad
	  output T2.Item, deleted.Stock, inserted.Stock INTO @TablaStocks;


	  --PREPARA DATOS FINALES PARA KARDEX
	  select K.Id, K.IdAlm, K.IdArt, K.TipMov, K.Fecha, S.Inicial, K.Cantidad, S.Final, K.Valor, K.Orig
	  INTO #TempKardex
	  from @TablaKardex K
	  inner join @TablaStocks S
	  on K.Item = S.Item


	  --REGISTRA MOVIMIENTO EN KARDEX
	  MERGE INTO Movimientos.Kardex T1
	  USING #TempKardex T2
	  ON T1.IdKardex = T2.Id
	  WHEN NOT MATCHED THEN
	  INSERT(IdAlmacen,
			 IdArticulo,
			 TipoMovimiento,
			 Fecha,
			 SaldoInicial,
			 Cantidad,
			 SaldoFinal,
			 Valor,
			 Origen)
	  VALUES(T2.IdAlm,
			 T2.IdArt,
			 T2.TipMov,
			 T2.Fecha,
			 T2.Inicial,
			 T2.Cantidad,
			 T2.Final,
			 T2.Valor,
			 T2.Orig);
			 
		DROP TABLE #TempKardex;

	   -- PREPARA SERIE PARA ACTUALIZAR CORRELATIVO
	   IF LEN(@Serie) = 4
			BEGIN
				set @Serie = SUBSTRING(@Serie,2,3)
			END


	   --ACTUALIZA CORRELATIVO
	   update [Maestros].[SerieCorrelativo]
	   set Correlativo = Correlativo + 1
	   where IdAlmacen = @IdAlm
	   and IdTipoDocumentoVenta = @IdTipoDoc
	   and Serie = @Serie;

	   --INSERTA XML, HASH, QR

	   IF @hash is not null
		   insert into FE.Comprobantes (IdComprobante, Hash, QR, Xml)
		   values (@IdComp, @hash, @qr, @xml);


END


GO
/****** Object:  StoredProcedure [Movimientos].[usp_InsUpd_IngresoEgreso]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [Movimientos].[usp_InsUpd_IngresoEgreso]
		@tblCabecera Movimientos.IngresosEgresosCabeceraType readonly,
		@tblDetalle Movimientos.IngresosEgresosDetalleType readonly

AS
BEGIN

	  SET NOCOUNT ON;

	  --DECLARACIONES
	  DECLARE @IdCabe INT
	  DECLARE @Tipo VARCHAR(20)
	  DECLARE @Naturaleza CHAR(1)
	  DECLARE @FechaHoraRegistro datetime;

	  
	  --TABLAS AUXILIARES
	  DECLARE @IdCabecera table (IdCabe int);


	  --CONSTANTE
	  set @FechaHoraRegistro = GETDATE();


	  --INSERTA CABECERA 
	  MERGE INTO Movimientos.IngresosEgresosCabecera T1
      USING @tblCabecera T2
      ON T1.IdIngresoEgreso=T2.IdIngresoEgreso
      WHEN NOT MATCHED THEN
      INSERT(IdUsuario,
			 IdAlmacen,
			 Naturaleza,
			 Tipo,
			 Fecha,
			 Glosa,
			 Monto,
			 IdProveedor,
			 IdAlmacenDestino,
			 IdCajeroDestino,
			 FechaRegistro,
			 Estado,
			 IdAlmacenGasto)
	  VALUES(T2.IdUsuario,
			 T2.IdAlmacen,
			 T2.Naturaleza,
			 T2.Tipo,
			 T2.Fecha,
			 T2.Glosa,
			 T2.Monto,
			 T2.IdProveedor,
			 T2.IdAlmacenDestino,
			 T2.IdCajeroDestino,
			 @FechaHoraRegistro,
			 T2.Estado,
			 T2.IdAlmacenGasto)
	  output inserted.IdIngresoEgreso INTO @IdCabecera;


	  --LLENA VARIABLES
	  select @IdCabe = IdCabe from @IdCabecera;
	  select @Naturaleza = Naturaleza, @Tipo = Tipo from @tblCabecera;
	  

	  --INSERTA DETALLE 
	  MERGE INTO Movimientos.IngresosEgresosDetalle T1
      USING @tblDetalle T2
      ON T1.IdDetalleIngresoEgreso=T2.IdDetalleIngresoEgreso
      WHEN NOT MATCHED THEN
      INSERT(IdIngresoEgreso,
			 Forma, 
			 Detalle,
			 Monto,
			 Banco,
			 Cuenta,
			 Imagen)
	  VALUES(@IdCabe,
			 T2.Forma, 
			 T2.Detalle,
			 T2.Monto,
			 T2.Banco,
			 T2.Cuenta,
			 T2.Imagen);


	 --INSERTA INGRESO EN LA CAJA DESTINO EN CASO DE TRANSFERENCIA
	 IF  (@Naturaleza = 'E' and @Tipo = 'TRANSFERENCIA')
		BEGIN

			  MERGE INTO Movimientos.IngresosEgresosCabecera T1
			  USING @tblCabecera T2
			  ON T1.IdIngresoEgreso=T2.IdIngresoEgreso
			  WHEN NOT MATCHED THEN
			  INSERT(IdUsuario,
					 IdAlmacen,
					 Naturaleza,
					 Tipo,
					 Fecha,
					 Glosa,
					 Monto,
					 IdProveedor,
					 IdAlmacenDestino,
					 IdCajeroDestino,
					 FechaRegistro,
					 Estado)
			  VALUES(T2.IdCajeroDestino,
					 T2.IdAlmacenDestino,
					 'I',
					 T2.Tipo,
					 T2.Fecha,
					 'TRANFERENCIA DE OTRA CAJA',
					 T2.Monto,
					 null,
					 IdAlmacen,
					 IdUsuario,
					 @FechaHoraRegistro,
					 T2.Estado)
			  output inserted.IdIngresoEgreso INTO @IdCabecera;

			  select @IdCabe = IdCabe from @IdCabecera;

			  MERGE INTO Movimientos.IngresosEgresosDetalle T1
			  USING @tblDetalle T2
			  ON T1.IdDetalleIngresoEgreso=T2.IdDetalleIngresoEgreso
			  WHEN NOT MATCHED THEN
			  INSERT(IdIngresoEgreso,
					 Forma, 
					 Detalle,
					 Monto,
					 Banco,
					 Cuenta,
					 Imagen)
			  VALUES(@IdCabe,
					 T2.Forma, 
					 T2.Detalle,
					 T2.Monto,
					 T2.Banco,
					 T2.Cuenta,
					 T2.Imagen);

		END

END


GO
/****** Object:  StoredProcedure [Movimientos].[usp_InsUpd_NotaDeCredito]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [Movimientos].[usp_InsUpd_NotaDeCredito]
		@tblCabecera [Movimientos].[NotaDeCreditoCabeceraType] readonly,
		@tblDetalle [Movimientos].[NotaDeCreditoDetalleType] readonly

AS
BEGIN

	  SET NOCOUNT ON;

	  --DECLARACIONES
	  DECLARE @IdNC INT --IdNotaCredito
	  DECLARE @IdTipoDoc INT -- IdTipo Documento para actualizar correlativo
	  DECLARE @Serie varchar(4) --Serie del documento
	  DECLARE @IdAlm INT --IdAlmacen
	  DECLARE @Numero int --Correlativo
	  DECLARE @FechaHoraNC datetime --Fecha y hora del documento
	  DECLARE @FechaHoraRegistro datetime --Fecha y hora de registro


	  --TABLAS AUXILIARES
	  DECLARE @TablaIdNC table (IdNC int); --Id NC insertada
	  DECLARE @TablaKardex table (Id int, Item int, IdAlm int, IdArt char(6), TipMov char(1), Fecha datetime, Cantidad int, Valor decimal(18,2), Orig varchar(50)); --Tabla auxiliar para actualizar Kardex
	  DECLARE @TablaStocks table (Item int, Inicial int, Final int); --Tabla auxiliar para obtener saldo inicial y final para el KARDEX


	  --LLENA VARIABLES
	  select @IdTipoDoc = C.IdTipoDocumento, @serie = C.Serie, @Numero = C.Numero, @FechaHoraNC = C.Fecha, @IdAlm = C.IdAlmacen, @FechaHoraRegistro = C.FechaHoraRegistro from @tblCabecera C;


	  --INSERTA CABECERA VENTA
	  MERGE INTO Movimientos.NotaDeCreditoCabecera T1
      USING @tblCabecera T2
      ON T1.IdNC=T2.IdNC
      WHEN NOT MATCHED THEN
      INSERT(IdTipoDocumento,
			 Serie, 
			 Numero,
			 Fecha,
			 Referencia,
			 IdMotivo,
			 IdCliente,
			 DNIRUC,
			 Nombre,
			 Direccion,
			 SubTotal,
			 IGV,
			 Total,
			 Redondeo,
			 AFavor,
			 IdUsuario,
			 IdAlmacen,
			 Estado,
			 FechaHoraRegistro,
			 Empleada)
	  VALUES(T2.IdTipoDocumento,
			 T2.Serie, 
			 T2.Numero,
			 T2.Fecha,
			 T2.Referencia,
			 T2.Idmotivo,
			 T2.IdCliente,
			 T2.DNIRUC,
			 T2.Nombre,
			 T2.Direccion,
			 T2.SubTotal,
			 T2.IGV,
			 T2.Total,
			 T2.Redondeo,
			 T2.AFavor,
			 T2.IdUsuario,
			 T2.IdAlmacen,
			 T2.Estado,
			 T2.FechaHoraRegistro,
			 T2.Empleada)
	  output inserted.IdNC INTO @TablaIdNC;


	  --LLENA IdComprobante
	  select @IdNC = IdNC from @TablaIdNC;
	  

	  --INSERTA DETALLE VENTA
	  MERGE INTO Movimientos.NotaDeCreditoDetalle T1
      USING @tblDetalle T2
      ON T1.IdNC=T2.IdNC and T1.Item=T2.Item
      WHEN NOT MATCHED THEN
      INSERT(IdNC,
			 Item, 
			 IdArticulo,
			 Descripcion,
			 UnidadMedida,
			 Cantidad,
			 Precio,
			 PorcentajeDescuento,
			 Total)
	  VALUES(@IdNC, 
			 T2.Item, 
			 T2.IdArticulo,
			 T2.Descripcion,
			 T2.UnidadMedida,
			 T2.Cantidad,
			 T2.Precio,
			 T2.PorcentajeDescuento,
			 T2.Total)
	  output 0, T2.Item, @IdAlm, inserted.IdArticulo, 'I', @FechaHoraRegistro, inserted.Cantidad, inserted.Precio * (1 - inserted.PorcentajeDescuento), 'NC: ' + @serie + '-' + CONVERT(varchar(10),@Numero) INTO @TablaKardex;

	  
	  --ACTUALIZA STOCKS
	  MERGE INTO Movimientos.StockAlmacen T1
	  USING @TablaKardex T2
	  ON T1.IdAlmacen = T2.IdAlm and T1.IdArticulo = T2.IdArt
	  WHEN MATCHED THEN
      UPDATE SET T1.Stock = T1.Stock + T2.Cantidad
	  output T2.Item, deleted.Stock, inserted.Stock INTO @TablaStocks;


	  --PREPARA DATOS FINALES PARA KARDEX
	  select K.Id, K.IdAlm, K.IdArt, K.TipMov, K.Fecha, S.Inicial, K.Cantidad, S.Final, K.Valor, K.Orig
	  INTO #TempKardex
	  from @TablaKardex K
	  inner join @TablaStocks S
	  on K.Item = S.Item


	  --REGISTRA MOVIMIENTO EN KARDEX
	  MERGE INTO Movimientos.Kardex T1
	  USING #TempKardex T2
	  ON T1.IdKardex = T2.Id
	  WHEN NOT MATCHED THEN
	  INSERT(IdAlmacen,
			 IdArticulo,
			 TipoMovimiento,
			 Fecha,
			 SaldoInicial,
			 Cantidad,
			 SaldoFinal,
			 Valor,
			 Origen)
	  VALUES(T2.IdAlm,
			 T2.IdArt,
			 T2.TipMov,
			 T2.Fecha,
			 T2.Inicial,
			 T2.Cantidad,
			 T2.Final,
			 T2.Valor,
			 T2.Orig);
			 
		DROP TABLE #TempKardex;

	   -- PREPARA SERIE PARA ACTUALIZAR CORRELATIVO
	   IF LEN(@Serie) = 4
			BEGIN
				set @Serie = SUBSTRING(@Serie,2,3)
			END


	   --ACTUALIZA CORRELATIVO
	   update [Maestros].[SerieCorrelativo]
	   set Correlativo = Correlativo + 1
	   where IdAlmacen = @IdAlm
	   and IdTipoDocumentoVenta = @IdTipoDoc
	   and Serie = @Serie;

END

GO
/****** Object:  StoredProcedure [Movimientos].[usp_InsUpd_OrdenDeCompra]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [Movimientos].[usp_InsUpd_OrdenDeCompra]
		@tblCabecera Movimientos.OrdenDeCompraCabeceraType readonly,
		@tblDetalle Movimientos.OrdenDeCompraDetalleType readonly,
		@Ano int
AS
BEGIN

	  SET NOCOUNT ON;

	  DECLARE @NUMOC CHAR(7)
	  DECLARE @IdOc INT

	  DECLARE @TablaIdOc table (IdOc int);
	  DECLARE @UpdPrecio table (IdArticulo char(7), Precio numeric(14,2));

	  SELECT @IdOC = count(*) + 1 from Movimientos.OrdenDeCompraCabecera where year(fechaoc) = @Ano

	  SET @NUMOC = 'N-' + REPLICATE('0', 5 - LEN(CONVERT(varchar(5),@IdOC))) + LTRIM(CONVERT(varchar(5),@IdOC))
 

	  --CABECERA ORDEN DE COMPRA

      MERGE INTO Movimientos.OrdenDeCompraCabecera T1
      USING @tblCabecera T2
      ON T1.IdOc=T2.IdOc
      WHEN MATCHED THEN
      UPDATE SET T1.IdProveedor = T2.IdProveedor, 
				 T1.NumeroOC = T2.NumeroOC,
				 T1.FechaOC = T2.FechaOC,
				 T1.RUCProveedor = T2.RUCProveedor,
				 T1.NombreProveedor = T2.NombreProveedor,
				 T1.DireccionProveedor = T2.DireccionProveedor,
				 T1.Moneda = T2.Moneda,
				 T1.TipoCambio = t2.TipoCambio,
				 T1.FormaPago = T2.FormaPago,
				 T1.SinIGV = T2.SinIGV,
				 T1.FechaEntrega = T2.FechaEntrega,
				 T1.Atencion = T2.Atencion,
				 T1.Glosa = T2.Glosa,
				 T1.ImporteSubTotal = T2.ImporteSubTotal,
				 T1.ImporteIGV = T2.ImporteIGV,
				 T1.ImporteTotal = T2.ImporteTotal,
				 T1.EstadoEmision = T2.EstadoEmision,
				 T1.FechaEmision = T2.FechaEmision,
				 T1.EstadoAtencion = T2.EstadoAtencion,
				 T1.FechaAtencionTotal = T2.FechaAtencionTotal,
				 T1.FechaAnulado = T2.FechaAnulado,
				 T1.FechaCierre = T2.FechaCierre,
				 T1.IdUsuarioRegistra = T2.IdUsuarioRegistra,
				 T1.FechaRegistra = T2.FechaRegistra
      WHEN NOT MATCHED THEN
      INSERT(IdProveedor,
			 NumeroOC, 
			 FechaOC,
			 RUCProveedor,
			 NombreProveedor,
			 DireccionProveedor,
			 Moneda,
			 TipoCambio,
			 FormaPago,
			 SinIGV,
			 FechaEntrega,
			 Atencion,
			 Glosa,
			 ImporteSubTotal,
			 ImporteIGV,
			 ImporteTotal,
			 EstadoEmision,
			 FechaEmision,
			 EstadoAtencion,
			 FechaAtencionTotal,
			 FechaAnulado,
			 FechaCierre,
			 IdUsuarioRegistra,
			 FechaRegistra)
	  VALUES(T2.IdProveedor, 
			 @NUMOC,
			 T2.FechaOC,
			 T2.RUCProveedor,
			 T2.NombreProveedor,
			 T2.DireccionProveedor,
			 T2.Moneda,
			 T2.TipoCambio,
			 T2.FormaPago,
			 T2.SinIGV,
			 T2.FechaEntrega,
			 T2.Atencion,
			 T2.Glosa,
			 T2.ImporteSubTotal,
			 T2.ImporteIGV,
			 T2.ImporteTotal,
			 T2.EstadoEmision,
			 T2.FechaEmision,
			 T2.EstadoAtencion,
			 T2.FechaAtencionTotal,
			 T2.FechaAnulado,
			 T2.FechaCierre,
			 T2.IdUsuarioRegistra,
			 T2.FechaRegistra)
	  output inserted.IdOc INTO @TablaIdOc;

	  select @IdOC = IdOc from @TablaIdOc;
	  
	  --DETALLE ORDEN DE COMPRA

	  MERGE INTO Movimientos.OrdenDeCompraDetalle T1
      USING @tblDetalle T2
      ON T1.IdOc=T2.IdOc and T1.Item=T2.Item
      WHEN MATCHED THEN
      UPDATE SET T1.IdArticulo = T2.IdArticulo, 
				 T1.DescripcionArticulo = T2.DescripcionArticulo,
				 T1.UnidadMedida = T2.UnidadMedida,
				 T1.Cantidad = T2.Cantidad,
				 T1.CostoUnitario = T2.CostoUnitario,
				 T1.Total = T2.Total
      WHEN NOT MATCHED THEN
      INSERT(IdOc,
			 Item, 
			 IdArticulo,
			 DescripcionArticulo,
			 UnidadMedida,
			 Cantidad,
			 CostoUnitario,
			 Total)
	  VALUES(@IdOc, 
			 T2.Item,
			 T2.IdArticulo,
			 T2.DescripcionArticulo,
			 T2.UnidadMedida,
			 T2.Cantidad,
			 T2.CostoUnitario,
			 T2.Total)
	  output inserted.IdArticulo, inserted.CostoUnitario INTO @UpdPrecio;

	  --ACTUALIZA PRECIO DE COMPRA

	  MERGE INTO Maestros.Articulo T1
      USING @UpdPrecio T2
      ON T1.IdArticulo=T2.IdArticulo
      WHEN MATCHED THEN
      UPDATE SET T1.PrecioCompra = T2.Precio;

END


GO
/****** Object:  StoredProcedure [Movimientos].[usp_InsUpd_ResumenCierreDeCaja]    Script Date: 06/02/2025 20:01:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [Movimientos].[usp_InsUpd_ResumenCierreDeCaja]
		@tblDetalle Movimientos.ResumenCierreDeCajaType readonly
		
AS
BEGIN

	  SET NOCOUNT ON;

	  DECLARE @FECHAREGISTRO DATETIME
	  
	  SELECT @FECHAREGISTRO = GETDATE()
 
      MERGE INTO Movimientos.ResumenCierreDeCaja T1
      USING @tblDetalle T2
      ON T1.IdResumen=T2.IdResumen
      WHEN NOT MATCHED THEN
      INSERT(IdUsuario,
			 IdAlmacen, 
			 Fecha,
			 IdGrupo,
			 Grupo,
			 Detalle,
			 Monto,
			 FechaRegistro)
	  VALUES(T2.IdUsuario, 
			 T2.IdAlmacen,
			 T2.Fecha,
			 T2.IdGrupo,
			 T2.Grupo,
			 T2.Detalle,
			 T2.Monto,
			 @FECHAREGISTRO);
	  
END


GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Eventos CRUD' , @level0type=N'SCHEMA',@level0name=N'Auditoria', @level1type=N'TABLE',@level1name=N'Eventos'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "D"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 230
            End
            DisplayFlags = 280
            TopColumn = 4
         End
         Begin Table = "T"
            Begin Extent = 
               Top = 6
               Left = 268
               Bottom = 136
               Right = 448
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'Movimientos', @level1type=N'VIEW',@level1name=N'v_DetallePagoVenta_1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'Movimientos', @level1type=N'VIEW',@level1name=N'v_DetallePagoVenta_1'
GO