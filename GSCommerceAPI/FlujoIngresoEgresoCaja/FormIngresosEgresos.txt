using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using BusinessLayer;
using DataAccess;

namespace WinFrontEnd
{
    public partial class FormIngresosEgresos : Form
    {
        IngresosEgresosClass IngresoEgreso = new IngresosEgresosClass();
        List<v_ListadoIngresosEgresos_1> ListaIngresoEgreso = new List<v_ListadoIngresosEgresos_1>();
        AperturaCierreCajaClass AperturaCierre = new AperturaCierreCajaClass();
        List<AperturaCierreCaja> DatosAperturaCierre = new List<AperturaCierreCaja>();
        PersonalClass Personal = new PersonalClass();
        AlmacenClass ListaAlmacenes = new AlmacenClass();

        string Naturaleza;
        DateTime Fecha;
        DateTime Fin;
        decimal Total;
        string _Tipo;
        int _Almacen;
        int _Cajero;
        int LineaVerDetalle;

        public FormIngresosEgresos(string _naturaleza)
        {
            InitializeComponent();

            Naturaleza = _naturaleza;

            if (Naturaleza == "Ingreso")
            {

                this.Text = "Listado de Ingresos";
                TipoEgresoComboBox.Visible = false;
                //TipoIngresoComboBox.Location = new Point(109, 20);

                TipoIngresoComboBox.SelectedIndex = 0;
                TipoIngresoComboBox.Enabled = false;

            }
            else
            {

                this.Text = "Listado de Egresos";
                TipoEgresoComboBox.Location = new Point(TipoIngresoComboBox.Location.X, TipoIngresoComboBox.Location.Y);
                TipoIngresoComboBox.Visible = false;

                TipoEgresoComboBox.SelectedIndex = 0;
                TipoEgresoComboBox.Enabled = false;

            }

            AlmacenComboBox.Enabled = false;
            CajeroComboBox.Enabled = false;

        }

        private void FiltrosGroupBox_Enter(object sender, EventArgs e)
        {

        }

        private void FormIngresosEgresos_Load(object sender, EventArgs e)
        {
            Fecha = VariablesPublicas._FechaHoy;

            FechaMonthCalendar.SetDate(Fecha);

            LlenarCombos();

            _Tipo = "";
            _Almacen = 0;
            _Cajero = 0;

            if (VariablesPublicas._Cargo == "CAJERO")
            {

                AlmacenCheckBox.Checked = true;
                AlmacenCheckBox.Enabled = false;
                AlmacenComboBox.SelectedValue = VariablesPublicas._IdAlmacen;
                AlmacenComboBox.Enabled = false;

                CajeroCheckBox.Checked = true;
                CajeroCheckBox.Enabled = false;
                CajeroComboBox.SelectedValue = VariablesPublicas._IdUsuario;
                CajeroComboBox.Enabled = false;

            }

            LlenaGrilla();
        }

        private void LlenaGrilla()
        {
            ListaIngresoEgreso.Clear();

            ListaIngresoEgreso = IngresoEgreso.ListadoXFiltro(Naturaleza.Substring(0, 1), Fecha, _Tipo, _Almacen, _Cajero, Fin);

            IngresosEgresosBindingSource.DataSource = ListaIngresoEgreso;

            IngresosEgresosBindingSource.ResetBindings(false);

            CalculaTotales();

        }

        private void LlenarCombos()
        {

            AlmacenComboBox.DisplayMember = "Nombre";
            AlmacenComboBox.ValueMember = "IdAlmacen";
            AlmacenComboBox.DataSource = ListaAlmacenes.ObtenerListaActivos();

            CajeroComboBox.ValueMember = "IdUsuario";
            CajeroComboBox.DisplayMember = "Personal";
            CajeroComboBox.DataSource = Personal.ObtenerPersonalEIdUsuario("CAJERO");

            if (VariablesPublicas._Cargo != "ADMINISTRADOR") return;

            TipoEgresoComboBox.Items.Add("AFP-REPORTE");
            TipoEgresoComboBox.Items.Add("SUNAT-REPORTE");
            TipoEgresoComboBox.Items.Add("ALQUILER-REPORTE");
        }

        private void CalculaTotales()
        {
            Total = 0;

            TotalLabel.Text = "0.00";

            if (ListaIngresoEgreso.Count > 0)
            {
                
                foreach (v_ListadoIngresosEgresos_1 Linea in ListaIngresoEgreso)
                {
                    if (Linea.Estado == "E")
                    { 
                        Total = Total + Linea.Monto;
                    }

                }

            }

            TotalLabel.Text = Total.ToString("N2");

        }

        private void NuevoButton_Click(object sender, EventArgs e)
        {

            if (VerificaApertura(VariablesPublicas._IdUsuario, VariablesPublicas._IdAlmacen, Fecha))
            { 

                FormIngresoEgresoRegistro fier = new FormIngresoEgresoRegistro(Naturaleza, Fecha, true, 0);

                fier.ShowDialog();

                LlenaGrilla();

            }

            //if (fier.Prov != null)
            //{
            //    IdProv = fier.Prov.IdProveedor;
            //    RUCProveedorTextBox.Text = fier.Prov.RUC;
            //    NombreProveedorLabel.Text = fier.Prov.Nombre;
            //    DireccionProveedorLabel.Text = fier.Prov.Direccion;
            //    FormaPagoComboBox.Text = fier.Prov.FormaPago;
            //}

        }

        private Boolean VerificaApertura(int _idusuario, int _idalmacen, DateTime _fecha)
        {

            DatosAperturaCierre = AperturaCierre.ObtenerDatosApertura(_idusuario, _idalmacen, _fecha);

            if (DatosAperturaCierre.Count == 1)
            {
                if (DatosAperturaCierre[0].Estado != "C")
                    return true;
                else
                { 
                    MessageBox.Show("¡Caja se encuentra cerrada para la fecha: " + _fecha.ToString("dd/MM/yyyy") + "!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
            }
            else
            {

                MessageBox.Show("¡No hay apertura de caja para la fecha: " + _fecha.ToString("dd/MM/yyyy") + "!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;

            }
            
        }

        private void SalirButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void TipoCheckBox_CheckedChanged(object sender, EventArgs e)
        {

            if (TipoCheckBox.Checked == true)
            {
                
                if (Naturaleza == "Ingreso")
                {

                    TipoIngresoComboBox.Enabled = true;
                    _Tipo = TipoIngresoComboBox.Text;

                }
                else
                {

                    TipoEgresoComboBox.Enabled = true;
                    _Tipo = TipoEgresoComboBox.Text;

                }

            }
            else
            {
                _Tipo = "";
                if (Naturaleza == "Ingreso")
                {

                    TipoIngresoComboBox.Enabled = false;

                }
                else
                {

                    TipoEgresoComboBox.Enabled = false;

                }

            }

            LlenaGrilla();

        }

        private void AlmacenCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (AlmacenCheckBox.Checked == true)
            {

                AlmacenComboBox.Enabled = true;
                _Almacen = int.Parse(AlmacenComboBox.SelectedValue.ToString());

            }
            else
            {

                AlmacenComboBox.Enabled = false;
                _Almacen = 0;

            }

            LlenaGrilla();
        }

        private void CajeroCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (CajeroCheckBox.Checked == true)
            {

                CajeroComboBox.Enabled = true;
                _Cajero = int.Parse(CajeroComboBox.SelectedValue.ToString());

            }
            else
            {

                CajeroComboBox.Enabled = false;
                _Cajero = 0;

            }

            LlenaGrilla();
        }
               
        private void TipoIngresoComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (TipoIngresoComboBox.Enabled)
            { 
                _Tipo = TipoIngresoComboBox.Text;
                LlenaGrilla();
            }
            else
            {
                _Tipo = "";
            }
        }

        private void TipoEgresoComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (TipoEgresoComboBox.Enabled)
            {
                _Tipo = TipoEgresoComboBox.Text;
                LlenaGrilla();
            }
            else
            {
                _Tipo = "";
            }
        }

        private void AlmacenComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (AlmacenComboBox.Enabled)
            {
                _Almacen = int.Parse(AlmacenComboBox.SelectedValue.ToString());
                LlenaGrilla();
            }
            else
            {
                _Almacen = 0;
            }
        }

        private void CajeroComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (CajeroComboBox.Enabled)
            {
                _Cajero = int.Parse(CajeroComboBox.SelectedValue.ToString());
                LlenaGrilla();
            }
            else
            {
                _Cajero = 0;
            }
        }

        private void GrillaDataGridView_CellMouseUp(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right & e.RowIndex != -1 & e.ColumnIndex != -1)
            {
                GrillaDataGridView.Rows[e.RowIndex].Selected = true;
                GrillaDataGridView.CurrentCell = GrillaDataGridView[e.ColumnIndex, e.RowIndex];
                LineaVerDetalle = e.RowIndex;
                MenuContextMenuStrip.Show(GrillaDataGridView, e.Location);
                MenuContextMenuStrip.Show(Cursor.Position);
            }
        }

        private void verDetalleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (LineaVerDetalle != -1)
            {

                FormDetalles fdet = new FormDetalles("DetalleIngresoEgreso", ListaIngresoEgreso[LineaVerDetalle].IdIngresoEgreso, 0, 0, Fecha);

                fdet.ShowDialog();

            }
        }

        private void anularToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if(VariablesPublicas._Cargo == "ADMINISTRADOR")
            {
                if (VerificaApertura(ListaIngresoEgreso[LineaVerDetalle].IdUsuario, ListaIngresoEgreso[LineaVerDetalle].IdAlmacen, ListaIngresoEgreso[LineaVerDetalle].Fecha))
                {
                    if (ListaIngresoEgreso[LineaVerDetalle].Estado == "E") //E = EMITIDO
                    {
                        if (Naturaleza == "Ingreso" & ListaIngresoEgreso[LineaVerDetalle].Tipo == "TRANSFERENCIA")
                        {
                            MessageBox.Show("¡Debe anular la transferencia en los Egresos del Almacén de Origen!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                        //else if (Naturaleza == "Egreso" & ListaIngresoEgreso[LineaVerDetalle].Tipo == "TRANSFERENCIA" & VerificaApertura(ListaIngresoEgreso[LineaVerDetalle].IdCajeroDestino.Value, ListaIngresoEgreso[LineaVerDetalle].IdAlmacenDestino.Value, ListaIngresoEgreso[LineaVerDetalle].Fecha))
                        //{
                        //    MessageBox.Show("¡Caja destino cerrada, no puede anular la transferencia!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        //}
                        else
                        {
                            DialogResult result;

                            result = MessageBox.Show("¿Desea anular el " + Naturaleza + " seleccionado?", "S.G.V.", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                            if (result == System.Windows.Forms.DialogResult.Yes)
                            {
                                string men = IngresoEgreso.AnulaIngresoEgreso(ListaIngresoEgreso[LineaVerDetalle].IdIngresoEgreso);
                                switch (men)
                                {
                                    case "OK":
                                        MessageBox.Show("¡" + Naturaleza + " Anulado!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                        //ListaIngresoEgreso[LineaVerDetalle].Estado = "A";
                                        LlenaGrilla();
                                        //IngresosEgresosBindingSource.ResetBindings(false);
                                        //CalculaTotales();
                                        break;
                                    case "Error":
                                        MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: " + Naturaleza + " no existe en la BD", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                        break;
                                    default:
                                        MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: " + men, "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                        break;
                                }

                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("¡" + Naturaleza +  " Anulado, Verificar!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
                else
                {
                    MessageBox.Show("¡Caja cerrada para la fecha seleccionara, no se puede realizar esta operación!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }
            else
            {
                MessageBox.Show("¡No está autorizad@ para realizar esta operación. Consulte con Central!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void FormIngresosEgresos_Activated(object sender, EventArgs e)
        {
            LlenaGrilla();
        }

        private void modificarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (VariablesPublicas._Cargo == "CAJERO" || VariablesPublicas._Cargo == "ADMINISTRADOR")
            {
                if (VerificaApertura(ListaIngresoEgreso[LineaVerDetalle].IdUsuario, ListaIngresoEgreso[LineaVerDetalle].IdAlmacen, ListaIngresoEgreso[LineaVerDetalle].Fecha))
                {
                    if (ListaIngresoEgreso[LineaVerDetalle].Estado == "E") //E = EMITIDO
                    {
                        if (ListaIngresoEgreso[LineaVerDetalle].Tipo == "TRANSFERENCIA")
                        {
                            MessageBox.Show("¡Debe anular la transferencia en los Egresos del Almacén de Origen, no se puede modificar!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                        else
                        {
                            DialogResult result;

                            result = MessageBox.Show("¿Desea modificar el " + Naturaleza + " seleccionado?", "S.G.V.", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                            if (result == System.Windows.Forms.DialogResult.Yes)
                            {

                                FormIngresoEgresoRegistro fier = new FormIngresoEgresoRegistro(Naturaleza, FechaMonthCalendar.SelectionStart.Date, false, ListaIngresoEgreso[LineaVerDetalle].IdIngresoEgreso);

                                fier.ShowDialog();

                                //    string men = IngresoEgreso.AnulaIngresoEgreso(ListaIngresoEgreso[LineaVerDetalle].IdIngresoEgreso);
                                //    switch (men)
                                //    {
                                //        case "OK":
                                //            MessageBox.Show("¡" + Naturaleza + " Anulado!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                //            //ListaIngresoEgreso[LineaVerDetalle].Estado = "A";
                                //            LlenaGrilla();
                                //            //IngresosEgresosBindingSource.ResetBindings(false);
                                //            //CalculaTotales();
                                //            break;
                                //        case "Error":
                                //            MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: " + Naturaleza + " no existe en la BD", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                //            break;
                                //        default:
                                //            MessageBox.Show("¡Ha ocurrido un error, contactar a Soporte Técnico!: " + men, "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                //            break;
                                //    }

                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("¡" + Naturaleza + " Anulado, no se puede modificar!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
                else
                {
                    MessageBox.Show("¡Caja cerrada para la fecha seleccionara, no se puede realizar esta operación!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }
            else
            {
                MessageBox.Show("¡No está autorizad@ para realizar esta operación. Consulte con Central!", "S.G.V.", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void FechaMonthCalendar_DateChanged(object sender, DateRangeEventArgs e)
        {
            Fecha = FechaMonthCalendar.SelectionStart;
            Fin = FechaMonthCalendar.SelectionEnd;

            LlenaGrilla();
        }

    }
}
