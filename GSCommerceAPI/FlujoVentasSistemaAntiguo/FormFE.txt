using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using BusinessLayer;
using DataAccess;

namespace WinFrontEnd
{
    public partial class FormFE : Form
    {
        int seleccion = 0;
        AlmacenClass alm = new AlmacenClass();
        FEEntities DatosFE = new FEEntities();
        FE.FacturacionElectronica fe;
        string fecha = "";
        List<v_Comprobantes> _Comprobantes;
        string RUCEmpresa = "";
        string RSEmpresa = "";
        string CertificadoEmpresa = "";
        string PassCertificadoEmpresa = "";
        string FirmaEmpresa = "";
        string UsuarioSOL = "";
        string ClaveSOL = "";
        string DireccionEmpresa = "";
        string DPDEmpresa = "";
        List<int> listaFEDeclarados = new List<int>();
        bool cargando = false;

        public FormFE()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                DatosFE = new FEEntities();
                seleccion = 1;
                fecha = FechamonthCalendar.SelectionStart.ToString("dd/MM/yyyy");
                string tienda = ((Almacen)TiendacomboBox.SelectedItem).Nombre;
                _Comprobantes = DatosFE.v_Comprobantes.Where(c => c.Fecha == fecha && c.Numero.Substring(0, 1) == "F" && c.Tienda == tienda).ToList();
                ComprobantesdataGridView.DataSource = _Comprobantes;
                EnviadoscheckBox.Checked = false;
            }
            catch
            {
                MessageBox.Show("Se perdió la conexión con el servidor. Inténtelo nuevamente", "FE", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void button2_Click(object sender, EventArgs e)
        {
            try
            {
                DatosFE = new FEEntities();
                seleccion = 2;
                fecha = FechamonthCalendar.SelectionStart.ToString("dd/MM/yyyy");
                string tienda = ((Almacen)TiendacomboBox.SelectedItem).Nombre;
                _Comprobantes = DatosFE.v_Comprobantes.Where(c => c.Fecha == fecha && c.Numero.Substring(0, 1) == "B" && c.Tienda == tienda).ToList();
                ComprobantesdataGridView.DataSource = _Comprobantes;
                EnviadoscheckBox.Checked = false;
                Estatuslabel.Text = ComprobantesdataGridView.RowCount.ToString() + " Comprobantes para enviar";
            }
            catch
            {
                MessageBox.Show("Se perdió la conexión con el servidor. Inténtelo nuevamente", "FE", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void FormFE_Load(object sender, EventArgs e)
        {
            try
            {
                TiendacomboBox.DisplayMember = "Nombre";
                TiendacomboBox.ValueMember = "IdAlmacen";
                TiendacomboBox.DataSource = alm.ObtenerListaActivos();

                AlmacenEnviadoscomboBox.DisplayMember = "Nombre";
                AlmacenEnviadoscomboBox.ValueMember = "IdAlmacen";
                AlmacenEnviadoscomboBox.DataSource = alm.ObtenerListaActivos();

                cargando = true;
                TiendaOrganizadorcomboBox.DisplayMember = "Nombre";
                TiendaOrganizadorcomboBox.ValueMember = "IdAlmacen";
                TiendaOrganizadorcomboBox.DataSource = alm.ObtenerListaActivos();

                AñocomboBox.Text = DateTime.Now.Year.ToString();
                cargando = false;
                TipoDocEnviocomboBox.Text = "BOLETAS Y NOTAS";

                DatosFE = new FEEntities();
                List<v_DocumentosEnviadosSUNAT> docsEnviados = DatosFE.v_DocumentosEnviadosSUNAT.OrderByDescending(d => d.FechaEnvio).ToList();
                dataGridView1.DataSource = docsEnviados;

                Estatuslabel.Text = "Sin comprobantes para enviar";

            }
            catch
            {
                MessageBox.Show("Se perdió la conexión con el servidor. Inténtelo nuevamente", "FE", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void button5_Click(object sender, EventArgs e)
        {
            DatosFE = new FEEntities();
            fe = new FE.FacturacionElectronica(CertificadoEmpresa, PassCertificadoEmpresa, FirmaEmpresa);
            switch (seleccion)
            {
                case 1:
                    #region "Envio de Facturas y sus notas"
                    
                    string _xml = "";
                    if (ComprobantesdataGridView.CurrentRow.Cells[12].Value != null)
                        _xml = ComprobantesdataGridView.CurrentRow.Cells[12].Value.ToString();
                    string _numero = ComprobantesdataGridView.CurrentRow.Cells[3].Value.ToString();
                    string _xmlFile = Path.Combine(Environment.CurrentDirectory, @"Comprobantes", RUCEmpresa + "-01-" + _numero + ".xml");
                    int _idFE = Convert.ToInt32(ComprobantesdataGridView.CurrentRow.Cells[0].Value.ToString());
                    int _idVenta = Convert.ToInt32(ComprobantesdataGridView.CurrentRow.Cells[13].Value.ToString());
                    DateTime _fecha = Convert.ToDateTime(ComprobantesdataGridView.CurrentRow.Cells[4].Value.ToString());

                    if (_xml == "")
                    {
                        ComprobanteDeVentaClass v = new ComprobanteDeVentaClass();
                        ComprobanteDeVentaCabecera cb = v.ObtenerComprobanteXID(_idVenta);
                        List<ComprobanteDeVentaDetalle> de = v.ObteneDetalleComprobanteXID(_idVenta);
                        List<v_DetallePagoVenta_1> dep = v.DetallerPagoXComprobante(_idVenta);
                        UsuarioClass usr = new UsuarioClass();
                        PersonalClass per = new PersonalClass();
                        List<Personal> perso = per.ObtenerPersonalxId(cb.IdVendedor);

                        fe.Cliente = cb.Nombre.Replace('&', 'y');
                        fe.DescuentoTotal = 0;
                        fe.DireccionCliente = cb.Direccion;
                        fe.DireccionEmisor = DireccionEmpresa;

                        String[] _dpd = DPDEmpresa.Split('-');
                        fe.Distrito = _dpd[0].Trim();
                        fe.Provincia = _dpd[1].Trim();
                        fe.Departamento = _dpd[2].Trim();

                        fe.DocumentoCliente = cb.DNIRUC;
                        fe.Fecha = cb.Fecha;
                        fe.Hora = cb.Fecha.ToString("HH:mm:ss");
                        fe.IdCliente = cb.IdCliente.ToString();
                        fe.IGV = Convert.ToDouble(cb.IGV);
                        fe.NroDoc = cb.Numero.ToString().PadLeft(8, '0');
                        fe.RazonSocialEmisor = RSEmpresa;
                        fe.RucEmisor = RUCEmpresa;
                        fe.Serie = cb.Serie;
                        if (cb.IdTipoDocumento == 1)
                        {
                            fe.TipoDoc = "03";
                        }
                        else if (cb.IdTipoDocumento == 2)
                        {
                            fe.TipoDoc = "01";
                        }
                        else
                        {
                            fe.TipoDoc = "07";
                        }
                        fe.Total = Convert.ToDouble(cb.APagar);
                        fe.TotalenLetras = Numalet.ToCardinal(fe.Total);
                        fe.Ubigeo = VariablesPublicas._UBIGEO;

                        List<FE.FacturacionElectronica.Detalles> _detalles = new List<FE.FacturacionElectronica.Detalles>();
                        decimal _TotalDscto = 0;

                        foreach (ComprobanteDeVentaDetalle linea in de)
                        {
                            FE.FacturacionElectronica.Detalles _det = new FE.FacturacionElectronica.Detalles();

                            if (linea.Descripcion.Contains("DESC"))
                            {
                                _TotalDscto += linea.Total;
                            }
                            else
                            {
                                _det.Cantidad = linea.Cantidad;
                                _det.CodigoItem = linea.IdArticulo;
                                _det.DescripcionItem = linea.Descripcion.Replace('/', ' ').Replace('&', ' ');
                                _det.Id = linea.Item;

                                if (fe.IGV > 0)
                                {
                                    _det.IGV = (linea.Total * Convert.ToDecimal(VariablesPublicas._Igv)) /
                                               (1 + Convert.ToDecimal(VariablesPublicas._Igv));
                                    _det.PUconIGV = linea.Total / linea.Cantidad;
                                    _det.PUsinIGV = linea.Total / linea.Cantidad /
                                                    (1 + Convert.ToDecimal(VariablesPublicas._Igv));
                                }
                                else
                                {
                                    _det.IGV = 0;
                                    _det.PUconIGV = linea.Total / linea.Cantidad;
                                    _det.PUsinIGV = _det.PUconIGV;
                                }

                                _det.Total = linea.Total;

                                _detalles.Add(_det);
                            }
                        }
                        
                        /*RECLACULAR PRECIO UNITARIO SI ES QUE HUBIERA DSCTOS A APLICAR - 18-09-2021*/
                        if (_TotalDscto * -1 > 0)
                        {
                            foreach (var detalle in _detalles)
                            {
                                var peso = Convert.ToDouble(detalle.Total) / (fe.Total - Convert.ToDouble(_TotalDscto));
                                var dsctoItem = peso * Convert.ToDouble(_TotalDscto * -1);
                                var dsctoUnitario = dsctoItem / detalle.Cantidad;
                                var nvoPU = Convert.ToDouble(detalle.PUconIGV) - dsctoUnitario;
                                var nvoPUsinIGV = nvoPU;

                                if (fe.IGV > 0)
                                    nvoPUsinIGV = nvoPU / 1.18;

                                detalle.PUconIGV = Convert.ToDecimal(nvoPU);
                                detalle.PUsinIGV = Convert.ToDecimal(nvoPUsinIGV);

                                if (fe.IGV > 0)
                                    detalle.IGV = (detalle.PUsinIGV * Convert.ToDecimal(0.18)) *
                                                  Convert.ToDecimal(detalle.Cantidad);
                                else
                                    detalle.IGV = 0;

                                detalle.Total = detalle.PUconIGV * Convert.ToDecimal(detalle.Cantidad);
                            }
                        }
                        /****************************************************************************/

                        fe.DetallesComprobante = _detalles;
                        fe.DescuentoTotal = Convert.ToDouble(_TotalDscto * -1);

                        fe.Firmar(_xmlFile);
                    }

                    try
                    {
                        if (!File.Exists(_xmlFile))
                        {
                            XmlDocument docComprobante = new XmlDocument();

                            using (XmlReader _xmlReader = XmlReader.Create(new StringReader(_xml.ToString())))
                            {
                                docComprobante.Load(_xmlReader);
                            }

                            using (var memDoc = new MemoryStream())
                            {

                                using (var writer = XmlWriter.Create(memDoc,
                                    new XmlWriterSettings { Encoding = Encoding.GetEncoding("ISO-8859-1") }))
                                {
                                    docComprobante.WriteTo(writer);
                                }

                                using (FileStream file = new FileStream(_xmlFile, FileMode.Create, FileAccess.ReadWrite))
                                {
                                    memDoc.WriteTo(file);
                                }
                            }
                        }

                        Cursor.Current = Cursors.WaitCursor;
                        string[] resultado = fe.ValidarArchivo(_xmlFile, RUCEmpresa + UsuarioSOL, ClaveSOL, Convert.ToInt32(ComprobantesdataGridView.CurrentRow.Cells[0].Value), 0);
                        Cursor.Current = Cursors.Default;

                        Comprobantes venta = DatosFE.Comprobantes.Where(c => c.IdFE == _idFE).FirstOrDefault();
                        venta.EnviadoSUNAT = true;
                        venta.FechaEnvio = DateTime.Now;
                        venta.RespuestaSUNAT = resultado[2];
                        venta.FechaRespuestaSUNAT = DateTime.Now;
                        if (!string.IsNullOrEmpty(fe.Hash))
                            venta.Hash = fe.Hash;
                        venta.TicketSUNAT = resultado[0];
                        DatosFE.SaveChanges();

                        Estatuslabel.Text = "Proceso culminado";
                        MessageBox.Show("Rpta de Sunat = " + resultado[2] + ". Nro Ticket = " + resultado[0], "Factura enviada a SUNAT exitosamente", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        button1_Click(null, null);
                    }
                    catch(Exception ex)
                    {
                        MessageBox.Show("Servidor de SUNAT no disponible. Intente en 5 minutos por favor. " + ex.Message, "FE", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                    


                    //if (venta.TicketSUNAT == "0")
                    //{
                    //    //Enviar Documentos al Servidor
                    //    try
                    //    {
                    //        ClassFTPManager ftp = new ClassFTPManager();
                    //        FileInfo fiXML = new FileInfo(_xmlFile);
                    //        FileInfo fiZIP = new FileInfo(_xmlFile.Replace(".xml", ".zip"));

                    //        FileInfo RfiXML = new FileInfo("R-" + _xmlFile);
                    //        FileInfo RfiZIP = new FileInfo(_xmlFile.Replace(".xml", ".zip"));

                    //        string rptaXML = ftp.UploadFile("Comprobantes/" + fiXML.Name, File.ReadAllBytes(fiXML.FullName));
                    //        string rptaZIP = ftp.UploadFile("Comprobantes/" + fiZIP.Name, File.ReadAllBytes(fiZIP.FullName));
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        MessageBox.Show(ex.Message);
                    //    }
                    //}
                    #endregion
                    break;

                case 2:
                    #region "Envio de Boletas y sus notas"
                    int envio = 1;
                    Estatuslabel.Text = "Generando archivo Resumen XML. Leyendo comprobantes...";   
                    ProcesoprogressBar.Visible = true;
                    ProcesoprogressBar.Maximum = ComprobantesdataGridView.RowCount;
                    ProcesoprogressBar.Value = 0;

                    DateTime _hoy = DateTime.Now.Date;
                    DateTime _mañana = _hoy.AddDays(1);
                    if (DatosFE.Resumen.Any(r => r.FechaEnvio >= _hoy && r.FechaEnvio < _mañana))
                    {
                        Resumen _resumenhoy = DatosFE.Resumen.Where(r => r.FechaEnvio >= _hoy && r.FechaEnvio < _mañana).OrderByDescending(r => r.Correlativo).FirstOrDefault();
                        envio = _resumenhoy.Correlativo + 1;
                    }

                    string _xmlFileResumen = Path.Combine(Environment.CurrentDirectory, @"Comprobantes", RUCEmpresa + "-RC-" + DateTime.Now.ToString("yyyyMMdd") + "-" + envio.ToString() + ".xml");

                    CapaEntidad.Ventas.BeanResumenDiario _resumen = new CapaEntidad.Ventas.BeanResumenDiario();
                    _resumen.VERSION_UBL = "2.0";
                    _resumen.CUSTOMATIZACION = "1.1";
                    _resumen.NUMERO_RESUMEN = "RC-" + DateTime.Now.ToString("yyyyMMdd") + "-" + envio.ToString();
                    _resumen.FECHA_REFERENCIA = Convert.ToDateTime(fecha).ToString("yyyy-MM-dd");
                    _resumen.FECHA_EMISION = DateTime.Now.ToString("yyyy-MM-dd");
                    _resumen.RUC_EMPRESA = RUCEmpresa;
                    _resumen.RAZON_EMPRESA = RSEmpresa;
                    _resumen.TIPO_DOC_EMPRE = "6";

                    List<CapaEntidad.Ventas.BeanResumenDiario.Detalles> _detallesResumen = new List<CapaEntidad.Ventas.BeanResumenDiario.Detalles>();

                    int _cant = 0;

                    foreach (DataGridViewRow item in ComprobantesdataGridView.Rows)
                    {
                        if (_cant >= 500)
                        {
                            break;
                        }
                        else
                        {
                            int _idFE2 = Convert.ToInt32(item.Cells[0].Value.ToString());
                            listaFEDeclarados.Add(_idFE2);

                            Comprobantes _comprobante = DatosFE.Comprobantes.Where(c => c.IdFE == _idFE2).FirstOrDefault();
                            CapaEntidad.Ventas.BeanResumenDiario.Detalles _detalleResumen = new CapaEntidad.Ventas.BeanResumenDiario.Detalles();
                            if (_comprobante.EsNota)
                            {
                                NotaDeCreditoClass n = new NotaDeCreditoClass();
                                NotaDeCreditoCabecera cb = n.ObtieneNCxID(_comprobante.IdComprobante);
                                _detalleResumen.ID_CORRELATIVO = (item.Index + 1).ToString();
                                _detalleResumen.TIPO_DOCUMENTO = cb.TipoDocumentoVenta.Abreviatura;
                                _detalleResumen.DOCU_SERIE_NUM = item.Cells[3].Value.ToString();
                                _detalleResumen.RUC_CLIENTE = cb.DNIRUC;
                                if (cb.DNIRUC.Trim() == "99999999")
                                    _detalleResumen.TIPO_DOC_CLIENTE = "0";
                                else
                                {
                                    if (cb.Cliente.TipoDocumento.Trim() == "DNI")
                                        _detalleResumen.TIPO_DOC_CLIENTE = "1";
                                    else
                                        _detalleResumen.TIPO_DOC_CLIENTE = "2";
                                }
                                _detalleResumen.STATUS = "1";
                                _detalleResumen.MONEDA_LETRA = "PEN";
                                _detalleResumen.TOTAL_VENTA = Convert.ToDecimal(cb.AFavor).ToString("F2");
                                _detalleResumen.TOTAL_GRAVADA = Convert.ToDecimal(cb.AFavor - cb.IGV).ToString("F2");
                                _detalleResumen.INSTRUCTION_ID = "01";
                                _detalleResumen.IGV_GRAV = Convert.ToDecimal(cb.IGV).ToString("F2");
                                _detalleResumen.COD_TIPO_NOTA = "03";
                                _detalleResumen.NRO_COMPROBANTE = cb.Referencia;
                            }
                            else
                            {
                                ComprobanteDeVentaClass v = new ComprobanteDeVentaClass();
                                ComprobanteDeVentaCabecera cb = v.ObtenerComprobanteXID(Convert.ToInt32(item.Cells[13].Value));
                                _detalleResumen.ID_CORRELATIVO = (item.Index + 1).ToString();
                                _detalleResumen.TIPO_DOCUMENTO = cb.TipoDocumentoVenta.Abreviatura;
                                _detalleResumen.DOCU_SERIE_NUM = item.Cells[3].Value.ToString();
                                _detalleResumen.RUC_CLIENTE = cb.DNIRUC;
                                if (cb.DNIRUC.Trim() == "99999999")
                                    _detalleResumen.TIPO_DOC_CLIENTE = "0";
                                else
                                {
                                    if (cb.Cliente.TipoDocumento.Trim() == "DNI")
                                        _detalleResumen.TIPO_DOC_CLIENTE = "1";
                                    else
                                        _detalleResumen.TIPO_DOC_CLIENTE = "6";
                                }
                                _detalleResumen.STATUS = "1";
                                _detalleResumen.MONEDA_LETRA = "PEN";
                                _detalleResumen.TOTAL_VENTA = Convert.ToDecimal(cb.APagar).ToString("F2");
                                _detalleResumen.TOTAL_GRAVADA = Convert.ToDecimal(cb.APagar - cb.IGV).ToString("F2");
                                _detalleResumen.INSTRUCTION_ID = "01";
                                _detalleResumen.IGV_GRAV = Convert.ToDecimal(cb.IGV).ToString("F2");
                            }

                            _cant += 1;
                            _detallesResumen.Add(_detalleResumen);
                            Estatuslabel.Text = "Generando archivo Resumen XML. Leyendo comprobantes: " + (item.Index + 1).ToString() + " de " + ComprobantesdataGridView.RowCount.ToString();
                            ProcesoprogressBar.Value = item.Index + 1;
                        }
                    }

                    Estatuslabel.Text = "Firmando Documento...";

                    _resumen.DetallesResumen = _detallesResumen;
                    fe.FirmarResumenDiario(_xmlFileResumen, _resumen);

                    try
                    {
                        Estatuslabel.Text = "Enviando a SUNAT...";                        
                        Cursor.Current = Cursors.WaitCursor;
                        string[] rptaResumenSunat = fe.EnviarResumenDiario(_xmlFileResumen, RUCEmpresa + UsuarioSOL, ClaveSOL, "", 0, 0, "");
                        Cursor.Current = Cursors.Default;

                        if (rptaResumenSunat[1].Contains("Error"))
                        {
                            MessageBox.Show(rptaResumenSunat[1]);
                        }
                        else
                        {
                            Estatuslabel.Text = "Grabando Resultados...";

                            Cursor.Current = Cursors.WaitCursor;
                            var query = from c in DatosFE.Comprobantes
                                        where listaFEDeclarados.Contains(c.IdFE)
                                        select c;
                            foreach (Comprobantes c in query) {
                                c.EnviadoSUNAT = true;
                                c.FechaEnvio = DateTime.Now;
                                c.RespuestaSUNAT = rptaResumenSunat[1];
                                c.FechaRespuestaSUNAT = DateTime.Now;
                                c.TicketSUNAT = rptaResumenSunat[0];                                
                            }
                            DatosFE.SaveChanges();

                            DatosFE = new FEEntities();
                            Resumen _rc = new Resumen();
                            _rc.CantidadDocumentos = _cant;
                            _rc.Correlativo = envio;
                            _rc.DocInicio = ComprobantesdataGridView.Rows[0].Cells[3].Value.ToString();
                            _rc.DocFin = ComprobantesdataGridView.Rows[_cant - 1].Cells[3].Value.ToString();
                            _rc.EnvioSUNAT = true;
                            _rc.FechaEnvio = DateTime.Now;
                            _rc.FechaReferencia = Convert.ToDateTime(fecha);
                            _rc.FechaRespuestaSUNAT = DateTime.Now;
                            if (!string.IsNullOrEmpty(fe.Hash))
                                _rc.Hash = fe.Hash;
                            _rc.NombreArchivo = RUCEmpresa + "-RC-" + DateTime.Now.ToString("yyyyMMdd") + "-" + envio.ToString() + ".xml";
                            _rc.RespuestaSUNAT = rptaResumenSunat[1];
                            _rc.TicketSUNAT = rptaResumenSunat[0];
                            _rc.Tienda = ((Almacen)TiendacomboBox.SelectedItem).Nombre;
                            DatosFE.Resumen.Add(_rc);
                            DatosFE.SaveChanges();
                            Cursor.Current = Cursors.Default;

                            Estatuslabel.Text = "Proceso culminado";
                            listaFEDeclarados.Clear();
                            MessageBox.Show("Rpta de Sunat = " + rptaResumenSunat[1] + ". Nro Ticket = " + rptaResumenSunat[0], "Resumen enviado a SUNAT exitosamente", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            button2_Click(null, null);

                            ProcesoprogressBar.Visible = false;

                        }

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error: " + ex.Message, "FE", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    #endregion

                    break;
                case 3:
                    #region "Envio de Facturas Manuales"

                    _xml = "";
                    if (ComprobantesdataGridView.CurrentRow.Cells[12].Value != null)
                        _xml = ComprobantesdataGridView.CurrentRow.Cells[12].Value.ToString();
                    _numero = ComprobantesdataGridView.CurrentRow.Cells[3].Value.ToString();
                    _xmlFile = Path.Combine(Environment.CurrentDirectory, @"Comprobantes", RUCEmpresa + "-01-" + _numero + ".xml");
                    _idFE = Convert.ToInt32(ComprobantesdataGridView.CurrentRow.Cells[0].Value.ToString());
                    _idVenta = Convert.ToInt32(ComprobantesdataGridView.CurrentRow.Cells[13].Value.ToString());
                    _fecha = Convert.ToDateTime(ComprobantesdataGridView.CurrentRow.Cells[4].Value.ToString());

                    if (_xml == "")
                    {
                        ComprobanteDeVentaClass v = new ComprobanteDeVentaClass();
                        ComprobanteDeVentaCabecera cb = v.ObtenerComprobanteXID(_idVenta);
                        List<ComprobanteDeVentaDetalle> de = v.ObteneDetalleComprobanteXID(_idVenta);
                        List<v_DetallePagoVenta_1> dep = v.DetallerPagoXComprobante(_idVenta);
                        UsuarioClass usr = new UsuarioClass();
                        PersonalClass per = new PersonalClass();
                        List<Personal> perso = per.ObtenerPersonalxId(cb.IdVendedor);

                        fe.Cliente = cb.Nombre.Replace('&', 'y');
                        fe.DescuentoTotal = 0;
                        fe.DireccionCliente = cb.Direccion;
                        fe.DireccionEmisor = DireccionEmpresa;

                        String[] _dpd = DPDEmpresa.Split('-');
                        fe.Distrito = _dpd[0].Trim();
                        fe.Provincia = _dpd[1].Trim();
                        fe.Departamento = _dpd[2].Trim();

                        fe.DocumentoCliente = cb.DNIRUC;
                        fe.Fecha = cb.Fecha;
                        fe.Hora = cb.Fecha.ToString("HH:mm:ss");
                        fe.IdCliente = cb.IdCliente.ToString();
                        fe.IGV = Convert.ToDouble(cb.IGV);
                        fe.NroDoc = cb.Numero.ToString().PadLeft(8, '0');
                        fe.RazonSocialEmisor = RSEmpresa;
                        fe.RucEmisor = RUCEmpresa;
                        fe.Serie = cb.Serie;
                        if (cb.IdTipoDocumento == 1 || cb.IdTipoDocumento == 4)
                        {
                            fe.TipoDoc = "03";
                        }
                        else if (cb.IdTipoDocumento == 2 || cb.IdTipoDocumento == 5)
                        {
                            fe.TipoDoc = "01";
                        }
                        else
                        {
                            fe.TipoDoc = "07";
                        }
                        fe.Total = Convert.ToDouble(cb.APagar);
                        fe.TotalenLetras = Numalet.ToCardinal(fe.Total);
                        fe.Ubigeo = VariablesPublicas._UBIGEO;

                        List<FE.FacturacionElectronica.Detalles> _detalles = new List<FE.FacturacionElectronica.Detalles>();
                        decimal _TotalDscto = 0;

                        foreach (ComprobanteDeVentaDetalle linea in de)
                        {
                            FE.FacturacionElectronica.Detalles _det = new FE.FacturacionElectronica.Detalles();

                            if (linea.Descripcion.Contains("DESC"))
                            {
                                _TotalDscto += linea.Total;
                            }
                            else
                            {
                                _det.Cantidad = linea.Cantidad;
                                _det.CodigoItem = linea.IdArticulo;
                                _det.DescripcionItem = linea.Descripcion.Replace('/', ' ').Replace('&', ' ');
                                _det.Id = linea.Item;
                                _det.IGV = (linea.Total * Convert.ToDecimal(VariablesPublicas._Igv)) / (1 + Convert.ToDecimal(VariablesPublicas._Igv));
                                _det.PUconIGV = linea.Total / linea.Cantidad;
                                _det.PUsinIGV = linea.Total / linea.Cantidad / (1 + Convert.ToDecimal(VariablesPublicas._Igv));
                                _det.Total = linea.Total;

                                _detalles.Add(_det);
                            }
                        }

                        fe.DetallesComprobante = _detalles;
                        fe.DescuentoTotal = Convert.ToDouble(_TotalDscto * -1);

                        fe.Firmar(_xmlFile);
                    }

                    try
                    {
                        if (!File.Exists(_xmlFile))
                        {
                            XmlDocument docComprobante = new XmlDocument();

                            using (XmlReader _xmlReader = XmlReader.Create(new StringReader(_xml.ToString())))
                            {
                                docComprobante.Load(_xmlReader);
                            }

                            using (var memDoc = new MemoryStream())
                            {

                                using (var writer = XmlWriter.Create(memDoc,
                                    new XmlWriterSettings { Encoding = Encoding.GetEncoding("ISO-8859-1") }))
                                {
                                    docComprobante.WriteTo(writer);
                                }

                                using (FileStream file = new FileStream(_xmlFile, FileMode.Create, FileAccess.ReadWrite))
                                {
                                    memDoc.WriteTo(file);
                                }
                            }
                        }

                        Cursor.Current = Cursors.WaitCursor;
                        string[] resultado = fe.ValidarArchivo(_xmlFile, RUCEmpresa + UsuarioSOL, ClaveSOL, Convert.ToInt32(ComprobantesdataGridView.CurrentRow.Cells[0].Value), 0);
                        Cursor.Current = Cursors.Default;

                        Comprobantes venta = DatosFE.Comprobantes.Where(c => c.IdFE == _idFE).FirstOrDefault();
                        venta.EnviadoSUNAT = true;
                        venta.FechaEnvio = DateTime.Now;
                        venta.RespuestaSUNAT = resultado[2];
                        venta.FechaRespuestaSUNAT = DateTime.Now;
                        if (!string.IsNullOrEmpty(fe.Hash))
                            venta.Hash = fe.Hash;
                        venta.TicketSUNAT = resultado[0];
                        DatosFE.SaveChanges();

                        Estatuslabel.Text = "Proceso culminado";
                        MessageBox.Show("Rpta de Sunat = " + resultado[2] + ". Nro Ticket = " + resultado[0], "Factura enviada a SUNAT exitosamente", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        button1_Click(null, null);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Servidor de SUNAT no disponible. Intente en 5 minutos por favor. " + ex.Message, "FE", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }

                    #endregion

                    break;
                case 4:
                    #region "Envio de Boletas Manuales"
                    envio = 1;
                    Estatuslabel.Text = "Generando archivo Resumen XML. Leyendo comprobantes...";
                    ProcesoprogressBar.Visible = true;
                    ProcesoprogressBar.Maximum = ComprobantesdataGridView.RowCount;
                    ProcesoprogressBar.Value = 0;

                    _hoy = DateTime.Now.Date;
                    _mañana = _hoy.AddDays(1);
                    if (DatosFE.Resumen.Any(r => r.FechaEnvio >= _hoy && r.FechaEnvio < _mañana))
                    {
                        Resumen _resumenhoy = DatosFE.Resumen.Where(r => r.FechaEnvio >= _hoy && r.FechaEnvio < _mañana).OrderByDescending(r => r.Correlativo).FirstOrDefault();
                        envio = _resumenhoy.Correlativo + 1;
                    }

                    _xmlFileResumen = Path.Combine(Environment.CurrentDirectory, @"Comprobantes", RUCEmpresa + "-RC-" + DateTime.Now.ToString("yyyyMMdd") + "-" + envio.ToString() + ".xml");

                    _resumen = new CapaEntidad.Ventas.BeanResumenDiario();
                    _resumen.VERSION_UBL = "2.0";
                    _resumen.CUSTOMATIZACION = "1.1";
                    _resumen.NUMERO_RESUMEN = "RC-" + DateTime.Now.ToString("yyyyMMdd") + "-" + envio.ToString();
                    _resumen.FECHA_REFERENCIA = Convert.ToDateTime(fecha).ToString("yyyy-MM-dd");
                    _resumen.FECHA_EMISION = DateTime.Now.ToString("yyyy-MM-dd");
                    _resumen.RUC_EMPRESA = RUCEmpresa;
                    _resumen.RAZON_EMPRESA = RSEmpresa;
                    _resumen.TIPO_DOC_EMPRE = "6";

                    _detallesResumen = new List<CapaEntidad.Ventas.BeanResumenDiario.Detalles>();

                    _cant = 0;

                    foreach (DataGridViewRow item in ComprobantesdataGridView.Rows)
                    {
                        if (_cant >= 500)
                        {
                            break;
                        }
                        else
                        {
                            int _idFE2 = Convert.ToInt32(item.Cells[0].Value.ToString());
                            listaFEDeclarados.Add(_idFE2);

                            Comprobantes _comprobante = DatosFE.Comprobantes.Where(c => c.IdFE == _idFE2).FirstOrDefault();
                            CapaEntidad.Ventas.BeanResumenDiario.Detalles _detalleResumen = new CapaEntidad.Ventas.BeanResumenDiario.Detalles();
                            if (_comprobante.EsNota)
                            {
                                NotaDeCreditoClass n = new NotaDeCreditoClass();
                                NotaDeCreditoCabecera cb = n.ObtieneNCxID(_comprobante.IdComprobante);
                                _detalleResumen.ID_CORRELATIVO = (item.Index + 1).ToString();
                                _detalleResumen.TIPO_DOCUMENTO = cb.TipoDocumentoVenta.Abreviatura;
                                _detalleResumen.DOCU_SERIE_NUM = item.Cells[3].Value.ToString();
                                _detalleResumen.RUC_CLIENTE = cb.DNIRUC;
                                if (cb.DNIRUC.Trim() == "99999999")
                                    _detalleResumen.TIPO_DOC_CLIENTE = "0";
                                else
                                {
                                    if (cb.Cliente.TipoDocumento.Trim() == "DNI")
                                        _detalleResumen.TIPO_DOC_CLIENTE = "1";
                                    else
                                        _detalleResumen.TIPO_DOC_CLIENTE = "2";
                                }
                                _detalleResumen.STATUS = "1";
                                _detalleResumen.MONEDA_LETRA = "PEN";
                                _detalleResumen.TOTAL_VENTA = Convert.ToDecimal(cb.AFavor).ToString("F2");
                                _detalleResumen.TOTAL_GRAVADA = Convert.ToDecimal(cb.AFavor - cb.IGV).ToString("F2");
                                _detalleResumen.INSTRUCTION_ID = "01";
                                _detalleResumen.IGV_GRAV = Convert.ToDecimal(cb.IGV).ToString("F2");
                                _detalleResumen.COD_TIPO_NOTA = "03";
                                _detalleResumen.NRO_COMPROBANTE = cb.Referencia;
                            }
                            else
                            {
                                ComprobanteDeVentaClass v = new ComprobanteDeVentaClass();
                                ComprobanteDeVentaCabecera cb = v.ObtenerComprobanteXID(Convert.ToInt32(item.Cells[13].Value));
                                _detalleResumen.ID_CORRELATIVO = (item.Index + 1).ToString();
                                _detalleResumen.TIPO_DOCUMENTO = cb.TipoDocumentoVenta.Abreviatura;
                                _detalleResumen.DOCU_SERIE_NUM = item.Cells[3].Value.ToString();
                                _detalleResumen.RUC_CLIENTE = cb.DNIRUC;
                                if (cb.DNIRUC.Trim() == "99999999")
                                    _detalleResumen.TIPO_DOC_CLIENTE = "0";
                                else
                                {
                                    if (cb.Cliente.TipoDocumento.Trim() == "DNI")
                                        _detalleResumen.TIPO_DOC_CLIENTE = "1";
                                    else
                                        _detalleResumen.TIPO_DOC_CLIENTE = "2";
                                }
                                _detalleResumen.STATUS = "1";
                                _detalleResumen.MONEDA_LETRA = "PEN";
                                _detalleResumen.TOTAL_VENTA = Convert.ToDecimal(cb.APagar).ToString("F2");
                                _detalleResumen.TOTAL_GRAVADA = Convert.ToDecimal(cb.APagar - cb.IGV).ToString("F2");
                                _detalleResumen.INSTRUCTION_ID = "01";
                                _detalleResumen.IGV_GRAV = Convert.ToDecimal(cb.IGV).ToString("F2");
                            }

                            _cant += 1;
                            _detallesResumen.Add(_detalleResumen);
                            Estatuslabel.Text = "Generando archivo Resumen XML. Leyendo comprobantes: " + (item.Index + 1).ToString() + " de " + ComprobantesdataGridView.RowCount.ToString();
                            ProcesoprogressBar.Value = item.Index + 1;
                        }
                    }

                    Estatuslabel.Text = "Firmando Documento...";

                    _resumen.DetallesResumen = _detallesResumen;
                    fe.FirmarResumenDiario(_xmlFileResumen, _resumen);

                    try
                    {
                        Estatuslabel.Text = "Enviando a SUNAT...";
                        Cursor.Current = Cursors.WaitCursor;
                        string[] rptaResumenSunat = fe.EnviarResumenDiario(_xmlFileResumen, RUCEmpresa + UsuarioSOL, ClaveSOL, "", 0, 0, "");
                        Cursor.Current = Cursors.Default;

                        if (rptaResumenSunat[1].Contains("Error"))
                        {
                            MessageBox.Show(rptaResumenSunat[1]);
                        }
                        else
                        {
                            Estatuslabel.Text = "Grabando Resultados...";

                            Cursor.Current = Cursors.WaitCursor;
                            var query = from c in DatosFE.Comprobantes
                                        where listaFEDeclarados.Contains(c.IdFE)
                                        select c;
                            foreach (Comprobantes c in query)
                            {
                                c.EnviadoSUNAT = true;
                                c.FechaEnvio = DateTime.Now;
                                c.RespuestaSUNAT = rptaResumenSunat[1];
                                c.FechaRespuestaSUNAT = DateTime.Now;
                                c.TicketSUNAT = rptaResumenSunat[0];
                            }
                            DatosFE.SaveChanges();

                            DatosFE = new FEEntities();
                            Resumen _rc = new Resumen();
                            _rc.CantidadDocumentos = _cant;
                            _rc.Correlativo = envio;
                            _rc.DocInicio = ComprobantesdataGridView.Rows[0].Cells[3].Value.ToString();
                            _rc.DocFin = ComprobantesdataGridView.Rows[_cant - 1].Cells[3].Value.ToString();
                            _rc.EnvioSUNAT = true;
                            _rc.FechaEnvio = DateTime.Now;
                            _rc.FechaReferencia = Convert.ToDateTime(fecha);
                            _rc.FechaRespuestaSUNAT = DateTime.Now;
                            if (!string.IsNullOrEmpty(fe.Hash))
                                _rc.Hash = fe.Hash;
                            _rc.NombreArchivo = RUCEmpresa + "-RC-" + DateTime.Now.ToString("yyyyMMdd") + "-" + envio.ToString() + ".xml";
                            _rc.RespuestaSUNAT = rptaResumenSunat[1];
                            _rc.TicketSUNAT = rptaResumenSunat[0];
                            _rc.Tienda = ((Almacen)TiendacomboBox.SelectedItem).Nombre;
                            DatosFE.Resumen.Add(_rc);
                            DatosFE.SaveChanges();
                            Cursor.Current = Cursors.Default;

                            Estatuslabel.Text = "Proceso culminado";
                            MessageBox.Show("Rpta de Sunat = " + rptaResumenSunat[1] + ". Nro Ticket = " + rptaResumenSunat[0], "Resumen enviado a SUNAT exitosamente", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            button2_Click(null, null);

                            ProcesoprogressBar.Visible = false;

                        }

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error: " + ex.Message, "FE", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    #endregion

                    break;
            }

        }

        private void button4_Click(object sender, EventArgs e)
        {
            seleccion = 3;
        }

        private void EnviadoscheckBox_CheckedChanged(object sender, EventArgs e)
        {            
            if (_Comprobantes != null && _Comprobantes.Count > 0)
            {
                button5.Visible = EnviadoscheckBox.Checked;
                if (EnviadoscheckBox.Checked)
                {
                    try
                    {
                        List<v_Comprobantes> _ComprobantesEnviados = _Comprobantes.Where(t => t.RespuestaSUNAT.Contains("Codigo Valida: 0")).ToList();
                        List<v_Comprobantes> _ComprobantesSinEnviar = _Comprobantes.Except(_ComprobantesEnviados).ToList();
                        ComprobantesdataGridView.DataSource = _ComprobantesSinEnviar;
                        if (_ComprobantesSinEnviar.Count == 0)
                        {
                            button5.Visible = !EnviadoscheckBox.Checked;
                        }
                    }
                    catch(NullReferenceException ex)
                    {

                    }

                }
                else
                {
                    ComprobantesdataGridView.DataSource = _Comprobantes;
                }
            }
        }

        private void TiendacomboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            RUCEmpresa = ((Almacen)TiendacomboBox.SelectedItem).RUC;
            RSEmpresa = ((Almacen)TiendacomboBox.SelectedItem).RazonSocial;
            FirmaEmpresa = "Sign" + ((Almacen)TiendacomboBox.SelectedItem).Abreviacion + "byITXin";
            CertificadoEmpresa = ((Almacen)TiendacomboBox.SelectedItem).Certificado;
            PassCertificadoEmpresa = ((Almacen)TiendacomboBox.SelectedItem).PasswordCertificado;
            UsuarioSOL = ((Almacen)TiendacomboBox.SelectedItem).UsuarioSOL;
            ClaveSOL = ((Almacen)TiendacomboBox.SelectedItem).ClaveSOL;
            DireccionEmpresa = ((Almacen)TiendacomboBox.SelectedItem).Direccion;
            DPDEmpresa = ((Almacen)TiendacomboBox.SelectedItem).DPD;
        }

        private void vComprobantesBindingSource_CurrentChanged(object sender, EventArgs e)
        {

        }

        private void button7_Click(object sender, EventArgs e)
        {
            DatosFE = new FEEntities();
            List<v_DocumentosEnviadosSUNAT> docsEnviados;

            string tienda = "";
            string _fechaEnvio = "";
            DateTime _fechaEnvioInicio = DateTime.Now;
            DateTime _fechaEnvioFin = DateTime.Now;

            try
            {
                _fechaEnvio = EnviosmonthCalendar.SelectionStart.ToString("dd/MM/yyyy");
                _fechaEnvioInicio = Convert.ToDateTime(_fechaEnvio + " 00:00:00");
                _fechaEnvioFin = Convert.ToDateTime(_fechaEnvio + " 23:59:59");
                tienda = ((Almacen)AlmacenEnviadoscomboBox.SelectedItem).Nombre;
            }
            catch
            {

            }

            if (TiendaEnviocheckBox.Checked)
            {
                if (DiaEnviocheckBox.Checked)
                {
                    docsEnviados = DatosFE.v_DocumentosEnviadosSUNAT.Where(c => c.FechaEnvio >= _fechaEnvioInicio && c.FechaEnvio <= _fechaEnvioFin && c.Tienda == tienda).OrderByDescending(d => d.FechaEnvio).ToList();
                }
                else
                {
                    docsEnviados = DatosFE.v_DocumentosEnviadosSUNAT.Where(c => c.Tienda == tienda).OrderByDescending(d => d.FechaEnvio).ToList();
                }
            }
            else
            {
                if (DiaEnviocheckBox.Checked)
                {
                    docsEnviados = DatosFE.v_DocumentosEnviadosSUNAT.Where(c => c.FechaEnvio >= _fechaEnvioInicio && c.FechaEnvio <= _fechaEnvioFin).OrderByDescending(d => d.FechaEnvio).ToList();
                }
                else
                {
                    docsEnviados = DatosFE.v_DocumentosEnviadosSUNAT.OrderByDescending(d => d.FechaEnvio).ToList();
                }
            }


            dataGridView1.DataSource = docsEnviados;
        }

        private void TiendaEnviocheckBox_CheckedChanged(object sender, EventArgs e)
        {
            AlmacenEnviadoscomboBox.Enabled = TiendaEnviocheckBox.Checked;
        }

        private void DiaEnviocheckBox_CheckedChanged(object sender, EventArgs e)
        {
            EnviosmonthCalendar.Enabled = DiaEnviocheckBox.Checked;
        }

        private void AñocomboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!cargando)
            {
                EnviosmonthCalendar.SelectionRange.Start = Convert.ToDateTime("01/01/" + AñocomboBox.Text);
                DatosFE = new FEEntities();
                var _dt = DatosFE.usp_get_DiasPendientesEnvio(TipoDocEnviocomboBox.SelectedIndex + 1, Convert.ToInt16(TiendaOrganizadorcomboBox.SelectedValue), Convert.ToInt16(AñocomboBox.Text));

                List<DateTime> _fechas = new List<DateTime>();

                foreach (var item in _dt)
                {
                    _fechas.Add(Convert.ToDateTime(item.Fecha));
                }

                if (_fechas.Count() != 0)
                {
                    DateTime[] boldDates = new DateTime[_fechas.Count()];
                    int x = 0;

                    foreach (var item in _fechas)
                    {
                        boldDates[x] = Convert.ToDateTime(item);
                        x++;
                    }

                    OrganizadormonthCalendar.AnnuallyBoldedDates = boldDates;
                }
                else
                {
                    OrganizadormonthCalendar.AnnuallyBoldedDates = null;
                }
            }
        }

        private void TiendaOrganizadorcomboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!cargando)
            {
                DatosFE = new FEEntities();
                var _dt = DatosFE.usp_get_DiasPendientesEnvio(TipoDocEnviocomboBox.SelectedIndex + 1, Convert.ToInt16(TiendaOrganizadorcomboBox.SelectedValue), Convert.ToInt16(AñocomboBox.Text));

                List<DateTime> _fechas = new List<DateTime>();

                foreach (var item in _dt)
                {
                    _fechas.Add(Convert.ToDateTime(item.Fecha));
                }

                if (_fechas.Count() != 0)
                {
                    DateTime[] boldDates = new DateTime[_fechas.Count()];
                    int x = 0;

                    foreach (var item in _fechas)
                    {
                        boldDates[x] = Convert.ToDateTime(item);
                        x++;
                    }

                    OrganizadormonthCalendar.AnnuallyBoldedDates = boldDates;
                }
                else
                {
                    OrganizadormonthCalendar.AnnuallyBoldedDates = null;
                }
            }
        }

        private void TipoDocEnviocomboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!cargando)
            {
                DatosFE = new FEEntities();
                var _dt = DatosFE.usp_get_DiasPendientesEnvio(TipoDocEnviocomboBox.SelectedIndex + 1, Convert.ToInt16(TiendaOrganizadorcomboBox.SelectedValue), Convert.ToInt16(AñocomboBox.Text));

                List<DateTime> _fechas = new List<DateTime>();

                foreach (var item in _dt)
                {
                    _fechas.Add(Convert.ToDateTime(item.Fecha));
                }

                if (_fechas.Count() != 0)
                {
                    DateTime[] boldDates = new DateTime[_fechas.Count()];
                    int x = 0;

                    foreach (var item in _fechas)
                    {
                        boldDates[x] = Convert.ToDateTime(item);
                        x++;
                    }

                    OrganizadormonthCalendar.AnnuallyBoldedDates = boldDates;
                }
                else
                {
                    OrganizadormonthCalendar.AnnuallyBoldedDates = null;
                }
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            try
            {
                DatosFE = new FEEntities();
                seleccion = 3;
                fecha = FechamonthCalendar.SelectionStart.ToString("dd/MM/yyyy");
                string tienda = ((Almacen)TiendacomboBox.SelectedItem).Nombre;
                _Comprobantes = DatosFE.v_Comprobantes.Where(c =>
                    c.Fecha == fecha && c.Numero.Substring(0, 1) != "F" && c.Numero.Substring(0, 1) != "B" &&
                    c.Tienda == tienda && c.TipoDoc.Contains("FACTURA")).ToList();
                ComprobantesdataGridView.DataSource = _Comprobantes;
                EnviadoscheckBox.Checked = false;
            }
            catch
            {
                MessageBox.Show("Se perdió la conexión con el servidor. Inténtelo nuevamente", "FE", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void BoletasManualesbutton_Click(object sender, EventArgs e)
        {
            try
            {
                DatosFE = new FEEntities();
                seleccion = 4;
                fecha = FechamonthCalendar.SelectionStart.ToString("dd/MM/yyyy");
                string tienda = ((Almacen)TiendacomboBox.SelectedItem).Nombre;
                _Comprobantes = DatosFE.v_Comprobantes.Where(c =>
                    c.Fecha == fecha && c.Numero.Substring(0, 1) != "F" && c.Numero.Substring(0, 1) != "B" &&
                    c.Tienda == tienda && c.TipoDoc.Contains("BOLETA")).ToList();
                ComprobantesdataGridView.DataSource = _Comprobantes;
                EnviadoscheckBox.Checked = false;
            }
            catch
            {
                MessageBox.Show("Se perdió la conexión con el servidor. Inténtelo nuevamente", "FE", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}
