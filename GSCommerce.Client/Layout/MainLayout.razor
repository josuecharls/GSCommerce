@using Blazored.LocalStorage
@using GSCommerce.Client.Services
@using GSCommerce.Client.Models
@using Microsoft.AspNetCore.Components.Routing
@using System.Linq
@using System
@inherits LayoutComponentBase
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="main">
            <div class="top-row d-flex align-items-center px-3 py-2 shadow-sm bg-light" style="gap: 1rem;">
                @if (cargo == "ADMINISTRADOR")
                {
                    <NavLink class="topbar-item text-primary text-decoration-none" href="series-correlativos">
                        <i class="bi bi-card-list me-1"></i>Series y Correlativos
                    </NavLink>
                    <NavLink class="topbar-item text-primary text-decoration-none" href="/admin/tipocambio">
                        <i class="bi bi-cash-coin me-1"></i>Tipo de Cambio
                    </NavLink>
                    <NavLink class="topbar-item text-primary text-decoration-none" href="/moneda-almacen">
                        <i class="bi bi-currency-exchange me-1"></i>Moneda Tienda
                    </NavLink>
                    <NavLink class="topbar-item text-primary text-decoration-none" href="/reportes">
                        <i class="bi bi-bar-chart me-1"></i>Reportes
                    </NavLink>
                    <NavLink class="topbar-item text-primary text-decoration-none" href="/diario-resumido">
                        <i class="bi bi-file-earmark-check me-1"></i>Resumen Cajeros
                    </NavLink>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="/comprobantes-sunat">
                            <span class="bi bi-file-earmark-text" aria-hidden="true"></span> Comprobantes SUNAT
                        </NavLink>
                    </div>
                }
                @if (cargo == "CAJERO")
                {
                    <NavLink class="topbar-item text-primary text-decoration-none" href="/diario-resumido">
                        <i class="bi bi-journal-text me-1"></i>Resumen Diario Caja
                    </NavLink>
                    <NavLink class="nav-link" href="/ingresos-egresos">
                        <i class="bi bi-cash-stack"></i> Ingresos/Egresos
                    </NavLink>
                }
                <div class="ms-auto">
                    <button class="btn btn-primary btn-sm" @onclick="Logout">
                        <i class="bi bi-box-arrow-right"></i> Cerrar Sesión
                    </button>
                </div>
            </div>

            @if (mostrarAlertaStockCritico && articulosStockCritico.Any())
            {
                <div class="px-3 pt-3">
                    <div class="alert alert-danger alert-dismissible fade show d-flex align-items-start" role="alert">
                        <i class="bi bi-exclamation-triangle-fill fs-4 me-2 mt-1"></i>
                        <div class="flex-grow-1">
                            <strong>Stock crítico detectado en tu almacén (≤@StockCriticoUmbral)</strong>
                            <ul class="mb-0 mt-2 ps-3">
                                @foreach (var articulo in articulosStockCritico.Take(MaxArticulosAlert))
                                {
                                    <li>@articulo.Descripcion (@articulo.Stock unidades)</li>
                                }
                            </ul>
                            @if (articulosStockCritico.Count > MaxArticulosAlert)
                            {
                                <small class="d-block mt-2">Y @((articulosStockCritico.Count - MaxArticulosAlert)) artículo(s) más con poco stock.</small>
                            }
                            <small class="d-block mt-2">Revisa el módulo de stock para más detalles.</small>
                            <button type="button"
                                    class="btn btn-sm btn-outline-light mt-3"
                                    @onclick="SuprimirAlertaStockCriticoHastaNuevoInicioAsync">
                                No volver a mostrar hasta el próximo inicio de sesión
                            </button>
                        </div>
                        <button type="button" class="btn-close ms-2" aria-label="Cerrar" @onclick="CerrarAlertaStockCritico"></button>
                    </div>
                </div>
            }

            <div class="content px-4">
                @Body
            </div>
        </div>
    </main>
</div>

@code {
    [Inject] AuthService AuthService { get; set; } = null!;
    [Inject] CustomAuthStateProvider AuthStateProvider { get; set; } = null!;
    [Inject] NavigationManager Navigation { get; set; } = null!;
    [Inject] StockService StockService { get; set; } = null!;
    [Inject] ILocalStorageService LocalStorage { get; set; } = null!;

    private string? cargo;
    private List<StockDTO> articulosStockCritico = new();
    private bool mostrarAlertaStockCritico;
    private bool consultandoStockCritico;
    private int? idAlmacenUsuario;
    private bool disposed;
    private const int StockCriticoUmbral = 10;
    private const int MaxArticulosAlert = 5;
    private bool suprimirAlertaStockCriticoHastaNuevoInicio;
    private string? claveSupresionAlertaStockCritico;
    private const string ClaveSupresionAlertaStockCriticoPrefix = "stockAlertSuppressed_";

    protected override async Task OnInitializedAsync()
    {
        cargo = await AuthService.GetUserCargo();

        if (cargo == "CAJERO")
        {
            var idUsuario = await AuthService.GetUserId();
            claveSupresionAlertaStockCritico = ConstruirClaveSupresionStockCritico(idUsuario);
            suprimirAlertaStockCriticoHastaNuevoInicio = await CargarPreferenciaSupresionAsync();
            idAlmacenUsuario = NormalizarIdAlmacen(await AuthService.GetUserAlmacenId());
            Navigation.LocationChanged += HandleLocationChanged;
            await ConsultarStockCriticoAsync();
        }
    }

    private async Task ConsultarStockCriticoAsync()
    {
        if (cargo != "CAJERO" || consultandoStockCritico)
        {
            return;
        }

        if (suprimirAlertaStockCriticoHastaNuevoInicio)
        {
            if (mostrarAlertaStockCritico)
            {
                mostrarAlertaStockCritico = false;
                articulosStockCritico.Clear();

                if (!disposed)
                {
                    await InvokeAsync(StateHasChanged);
                }
            }

            return;
        }

        consultandoStockCritico = true;

        try
        {
            if (!idAlmacenUsuario.HasValue)
            {
                idAlmacenUsuario = NormalizarIdAlmacen(await AuthService.GetUserAlmacenId());
            }

            var articulos = await StockService.GetLowStockItems(idAlmacenUsuario, StockCriticoUmbral);

            articulosStockCritico = articulos
                .OrderBy(a => a.Stock)
                .ThenBy(a => a.Descripcion)
                .ToList();

            if (suprimirAlertaStockCriticoHastaNuevoInicio)
            {
                mostrarAlertaStockCritico = false;
                articulosStockCritico.Clear();
            }
            else
            {
                mostrarAlertaStockCritico = articulosStockCritico.Any();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al consultar stock crítico global: {ex.Message}");
        }
        finally
        {
            consultandoStockCritico = false;
        }

        if (!disposed)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        try
        {
            await ConsultarStockCriticoAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al actualizar alerta de stock crítico: {ex.Message}");
        }
    }

    private void CerrarAlertaStockCritico()
    {
        mostrarAlertaStockCritico = false;
    }

    private async Task SuprimirAlertaStockCriticoHastaNuevoInicioAsync()
    {
        suprimirAlertaStockCriticoHastaNuevoInicio = true;
        mostrarAlertaStockCritico = false;
        articulosStockCritico.Clear();

        await GuardarPreferenciaSupresionAsync(true);
    }

    private async Task Logout()
    {
        await GuardarPreferenciaSupresionAsync(false);
        await AuthStateProvider.MarkUserAsLoggedOut();
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    public void Dispose()
    {
        disposed = true;
        Navigation.LocationChanged -= HandleLocationChanged;
    }

    private static int? NormalizarIdAlmacen(int? idAlmacen)
    {
        if (!idAlmacen.HasValue || idAlmacen.Value <= 0)
        {
            return null;
        }

        return idAlmacen;
    }

    private string ConstruirClaveSupresionStockCritico(int? usuarioId)
    {
        if (usuarioId.HasValue && usuarioId.Value > 0)
        {
            return $"{ClaveSupresionAlertaStockCriticoPrefix}{usuarioId.Value}";
        }

        return $"{ClaveSupresionAlertaStockCriticoPrefix}anon";
    }

    private async Task<bool> CargarPreferenciaSupresionAsync()
    {
        if (string.IsNullOrEmpty(claveSupresionAlertaStockCritico))
        {
            return false;
        }

        try
        {
            return await LocalStorage.GetItemAsync<bool>(claveSupresionAlertaStockCritico);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al recuperar la preferencia de alerta de stock crítico: {ex.Message}");
            return false;
        }
    }

    private async Task GuardarPreferenciaSupresionAsync(bool suprimir)
    {
        if (string.IsNullOrEmpty(claveSupresionAlertaStockCritico))
        {
            return;
        }

        try
        {
            if (suprimir)
            {
                await LocalStorage.SetItemAsync(claveSupresionAlertaStockCritico, true);
            }
            else
            {
                await LocalStorage.RemoveItemAsync(claveSupresionAlertaStockCritico);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al persistir la preferencia de alerta de stock crítico: {ex.Message}");
        }
    }
}