@page "/articulos"
@**@
@using Microsoft.AspNetCore.Authorization
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject ArticuloService ArticuloService
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<h3>📦 Lista de Artículos</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    <button class="btn btn-success" @onclick="CreateNewArticulo">+ Nuevo Artículo</button>
    <div class="input-group w-50">
        <input type="text" class="form-control" placeholder="Buscar por descripción..." @bind="searchTerm" />
        <button class="btn btn-primary" @onclick="SearchArticulos">🔍 Buscar</button>
    </div>
</div>

<div class="card p-3 shadow-sm">
<table class="table table-striped">
    <thead>
        <tr>
            <th @onclick='() => SortBy("Codigo")' style="cursor:pointer;">
                <i class="bi @(GetSortIcon("Codigo")) me-1"></i>Código
            </th>
            <th @onclick='() => SortBy("Descripcion")' style="cursor:pointer;">
                <i class="bi @(GetSortIcon("Descripcion")) me-1"></i>Descripción
            </th>
            <th>Precio Compra</th>
            <th>Precio Venta</th>
            <th>Estado</th>
            <th class="text-center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (articuloList.Any())
        {
            @foreach (var a in articuloList)
            {
                <tr>
                    <td>@a.IdArticulo</td>
                    <td>@a.Descripcion</td>
                    <td>S/. @a.PrecioCompra</td>
                    <td>S/. @a.PrecioVenta</td>
                    <td>
                        @if (a.Estado)
                        {
                            <span class="badge bg-success">Activo</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Inactivo</span>
                        }
                    </td>
                    <td class="text-center">
                        <button @onclick="() => ShowPhoto(a.IdArticulo)" class="btn btn-info btn-sm me-1">
                            <i class="bi bi-image"></i>
                        </button>
                        <button @onclick="() => ShowBarcode(a.IdArticulo)" class="btn btn-primary btn-sm me-1">
                            <i class="bi bi-upc"></i>
                        </button>
                        <button @onclick="() => ShowQr(a.IdArticulo)" class="btn btn-secondary btn-sm me-1">
                            <i class="bi bi-qr-code"></i>
                        </button>
                            <button @onclick="() => EditVariantes(a.IdArticulo)" class="btn btn-info btn-sm me-1">
                                🎨 Var.
                            </button>
                        <button @onclick="() => EditArticulo(a.IdArticulo)" class="btn btn-warning btn-sm me-1">
                            ✏️ Editar
                        </button>
                        <button @onclick="() => ConfirmDeleteArticulo(a.IdArticulo, a.Descripcion)" class="btn btn-danger btn-sm">
                            🗑 Eliminar
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="6" class="text-center">Cargando... Espere...</td></tr>
        }
    </tbody>
</table>
</div>

<!-- Controles de paginación -->
<div class="d-flex justify-content-between">
    <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!CanPrev)">
        ◀️ Anterior
    </button>
    <span>Página @currentPage de @totalPages</span>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanNext)">
        Siguiente ▶️
    </button>
</div>

<!-- Modal de Confirmación para Eliminar -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body text-center">
                    <p>¿Desea eliminar el artículo <strong>@deleteArticuloName</strong> de la base de datos?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteConfirmed">Sí</button>
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">No</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para ver QR -->
@if (showQrModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">QR de @qrArticulo?.Descripcion</h5>
                    <button type="button" class="btn-close" @onclick="CloseQrModal"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="etiqueta-imprimir">
                        <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=@qrArticulo?.IdArticulo" width="200" />
                        <div style="font-weight:bold; margin-top:6px">@qrArticulo?.DescripcionCorta</div>
                        <div style="font-size:small">Código: @qrArticulo?.IdArticulo</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="PrintQr">Imprimir</button>
                    <button class="btn btn-secondary" @onclick="CloseQrModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}
<!-- Modal para ver Código de Barras -->
@if (showBarcodeModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Código de Barras de @barcodeArticulo?.Descripcion</h5>
                    <button type="button" class="btn-close" @onclick="CloseBarcodeModal"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="etiqueta-imprimir">
                        <img src="https://barcodeapi.org/api/128/@barcodeArticulo?.IdArticulo" width="200" />
                        <div style="font-weight:bold; margin-top:6px">@barcodeArticulo?.DescripcionCorta</div>
                        <div style="font-size:small">Código: @barcodeArticulo?.IdArticulo</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="PrintBarcode">Imprimir</button>
                    <button class="btn btn-secondary" @onclick="CloseBarcodeModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}
<!-- Modal para ver foto -->
@if (showPhotoModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Foto de @selectedArticulo?.Descripcion</h5>
                    <button type="button" class="btn-close" @onclick="ClosePhotoModal"></button>
                </div>
                <div class="modal-body text-center">
                    @if (!string.IsNullOrEmpty(photoUrl))
                    {
                        <img src="@photoUrl" loading="lazy" alt="Foto" class="img-fluid img-thumbnail" style="max-width:300px;max-height:300px;" />
                    }
                    else
                    {
                        <p>No hay foto disponible.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="ClosePhotoModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ArticuloDTO> articuloList = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private string searchTerm = "";
    private bool isDeleting = false;
    private bool showDeleteModal = false;
    private int deleteArticuloId;
    private string deleteArticuloName = "";
    private bool showPhotoModal = false;
    private bool showBarcodeModal = false;
    private bool showQrModal = false;
    private string? photoUrl;
    private ArticuloDTO? barcodeArticulo;
    private ArticuloDTO? selectedArticulo;
    private ArticuloDTO? qrArticulo;
    private string currentSortColumn = "Codigo";
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadArticulos();
    }

    private async Task LoadArticulos()
    {
        try
        {
            var response = await ArticuloService.GetArticulos(currentPage, pageSize, searchTerm);
            articuloList = SortList(response.Data);
            totalPages = response.TotalPages;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al cargar artículos: {ex.Message}");
        }
    }

    private async Task SearchArticulos()
    {
        currentPage = 1;
        await LoadArticulos();
    }

    private async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadArticulos();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadArticulos();
        }
    }

    private void CreateNewArticulo()
    {
        Navigation.NavigateTo("/articulo-form/" + Guid.NewGuid().ToString());
    }

    private void EditArticulo(string id)
    {
        Navigation.NavigateTo($"/articulo/edit/{id}");
    }

    private void EditVariantes(string id)
    {
        Navigation.NavigateTo($"/articulo-variante/{id}");
    }

    private void ConfirmDeleteArticulo(string id, string name)
    {
        deleteArticuloId = int.Parse(id);
        deleteArticuloName = name;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        deleteArticuloId = 0;
        deleteArticuloName = "";
    }

    private async Task DeleteConfirmed()
    {
        if (!isDeleting && deleteArticuloId > 0)
        {
            isDeleting = true;
            try
            {
                if (await ArticuloService.DeleteArticulo(deleteArticuloId.ToString()))
                {
                    await LoadArticulos();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Error al eliminar artículo: {ex.Message}");
            }
            isDeleting = false;
            CloseDeleteModal();
        }
    }
    private void ShowPhoto(string id)
    {
        selectedArticulo = articuloList.FirstOrDefault(a => a.IdArticulo == id);
        if (selectedArticulo != null)
        {
            photoUrl = $"{Http.BaseAddress}api/articulos/foto/{id}?t={DateTime.Now.Ticks}";
            showPhotoModal = true;
        }
    }

    private void ClosePhotoModal()
    {
        showPhotoModal = false;
        photoUrl = null;
    }

    private void ShowQr(string id)
    {
        qrArticulo = articuloList.FirstOrDefault(a => a.IdArticulo == id);
        if (qrArticulo != null)
        {
            showQrModal = true;
        }
    }

    private void CloseQrModal()
    {
        showQrModal = false;
    }

    private async Task PrintQr()
    {
        await JS.InvokeVoidAsync("window.print");
    }

    private void SortBy(string column)
    {
        if (currentSortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = column;
            sortAscending = true;
        }

        articuloList = SortList(articuloList);
    }

    private List<ArticuloDTO> SortList(List<ArticuloDTO> list)
    {
        return currentSortColumn switch
        {
            "Codigo" => sortAscending ? list.OrderBy(a => a.IdArticulo).ToList() : list.OrderByDescending(a => a.IdArticulo).ToList(),
            "Descripcion" => sortAscending ? list.OrderBy(a => a.Descripcion).ToList() : list.OrderByDescending(a => a.Descripcion).ToList(),
            _ => list
        };
    }

    private string GetSortIcon(string column)
    {
        if (currentSortColumn != column)
            return "bi-arrow-down-up";
        return sortAscending ? "bi-arrow-up" : "bi-arrow-down";
    }

    private void ShowBarcode(string id)
    {
        barcodeArticulo = articuloList.FirstOrDefault(a => a.IdArticulo == id);
        if (barcodeArticulo != null)
        {
            showBarcodeModal = true;
        }
    }

    private void CloseBarcodeModal()
    {
        showBarcodeModal = false;
    }

    private async Task PrintBarcode()
    {
        await JS.InvokeVoidAsync("window.print");
    }

    private bool CanPrev => currentPage > 1;
    private bool CanNext => currentPage < totalPages;
}
