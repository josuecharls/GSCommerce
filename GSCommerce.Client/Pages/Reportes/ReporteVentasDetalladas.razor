@page "/reportes/ventas-detalladas"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@inject VentaService VentaService
@inject AuthService AuthService
@inject AlmacenService AlmacenService
@inject IJSRuntime JS

<ReportsBreadcrumb Title="LIBRO DE VENTAS" />

<div class="row g-3 mb-3">
    @if (cargo == "ADMINISTRADOR")
    {
        <div class="col-md-3">
            <label>Almacén:</label>
            <select class="form-control" @bind="selectedAlmacen">
                <option value="0">General</option>
                @foreach (var a in almacenes)
                {
                    <option value="@a.IdAlmacen">@a.Nombre</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label>Desde:</label>
            <InputDate @bind-Value="desde" class="form-control" />
        </div>
        <div class="col-md-2">
            <label>Hasta:</label>
            <InputDate @bind-Value="hasta" class="form-control" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="Buscar">🔍 Buscar</button>
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button class="btn btn-success w-100" @onclick="ExportarExcel">📥 Exportar a Excel</button>
        </div>
    }
    else
    {
        <div class="col-md-4">
            <label>Desde:</label>
            <InputDate @bind-Value="desde" class="form-control" />
        </div>
        <div class="col-md-4">
            <label>Hasta:</label>
            <InputDate @bind-Value="hasta" class="form-control" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="Buscar">🔍 Buscar</button>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-success w-100" @onclick="ExportarExcel">📥 Exportar a Excel</button>
        </div>
    }
</div>

@if (ventas.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-light">
                <tr>
                    <th>Tipo Doc</th>
                    <th>Comprobante</th>
                    <th>Fecha</th>
                    <th>ClienteDoc</th>
                    <th>Cliente</th>
                    <th>SubTotal</th>
                    <th>IGV</th>
                    <th>Total</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var v in ventas)
                {
                    var prefijo = v.TipoDocumento.StartsWith("F") ? "F" :
                    v.TipoDocumento.StartsWith("B") ? "B" : "";
                    var comprobante = $"{prefijo}{v.Serie}-{v.Numero:D8}";
                    <tr>
                        <td>@v.TipoDocumento</td>
                        <td>@comprobante</td>
                        <td>@v.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@v.DocumentoCliente</td>
                        <td>@v.NombreCliente</td>
                        <td>S/ @v.SubTotal.ToString("N2")</td>
                        <td>S/ @v.Igv.ToString("N2")</td>
                        <td>S/ @v.Total.ToString("N2")</td>
                        <td>@v.Estado</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info text-center">No se encontraron ventas.</div>
}

@code {
    private List<VentaConsultaDTO> ventas = new();
    private DateTime desde = DateTime.Today;
    private DateTime hasta = DateTime.Today;
    private string cargo = string.Empty;
    private List<AlmacenDTO> almacenes = new();
    private int selectedAlmacen;

    private async Task Buscar()
    {
        int? filtroAlmacen = cargo == "ADMINISTRADOR"
            ? (selectedAlmacen == 0 ? (int?)null : selectedAlmacen)
            : selectedAlmacen;
        ventas = await VentaService.ObtenerVentasAsync(desde, hasta, filtroAlmacen);
    }

    private async Task ExportarExcel()
    {
        var headers = new[] { "Tipo Doc", "Comprobante", "Fecha", "ClienteDoc", "Cliente", "SubTotal", "IGV", "Total", "Estado" };
        var rows = new List<object[]>();

        var almacenesExcel = new List<AlmacenDTO>();
        if (cargo == "ADMINISTRADOR")
        {
            almacenesExcel = selectedAlmacen > 0
                ? almacenes.Where(a => a.IdAlmacen == selectedAlmacen).ToList()
                : almacenes;
        }
        else
        {
            var alm = await AlmacenService.GetAlmacenById(selectedAlmacen);
            if (alm != null) almacenesExcel.Add(alm);
        }

        foreach (var alm in almacenesExcel)
        {
            var datos = await VentaService.ObtenerVentasAsync(desde, hasta, alm.IdAlmacen);
            foreach (var v in datos)
            {
                var prefijo = v.TipoDocumento.StartsWith("F") ? "F" :
                              v.TipoDocumento.StartsWith("B") ? "B" : "";
                var comprobante = $"{prefijo}{v.Serie}-{v.Numero:D8}";
                rows.Add(new object[]
                {
                    v.TipoDocumento,
                    comprobante,
                    v.Fecha.ToString("dd/MM/yyyy"),
                    v.DocumentoCliente,
                    v.NombreCliente,
                    v.SubTotal,
                    v.Igv,
                    v.Total,
                    v.Estado
                });
            }
        }

        await JS.InvokeVoidAsync("exportToExcel", headers, rows.ToArray(), $"VentasDetalladas_{DateTime.Now:yyyyMMdd_HHmmss}");
    }

    protected override async Task OnInitializedAsync()
    {
        cargo = await AuthService.GetUserCargo() ?? string.Empty;
        if (cargo == "ADMINISTRADOR")
        {
            var lista = await AlmacenService.GetAlmacenes();
            if (lista != null) almacenes = lista;
            selectedAlmacen = 0;
        }
        else
        {
            selectedAlmacen = await AuthService.GetUserAlmacenId() ?? 0;
        }

        await Buscar();
    }
}