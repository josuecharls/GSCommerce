@page "/reportes/ventas-detalladas"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using System.Text
@using GSCommerce.Client.Services
@inject VentaService VentaService
@inject AuthService AuthService
@inject AlmacenService AlmacenService
@inject IJSRuntime JS

<ReportsBreadcrumb Title="Ventas Detalladas" />

<div class="row g-3 mb-3">
    @if (cargo == "ADMINISTRADOR")
    {
        <div class="col-md-3">
            <label>Almacén:</label>
            <select class="form-control" @bind="selectedAlmacen">
                <option value="0">General</option>
                @foreach (var a in almacenes)
                {
                    <option value="@a.IdAlmacen">@a.Nombre</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label>Desde:</label>
            <InputDate @bind-Value="desde" class="form-control" />
        </div>
        <div class="col-md-2">
            <label>Hasta:</label>
            <InputDate @bind-Value="hasta" class="form-control" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="Buscar">🔍 Buscar</button>
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button class="btn btn-success w-100" @onclick="ExportarPDF">📄 Exportar a PDF</button>
        </div>
    }
    else
    {
        <div class="col-md-4">
            <label>Desde:</label>
            <InputDate @bind-Value="desde" class="form-control" />
        </div>
        <div class="col-md-4">
            <label>Hasta:</label>
            <InputDate @bind-Value="hasta" class="form-control" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="Buscar">🔍 Buscar</button>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-success w-100" @onclick="ExportarPDF">📄 Exportar a PDF</button>
        </div>
    }
</div>

@if (ventas.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-light">
                <tr>
                    <th>Fecha</th>
                    <th>Tipo Doc</th>
                    <th>Serie</th>
                    <th>Número</th>
                    <th>Cliente</th>
                    <th>Total</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var v in ventas)
                {
                    <tr>
                        <td>@v.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@v.TipoDocumento</td>
                        <td>@v.Serie</td>
                        <td>@v.Numero.ToString("D8")</td>
                        <td>@v.NombreCliente</td>
                        <td>S/ @v.Total.ToString("N2")</td>
                        <td>@v.Estado</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info text-center">No se encontraron ventas.</div>
}

@code {
    private List<VentaConsultaDTO> ventas = new();
    private DateTime desde = DateTime.Today;
    private DateTime hasta = DateTime.Today;
    private string cargo = string.Empty;
    private List<AlmacenDTO> almacenes = new();
    private int selectedAlmacen;

    private async Task Buscar()
    {
        int? filtroAlmacen = cargo == "ADMINISTRADOR"
            ? (selectedAlmacen == 0 ? (int?)null : selectedAlmacen)
            : selectedAlmacen;
        ventas = await VentaService.ObtenerVentasAsync(desde, hasta, filtroAlmacen);
    }

    private async Task ExportarPDF()
    {
        var sb = new StringBuilder();
        sb.AppendLine("<div style='font-family:Arial; font-size:12px;'>");
        sb.AppendLine("<h2 style='text-align:center;'>Ventas Detalladas</h2>");
        sb.AppendLine($"<p><strong>Desde:</strong> {desde:dd/MM/yyyy} <strong>Hasta:</strong> {hasta:dd/MM/yyyy}</p>");

        var almacenesPdf = new List<AlmacenDTO>();
        if (cargo == "ADMINISTRADOR")
        {
            almacenesPdf = selectedAlmacen > 0
                ? almacenes.Where(a => a.IdAlmacen == selectedAlmacen).ToList()
                : almacenes;
        }
        else
        {
            var alm = await AlmacenService.GetAlmacenById(selectedAlmacen);
            if (alm != null) almacenesPdf.Add(alm);
        }

        foreach (var alm in almacenesPdf)
        {
            sb.AppendLine($"<h3>{alm.Nombre}:</h3>");
            var datos = await VentaService.ObtenerVentasAsync(desde, hasta, alm.IdAlmacen);

            if (datos.Any())
            {
                sb.AppendLine("<table border='1' cellpadding='5' cellspacing='0' style='width:100%; border-collapse:collapse;'>");
                sb.AppendLine("<thead><tr><th>Fecha</th><th>Tipo Doc</th><th>Serie</th><th>Número</th><th>Cliente</th><th>Total</th><th>Estado</th></tr></thead>");
                sb.AppendLine("<tbody>");
                foreach (var v in datos)
                {
                    sb.AppendLine("<tr>");
                    sb.AppendLine($"<td>{v.Fecha:dd/MM/yyyy}</td>");
                    sb.AppendLine($"<td>{v.TipoDocumento}</td>");
                    sb.AppendLine($"<td>{v.Serie}</td>");
                    sb.AppendLine($"<td>{v.Numero:D8}</td>");
                    sb.AppendLine($"<td>{v.NombreCliente}</td>");
                    sb.AppendLine($"<td>S/ {v.Total:N2}</td>");
                    sb.AppendLine($"<td>{v.Estado}</td>");
                    sb.AppendLine("</tr>");
                }
                sb.AppendLine("</tbody></table>");
            }
            else
            {
                sb.AppendLine("<p>No se encontraron ventas.</p>");
            }
        }
        sb.AppendLine("</div>");

        await JS.InvokeVoidAsync("generarPDFDesdeHTML", sb.ToString(), $"VentasDetalladas_{DateTime.Now:yyyyMMdd_HHmmss}");
    }

    protected override async Task OnInitializedAsync()
    {
        cargo = await AuthService.GetUserCargo() ?? string.Empty;
        if (cargo == "ADMINISTRADOR")
        {
            var lista = await AlmacenService.GetAlmacenes();
            if (lista != null) almacenes = lista;
            selectedAlmacen = 0;
        }
        else
        {
            selectedAlmacen = await AuthService.GetUserAlmacenId() ?? 0;
        }

        await Buscar();
    }
}