@page "/reportes/ventas-articulo"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@using System.Linq
@inject ArticuloService ArticuloService
@inject ReporteService ReporteService
@inject IJSRuntime JS

<ReportsBreadcrumb Title="Ventas por Artículo" />
<div class="row mb-4">
    <div class="col-md-3">
        <label>Desde:</label>
        <InputDate @bind-Value="fechaDesde" class="form-control" />
    </div>
    <div class="col-md-3">
        <label>Hasta:</label>
        <InputDate @bind-Value="fechaHasta" class="form-control" />
    </div>
    <div class="col-md-3 position-relative">
        <label>Artículo:</label>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar por nombre o código..." @bind="searchTerm" />
            <button class="btn btn-primary" @onclick="BuscarArticulo">
                <i class="bi bi-search"></i>
            </button>
        </div>
        @if (resultadosBusqueda.Any())
        {
            <ul class="list-group position-absolute w-100" style="z-index:1000;">
                @foreach (var art in resultadosBusqueda)
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => SeleccionarArticulo(art)">
                        @art.IdArticulo - @art.Descripcion
                    </li>
                }
            </ul>
        }
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <div class="d-flex flex-column gap-2 w-100">
            <button class="btn btn-primary" @onclick="GenerarVistaPrevia"><i class="bi bi-eye-fill"></i> Vista previa</button>
            <button class="btn btn-success" @onclick="ExportarExcel" disabled="@(!reportesVistaPrevia.Any())"><i class="bi bi-file-earmark-spreadsheet"></i> Exportar Excel</button>
        </div>
    </div>
</div>

@if (articulosSeleccionados.Any())
{
    <div class="mb-3">
        <strong>Seleccionados:</strong>
        <ul class="list-group">
            @foreach (var art in articulosSeleccionados)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @art.IdArticulo - @art.Descripcion
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoverArticulo(art)">✖</button>
                </li>
            }
        </ul>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-warning text-center">@mensaje</div>
}

@if (isCargandoVistaPrevia)
{
    <div class="text-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-2 mb-0">Generando vista previa...</p>
    </div>
}
else if (reportesVistaPrevia.Any())
{
    @foreach (var reporte in reportesVistaPrevia)
    {
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <div class="d-flex flex-column flex-lg-row justify-content-between align-items-lg-center gap-2">
                    <span class="fw-semibold">@reporte.IdArticulo - @reporte.Descripcion</span>
                    <small class="text-white-50">PC: @reporte.PrecioCompra | PV: @reporte.PrecioVenta</small>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm table-bordered align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>ALMACEN</th>
                                <th>COD</th>
                                <th>INGRESO</th>
                                <th>Descripción</th>
                                @foreach (var mes in reporte.Meses)
                                {
                                    <th>@mes.Label</th>
                                }
                                <th>TOTAL</th>
                                <th>Fch Ing</th>
                                <th>Stock</th>
                                <th>% Mercadería vendida</th>
                                <th>PC</th>
                                <th>PV</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var fila in reporte.Filas)
                            {
                                <tr>
                                    <td>@fila.NombreAlmacen</td>
                                    <td>@fila.Codigo</td>
                                    <td>@fila.Ingreso</td>
                                    <td>@reporte.Descripcion</td>
                                    @foreach (var mes in reporte.Meses)
                                    {
                                        var tieneMes = fila.VentasPorMes.TryGetValue(mes.Key, out var ventasMes);
                                        <td>@(tieneMes? ventasMes : 0)</td>
                                    }
                                    <td>@fila.TotalVentas</td>
                                    <td>@(fila.FechaPrimerIngreso?.ToString("dd/MM/yyyy") ?? "-")</td>
                                    <td>@fila.Stock</td>
                                    <td>@fila.PorcentajeVendida</td>
                                    <td>@fila.PC</td>
                                    <td>@fila.PV</td>
                                </tr>
                            }
                            <tr class="table-secondary fw-semibold">
                                <td>Total</td>
                                <td></td>
                                <td>@reporte.Totales.Ingreso</td>
                                <td></td>
                                @foreach (var mes in reporte.Meses)
                                {
                                    var totalMes = reporte.Totales.VentasPorMes.TryGetValue(mes.Key, out var ventasMes) ? ventasMes : 0;
                                    <td>@totalMes</td>
                                }
                                <td>@reporte.Totales.TotalVentas</td>
                                <td></td>
                                <td>@reporte.Totales.Stock</td>
                                <td>@reporte.Totales.PorcentajeVendida</td>
                                <td></td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
}

@code {
    private DateTime _fechaDesde = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private DateTime fechaDesde
    {
        get => _fechaDesde;
        set
        {
            if (_fechaDesde != value)
            {
                _fechaDesde = value;
                LimpiarVistaPrevia();
            }
        }
    }

    private DateTime _fechaHasta = DateTime.Today;
    private DateTime fechaHasta
    {
        get => _fechaHasta;
        set
        {
            if (_fechaHasta != value)
            {
                _fechaHasta = value;
                LimpiarVistaPrevia();
            }
        }
    }
    private string searchTerm = string.Empty;
    private List<ArticuloDTO> resultadosBusqueda = new();
    private List<ArticuloDTO> articulosSeleccionados = new();
    private string mensaje = string.Empty;
    private bool isCargandoVistaPrevia;
    private List<ReporteArticuloRangoDTO> reportesVistaPrevia = new();

    private async Task GenerarVistaPrevia()
    {
        mensaje = string.Empty;
        LimpiarVistaPrevia();

        if (!ValidarParametros(out var ids))
        {
            return;
        }

        isCargandoVistaPrevia = true;

        try
        {
            var reportes = await ReporteService.ObtenerReporteArticulosRango(ids, fechaDesde, fechaHasta);

            if (reportes.Count == 0)
            {
                mensaje = "❌ No se encontró información para los parámetros seleccionados.";
                return;
            }

            reportesVistaPrevia = reportes;
        }
        finally
        {
            isCargandoVistaPrevia = false;
        }
    }

    private async Task ExportarExcel()
    {
        mensaje = string.Empty;

        if (!reportesVistaPrevia.Any())
        {
            mensaje = "ℹ️ Genera primero la vista previa del reporte.";
            return;
        }

        var data = reportesVistaPrevia.Select(r => new ReporteArticuloExcel
        {
            SheetName = r.IdArticulo,
            Headers = BuildHeaders(r),
            Rows = BuildRows(r)
        }).ToList();

        await JS.InvokeVoidAsync("exportVentasArticuloExcel", data,
            $"VentasArticulo_{fechaDesde:yyyyMMdd}_{fechaHasta:yyyyMMdd}");
    }

    private async Task BuscarArticulo()
    {
        resultadosBusqueda.Clear();

        if (string.IsNullOrWhiteSpace(searchTerm))
            return;

        var artCodigo = await ArticuloService.BuscarPorCodigoAsync(searchTerm);
        if (artCodigo != null)
        {
            resultadosBusqueda.Add(artCodigo);
            return;
        }

        var resp = await ArticuloService.GetArticulos(1, 10, searchTerm);
        resultadosBusqueda = resp.Data;
    }

    private void SeleccionarArticulo(ArticuloDTO art)
    {
        if (!articulosSeleccionados.Any(a => a.IdArticulo == art.IdArticulo))
        {
            articulosSeleccionados.Add(art);
            LimpiarVistaPrevia();
        }
        searchTerm = string.Empty;
        resultadosBusqueda.Clear();
    }

    private void RemoverArticulo(ArticuloDTO art)
    {
        articulosSeleccionados.Remove(art);
        LimpiarVistaPrevia();
    }

    private bool ValidarParametros(out List<string> ids)
    {
        ids = articulosSeleccionados.Select(a => a.IdArticulo).ToList();

        if (!ids.Any())
        {
            mensaje = "⚠️ Debes seleccionar al menos un artículo.";
            return false;
        }

        if (fechaHasta < fechaDesde)
        {
            mensaje = "⚠️ La fecha hasta debe ser posterior a la fecha desde.";
            return false;
        }

        return true;
    }

    private void LimpiarVistaPrevia()
    {
        if (reportesVistaPrevia.Any())
        {
            reportesVistaPrevia.Clear();
        }
        mensaje = string.Empty;
    }

    private static string[] BuildHeaders(ReporteArticuloRangoDTO r)
    {
        var headers = new List<string> { "ALMACEN", "COD", "INGRESO", "Descripción" };
        headers.AddRange(r.Meses.Select(m => m.Label));
        headers.AddRange(new[] { "TOTAL", "Fch Ing", "Stock", "% Mercadería vendida", "PC", "PV" });
        return headers.ToArray();
    }

    private static List<object[]> BuildRows(ReporteArticuloRangoDTO r)
    {
        var rows = new List<object[]>();
        foreach (var f in r.Filas)
        {
            var row = new List<object>
            {
                f.NombreAlmacen,
                f.Codigo,
                f.Ingreso,
                r.Descripcion
            };
            row.AddRange(r.Meses.Select(m => (object)f.VentasPorMes[m.Key]));
            row.Add(f.TotalVentas);
            row.Add(f.FechaPrimerIngreso?.ToString("dd/MM/yyyy") ?? "");
            row.Add(f.Stock);
            row.Add(f.PorcentajeVendida);
            row.Add(f.PC);
            row.Add(f.PV);
            rows.Add(row.ToArray());
        }

        var totalRow = new List<object> { "Total", "", r.Totales.Ingreso, "" };
        totalRow.AddRange(r.Meses.Select(m => (object)r.Totales.VentasPorMes[m.Key]));
        totalRow.Add(r.Totales.TotalVentas);
        totalRow.Add("");
        totalRow.Add(r.Totales.Stock);
        totalRow.Add(r.Totales.PorcentajeVendida);
        totalRow.Add("");
        totalRow.Add("");
        rows.Add(totalRow.ToArray());

        return rows;
    }

    private class ReporteArticuloExcel
    {
        public string SheetName { get; set; } = string.Empty;
        public string[] Headers { get; set; } = Array.Empty<string>();
        public List<object[]> Rows { get; set; } = new();
    }
}
