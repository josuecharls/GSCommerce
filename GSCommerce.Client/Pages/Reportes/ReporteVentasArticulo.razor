@page "/reportes/ventas-articulo"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@using System.Text
@using System.Linq
@inject ArticuloService ArticuloService
@inject ReporteService ReporteService
@inject IJSRuntime JS

<ReportsBreadcrumb Title="Ventas por Artículo" />
<div class="row mb-4">
    <div class="col-md-3">
        <label>Desde:</label>
        <InputDate @bind-Value="fechaDesde" class="form-control" />
    </div>
    <div class="col-md-3">
        <label>Hasta:</label>
        <InputDate @bind-Value="fechaHasta" class="form-control" />
    </div>
    <div class="col-md-3 position-relative">
        <label>Artículo:</label>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar por nombre o código..." @bind="searchTerm" />
            <button class="btn btn-primary" @onclick="BuscarArticulo">🔍</button>
        </div>
        @if (resultadosBusqueda.Any())
        {
            <ul class="list-group position-absolute w-100" style="z-index:1000;">
                @foreach (var art in resultadosBusqueda)
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => SeleccionarArticulo(art)">
                        @art.IdArticulo - @art.Descripcion
                    </li>
                }
            </ul>
        }
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-success w-100" @onclick="ExportarReportePDF">📄 Generar PDF</button>
    </div>
</div>

@if (articulosSeleccionados.Any())
{
    <div class="mb-3">
        <strong>Seleccionados:</strong>
        <ul class="list-group">
            @foreach (var art in articulosSeleccionados)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @art.IdArticulo - @art.Descripcion
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoverArticulo(art)">✖</button>
                </li>
            }
        </ul>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-warning text-center">@mensaje</div>
}

@code {
    private DateTime fechaDesde = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private DateTime fechaHasta = DateTime.Today;
    private string searchTerm = string.Empty;
    private List<ArticuloDTO> resultadosBusqueda = new();
    private List<ArticuloDTO> articulosSeleccionados = new();
    private string mensaje = string.Empty;

    private async Task ExportarReportePDF()
    {
        mensaje = string.Empty;

        if (!articulosSeleccionados.Any())
        {
            mensaje = "⚠️ Debes seleccionar al menos un artículo.";
            return;
        }
        if (fechaHasta < fechaDesde)
        {
            mensaje = "⚠️ La fecha hasta debe ser posterior a la fecha desde.";
            return;
        }

        var ids = articulosSeleccionados.Select(a => a.IdArticulo).ToList();
        var reportes = await ReporteService.ObtenerReporteArticulosRango(ids, fechaDesde, fechaHasta);

        if (reportes.Count == 0)
        {
            mensaje = "❌ No se encontró información para los parámetros seleccionados.";
            return;
        }

        var sb = new StringBuilder();
        foreach (var rep in reportes)
            sb.AppendLine(GenerarHtmlTablaArticulo(rep));

        await JS.InvokeVoidAsync("generarPDFDesdeHTML", sb.ToString(), "Reporte_Ventas_Articulo.pdf");
    }

    private async Task BuscarArticulo()
    {
        resultadosBusqueda.Clear();

        if (string.IsNullOrWhiteSpace(searchTerm))
            return;

        var artCodigo = await ArticuloService.BuscarPorCodigoAsync(searchTerm);
        if (artCodigo != null)
        {
            resultadosBusqueda.Add(artCodigo);
            return;
        }

        var resp = await ArticuloService.GetArticulos(1, 10, searchTerm);
        resultadosBusqueda = resp.Data;
    }

    private void SeleccionarArticulo(ArticuloDTO art)
    {
        if (!articulosSeleccionados.Any(a => a.IdArticulo == art.IdArticulo))
        {
            articulosSeleccionados.Add(art);
        }
        searchTerm = string.Empty;
        resultadosBusqueda.Clear();
    }

    private void RemoverArticulo(ArticuloDTO art)
    {
        articulosSeleccionados.Remove(art);
    }

    private string GenerarHtmlTablaArticulo(ReporteArticuloRangoDTO r)
    {
        string css = @"
    <style>
      .tbl{width:100%; border-collapse:collapse; font-family:Arial; font-size:12px;}
      .tbl th, .tbl td{border:1px solid #ccc; padding:6px; text-align:center; }
      .th1{background:#d9e6f2; font-weight:bold;}
      .th-sep{background:#7ff0ff; font-weight:bold; text-align:left;}
      .total{background:#ff0; font-weight:bold;}
      .left{text-align:left;}
      .muted{color:#666;}
    </style>";

        var header = $@"
    {css}
    <div style='margin-bottom:14px'>
      <h2 style='text-align:center;margin:0'>VENTAS POR ARTÍCULO</h2>
      <div style='text-align:center' class='muted'>{r.IdArticulo} - {System.Net.WebUtility.HtmlEncode(r.Descripcion)}</div>
    </div>";

        var thMeses = string.Join("", r.Meses.Select(m => $"<th class='th1'>{m.Label}</th>"));

        var sb = new StringBuilder();
        sb.AppendLine(header);
        sb.AppendLine("<table class='tbl'>");
        sb.AppendLine("<tr>");
        sb.AppendLine("<th class='th1'>ALMACEN</th><th class='th1'>COD</th><th class='th1'>INGRESO</th><th class='th1 left'>Descripción</th>");
        sb.AppendLine(thMeses);
        sb.AppendLine("<th class='th1'>TOTAL</th><th class='th1'>Fch Ing</th><th class='th1'>Stock</th><th class='th1'>% Mercadería vendida</th><th class='th1'>PC</th><th class='th1'>PV</th>");
        sb.AppendLine("</tr>");

        foreach (var f in r.Filas)
        {
            int maxFila = Math.Max(1, f.VentasPorMes.Values.Max());
            string tdMeses = string.Join("", r.Meses.Select(m =>
            {
                var key = $"{m.Year:D4}{m.Month:D2}";
                var val = f.VentasPorMes[key];
                var ratio = (double)val / maxFila;
                int rC = (int)(255 * (1 - ratio));
                int gC = (int)(255 * ratio);
                string bg = val == 0 ? "#f6f6f6" : $"rgb({rC},{gC},120)";
                return $"<td style='background:{bg}'>{val}</td>";
            }));

            sb.AppendLine("<tr>");
            sb.AppendLine($"<td>{System.Net.WebUtility.HtmlEncode(f.NombreAlmacen)}</td>");
            sb.AppendLine($"<td>{f.Codigo}</td>");
            sb.AppendLine($"<td>{f.Ingreso}</td>");
            sb.AppendLine($"<td class='left'>{System.Net.WebUtility.HtmlEncode(r.Descripcion)}</td>");
            sb.AppendLine(tdMeses);
            sb.AppendLine($"<td>{f.TotalVentas}</td>");
            sb.AppendLine($"<td>{(f.FechaPrimerIngreso.HasValue ? f.FechaPrimerIngreso.Value.ToString("dd/MM/yyyy") : "")}</td>");
            sb.AppendLine($"<td>{f.Stock}</td>");
            sb.AppendLine($"<td>{f.PorcentajeVendida:N2}</td>");
            sb.AppendLine($"<td>{f.PC:N2}</td>");
            sb.AppendLine($"<td>{f.PV:N2}</td>");
            sb.AppendLine("</tr>");
        }

        string tdm = string.Join("", r.Meses.Select(m =>
        {
            var key = $"{m.Year:D4}{m.Month:D2}";
            var val = r.Totales.VentasPorMes[key];
            return $"<td class='total'>{val}</td>";
        }));

        sb.AppendLine("<tr class='total'>");
        sb.AppendLine("<td>Total</td><td></td>");
        sb.AppendLine($"<td>{r.Totales.Ingreso}</td>");
        sb.AppendLine("<td class='left'></td>");
        sb.AppendLine(tdm);
        sb.AppendLine($"<td>{r.Totales.TotalVentas}</td>");
        sb.AppendLine("<td></td>");
        sb.AppendLine($"<td>{r.Totales.Stock}</td>");
        sb.AppendLine($"<td>{r.Totales.PorcentajeVendida:N2}</td>");
        sb.AppendLine("<td></td><td></td>");
        sb.AppendLine("</tr>");

        sb.AppendLine("</table>");
        sb.AppendLine("<div style='height:18px'></div>");
        return sb.ToString();
    }
}
