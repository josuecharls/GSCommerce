@page "/reportes/ventas-articulo"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@using System.Text
@using System.Linq
@inject ArticuloService ArticuloService
@inject ReporteService ReporteService
@inject IJSRuntime JS

<ReportsBreadcrumb Title="Ventas por Artículo" />
<div class="row mb-4">
    <div class="col-md-3">
        <label>Desde:</label>
        <InputDate @bind-Value="fechaDesde" class="form-control" />
    </div>
    <div class="col-md-3">
        <label>Hasta:</label>
        <InputDate @bind-Value="fechaHasta" class="form-control" />
    </div>
    <div class="col-md-3 position-relative">
        <label>Artículo:</label>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar por nombre o código..." @bind="searchTerm" />
            <button class="btn btn-primary" @onclick="BuscarArticulo">🔍</button>
        </div>
        @if (resultadosBusqueda.Any())
        {
            <ul class="list-group position-absolute w-100" style="z-index:1000;">
                @foreach (var art in resultadosBusqueda)
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => SeleccionarArticulo(art)">
                        @art.IdArticulo - @art.Descripcion
                    </li>
                }
            </ul>
        }
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-success w-100" @onclick="ExportarReportePDF">📄 Generar PDF</button>
    </div>
</div>

@if (articulosSeleccionados.Any())
{
    <div class="mb-3">
        <strong>Seleccionados:</strong>
        <ul class="list-group">
            @foreach (var art in articulosSeleccionados)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @art.IdArticulo - @art.Descripcion
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoverArticulo(art)">✖</button>
                </li>
            }
        </ul>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-warning text-center">@mensaje</div>
}

@code {
    private DateTime fechaDesde = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private DateTime fechaHasta = DateTime.Today;
    private string searchTerm = string.Empty;
    private List<ArticuloDTO> resultadosBusqueda = new();
    private List<ArticuloDTO> articulosSeleccionados = new();
    private string mensaje = string.Empty;

    private async Task ExportarReportePDF()
    {
        mensaje = string.Empty;

        if (!articulosSeleccionados.Any())
        {
            mensaje = "⚠️ Debes seleccionar al menos un artículo.";
            return;
        }

        if (fechaHasta < fechaDesde)
        {
            mensaje = "⚠️ La fecha hasta debe ser posterior a la fecha desde.";
            return;
        }

        var sb = new StringBuilder();
        foreach (var art in articulosSeleccionados)
        {
            for (var dt = new DateTime(fechaDesde.Year, fechaDesde.Month, 1); dt <= new DateTime(fechaHasta.Year, fechaHasta.Month, 1); dt = dt.AddMonths(1))
            {
                var reporte = await ReporteService.ObtenerReportePorArticulo(art.IdArticulo, dt.Month, dt.Year);
                if (reporte != null)
                {
                    sb.AppendLine(GenerarHtmlPDF_Articulo(reporte, dt.Month, dt.Year));
                }
            }
        }

        if (sb.Length == 0)
        {
            mensaje = "❌ No se encontró información para los parámetros seleccionados.";
            return;
        }

        await JS.InvokeVoidAsync("generarPDFDesdeHTML", sb.ToString(), "Reporte_Ventas_Articulo.pdf");
    }

    private async Task BuscarArticulo()
    {
        resultadosBusqueda.Clear();

        if (string.IsNullOrWhiteSpace(searchTerm))
            return;

        var artCodigo = await ArticuloService.BuscarPorCodigoAsync(searchTerm);
        if (artCodigo != null)
        {
            resultadosBusqueda.Add(artCodigo);
            return;
        }

        var resp = await ArticuloService.GetArticulos(1, 10, searchTerm);
        resultadosBusqueda = resp.Data;
    }

    private void SeleccionarArticulo(ArticuloDTO art)
    {
        if (!articulosSeleccionados.Any(a => a.IdArticulo == art.IdArticulo))
        {
            articulosSeleccionados.Add(art);
        }
        searchTerm = string.Empty;
        resultadosBusqueda.Clear();
    }

    private void RemoverArticulo(ArticuloDTO art)
    {
        articulosSeleccionados.Remove(art);
    }

    private string GenerarHtmlPDF_Articulo(ReporteArticuloDTO articulo, int mes, int anio)
    {
        var sb = new StringBuilder();
        sb.AppendLine("<div style='font-family:Arial; font-size:12px;'>");
        sb.AppendLine("<h2 style='text-align:center;'>REPORTE POR ARTÍCULO</h2>");
        sb.AppendLine($"<p><strong>Artículo:</strong> {articulo.Descripcion}</p>");
        sb.AppendLine($"<p><strong>Mes:</strong> {mes}/{anio}</p>");

        sb.AppendLine("<table border='1' cellpadding='5' cellspacing='0' style='width:60%;'>");
        sb.AppendLine("<thead><tr><th>Almacén</th><th>Total Ventas por Mes</th></tr></thead>");
        sb.AppendLine("<tbody>");
        foreach (var t in articulo.TotalVentasMensual)
        {
            sb.AppendLine("<tr>");
            sb.AppendLine($"<td>{t.NombreAlmacen}</td>");
            sb.AppendLine($"<td>S/ {t.MontoTotal:N2}</td>");
            sb.AppendLine("</tr>");
        }
        sb.AppendLine("</tbody></table>");
        sb.AppendLine("</div>");

        return sb.ToString();
    }
}
