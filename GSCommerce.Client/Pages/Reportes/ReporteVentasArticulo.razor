@page "/reportes/ventas-articulo"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@using System.Text
@using System.Linq
@inject ArticuloService ArticuloService
@inject ReporteService ReporteService
@inject IJSRuntime JS

<ReportsBreadcrumb Title="Ventas por Artículo" />

<div class="row mb-4">
    <div class="col-md-4">
        <label>Mes:</label>
        <InputDate @bind-Value="fechaSeleccionada" class="form-control" />
    </div>
    <div class="col-md-4 position-relative">
        <label>Artículo:</label>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar por nombre o código..." @bind="searchTerm" />
            <button class="btn btn-primary" @onclick="BuscarArticulo">🔍</button>
        </div>
        @if (resultadosBusqueda.Any())
        {
            <ul class="list-group position-absolute w-100" style="z-index:1000;">
                @foreach (var art in resultadosBusqueda)
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => SeleccionarArticulo(art)">
                        @art.IdArticulo - @art.Descripcion
                    </li>
                }
            </ul>
        }
        @if (articuloSeleccionado != null)
        {
            <div class="mt-2"><strong>Seleccionado:</strong> @articuloSeleccionado.Descripcion</div>
        }
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-success w-100" @onclick="ExportarReportePDF">📄 Generar PDF</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-warning text-center">@mensaje</div>
}

@code {
    private DateTime fechaSeleccionada = DateTime.Today;
    private string? idArticuloSeleccionado;
    private string searchTerm = string.Empty;
    private List<ArticuloDTO> resultadosBusqueda = new();
    private ArticuloDTO? articuloSeleccionado;
    private string mensaje = string.Empty;

    private async Task ExportarReportePDF()
    {
        mensaje = string.Empty;

        if (idArticuloSeleccionado == null)
        {
            mensaje = "⚠️ Debes seleccionar un artículo.";
            return;
        }

        var mes = fechaSeleccionada.Month;
        var anio = fechaSeleccionada.Year;

        var reporte = await ReporteService.ObtenerReportePorArticulo(idArticuloSeleccionado, mes, anio);

        if (reporte == null)
        {
            mensaje = "❌ No se encontró información para ese artículo.";
            return;
        }

        var html = GenerarHtmlPDF_Articulo(reporte);
        await JS.InvokeVoidAsync("generarPDFDesdeHTML", html, "Reporte_Ventas_Articulo.pdf");
    }

    private async Task BuscarArticulo()
    {
        resultadosBusqueda.Clear();
        articuloSeleccionado = null;

        if (string.IsNullOrWhiteSpace(searchTerm))
            return;

        var artCodigo = await ArticuloService.BuscarPorCodigoAsync(searchTerm);
        if (artCodigo != null)
        {
            resultadosBusqueda.Add(artCodigo);
            return;
        }

        var resp = await ArticuloService.GetArticulos(1, 10, searchTerm);
        resultadosBusqueda = resp.Data;
    }

    private void SeleccionarArticulo(ArticuloDTO art)
    {
        idArticuloSeleccionado = art.IdArticulo;
        articuloSeleccionado = art;
        searchTerm = $"{art.IdArticulo} - {art.Descripcion}";
        resultadosBusqueda.Clear();
    }

    private string GenerarHtmlPDF_Articulo(ReporteArticuloDTO articulo)
    {
        var sb = new StringBuilder();
        sb.AppendLine("<div style='font-family:Arial; font-size:12px;'>");
        sb.AppendLine("<h2 style='text-align:center;'>REPORTE POR ARTÍCULO</h2>");
        sb.AppendLine($"<p><strong>Artículo:</strong> {articulo.Descripcion}</p>");

        sb.AppendLine("<table border='1' cellpadding='5' cellspacing='0' style='width:100%; border-collapse:collapse;'>");
        sb.AppendLine("<thead><tr><th>Almacén</th><th>Ingreso</th><th>Venta</th><th>Stock</th><th>% Venta</th></tr></thead>");
        sb.AppendLine("<tbody>");
        foreach (var d in articulo.DetallePorAlmacen)
        {
            sb.AppendLine("<tr>");
            sb.AppendLine($"<td>{d.NombreAlmacen}</td>");
            sb.AppendLine($"<td>{d.Ingreso}</td>");
            sb.AppendLine($"<td>{d.Venta}</td>");
            sb.AppendLine($"<td>{d.Stock}</td>");
            sb.AppendLine($"<td>{d.PorcentajeVenta:N2}%</td>");
            sb.AppendLine("</tr>");
        }
        sb.AppendLine("</tbody></table>");
        sb.AppendLine("<br/>");

        sb.AppendLine("<table border='1' cellpadding='5' cellspacing='0' style='width:60%;'>");
        sb.AppendLine("<thead><tr><th>Almacén</th><th>Total Ventas por Mes</th></tr></thead>");
        sb.AppendLine("<tbody>");
        foreach (var t in articulo.TotalVentasMensual)
        {
            sb.AppendLine("<tr>");
            sb.AppendLine($"<td>{t.NombreAlmacen}</td>");
            sb.AppendLine($"<td>S/ {t.MontoTotal:N2}</td>");
            sb.AppendLine("</tr>");
        }
        sb.AppendLine("</tbody></table>");
        sb.AppendLine("</div>");

        return sb.ToString();
    }
}
