@page "/reportes/ventas-articulo"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@using System.Linq
@inject ArticuloService ArticuloService
@inject ReporteService ReporteService
@inject IJSRuntime JS

<ReportsBreadcrumb Title="Ventas por Artículo" />
<div class="row mb-4">
    <div class="col-md-3">
        <label>Desde:</label>
        <InputDate @bind-Value="fechaDesde" class="form-control" />
    </div>
    <div class="col-md-3">
        <label>Hasta:</label>
        <InputDate @bind-Value="fechaHasta" class="form-control" />
    </div>
    <div class="col-md-3 position-relative">
        <label>Artículo:</label>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar por nombre o código..." @bind="searchTerm" />
            <button class="btn btn-primary" @onclick="BuscarArticulo">🔍</button>
        </div>
        @if (resultadosBusqueda.Any())
        {
            <ul class="list-group position-absolute w-100" style="z-index:1000;">
                @foreach (var art in resultadosBusqueda)
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => SeleccionarArticulo(art)">
                        @art.IdArticulo - @art.Descripcion
                    </li>
                }
            </ul>
        }
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-success w-100" @onclick="ExportarExcel">📥 Exportar Excel</button>
    </div>
</div>

@if (articulosSeleccionados.Any())
{
    <div class="mb-3">
        <strong>Seleccionados:</strong>
        <ul class="list-group">
            @foreach (var art in articulosSeleccionados)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @art.IdArticulo - @art.Descripcion
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoverArticulo(art)">✖</button>
                </li>
            }
        </ul>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-warning text-center">@mensaje</div>
}

@code {
    private DateTime fechaDesde = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private DateTime fechaHasta = DateTime.Today;
    private string searchTerm = string.Empty;
    private List<ArticuloDTO> resultadosBusqueda = new();
    private List<ArticuloDTO> articulosSeleccionados = new();
    private string mensaje = string.Empty;

    private async Task ExportarExcel()
    {
        mensaje = string.Empty;

        if (!articulosSeleccionados.Any())
        {
            mensaje = "⚠️ Debes seleccionar al menos un artículo.";
            return;
        }
        if (fechaHasta < fechaDesde)
        {
            mensaje = "⚠️ La fecha hasta debe ser posterior a la fecha desde.";
            return;
        }

        var ids = articulosSeleccionados.Select(a => a.IdArticulo).ToList();
        var reportes = await ReporteService.ObtenerReporteArticulosRango(ids, fechaDesde, fechaHasta);

        if (reportes.Count == 0)
        {
            mensaje = "❌ No se encontró información para los parámetros seleccionados.";
            return;
        }

        var data = reportes.Select(r => new ReporteArticuloExcel
        {
            SheetName = r.IdArticulo,
            Headers = BuildHeaders(r),
            Rows = BuildRows(r)
        }).ToList();

        await JS.InvokeVoidAsync("exportVentasArticuloExcel", data,
            $"VentasArticulo_{fechaDesde:yyyyMMdd}_{fechaHasta:yyyyMMdd}");
    }

    private async Task BuscarArticulo()
    {
        resultadosBusqueda.Clear();

        if (string.IsNullOrWhiteSpace(searchTerm))
            return;

        var artCodigo = await ArticuloService.BuscarPorCodigoAsync(searchTerm);
        if (artCodigo != null)
        {
            resultadosBusqueda.Add(artCodigo);
            return;
        }

        var resp = await ArticuloService.GetArticulos(1, 10, searchTerm);
        resultadosBusqueda = resp.Data;
    }

    private void SeleccionarArticulo(ArticuloDTO art)
    {
        if (!articulosSeleccionados.Any(a => a.IdArticulo == art.IdArticulo))
        {
            articulosSeleccionados.Add(art);
        }
        searchTerm = string.Empty;
        resultadosBusqueda.Clear();
    }

    private void RemoverArticulo(ArticuloDTO art)
    {
        articulosSeleccionados.Remove(art);
    }

    private static string[] BuildHeaders(ReporteArticuloRangoDTO r)
    {
        var headers = new List<string> { "ALMACEN", "COD", "INGRESO", "Descripción" };
        headers.AddRange(r.Meses.Select(m => m.Label));
        headers.AddRange(new[] { "TOTAL", "Fch Ing", "Stock", "% Mercadería vendida", "PC", "PV" });
        return headers.ToArray();
    }

    private static List<object[]> BuildRows(ReporteArticuloRangoDTO r)
    {
        var rows = new List<object[]>();
        foreach (var f in r.Filas)
        {
            var row = new List<object>
            {
                f.NombreAlmacen,
                f.Codigo,
                f.Ingreso,
                r.Descripcion
            };
            row.AddRange(r.Meses.Select(m => (object)f.VentasPorMes[m.Key]));
            row.Add(f.TotalVentas);
            row.Add(f.FechaPrimerIngreso?.ToString("dd/MM/yyyy") ?? "");
            row.Add(f.Stock);
            row.Add(f.PorcentajeVendida);
            row.Add(f.PC);
            row.Add(f.PV);
            rows.Add(row.ToArray());
        }

        var totalRow = new List<object> { "Total", "", r.Totales.Ingreso, "" };
        totalRow.AddRange(r.Meses.Select(m => (object)r.Totales.VentasPorMes[m.Key]));
        totalRow.Add(r.Totales.TotalVentas);
        totalRow.Add("");
        totalRow.Add(r.Totales.Stock);
        totalRow.Add(r.Totales.PorcentajeVendida);
        totalRow.Add("");
        totalRow.Add("");
        rows.Add(totalRow.ToArray());

        return rows;
    }

    private class ReporteArticuloExcel
    {
        public string SheetName { get; set; } = string.Empty;
        public string[] Headers { get; set; } = Array.Empty<string>();
        public List<object[]> Rows { get; set; } = new();
    }
}
