@page "/reportes/utilidad-tiendas"
@using System.Text
@using System.Linq
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@inject ReporteService ReporteService
@inject AlmacenService AlmacenService
@inject AuthService AuthService
@inject IJSRuntime JS
@implements IAsyncDisposable

<ReportsBreadcrumb Title="Utilidades por Tienda" />

<div class="row mb-3">
    <div class="col-md-4">
        <label>Desde:</label>
        <InputDate @bind-Value="desde" class="form-control" />
    </div>
    <div class="col-md-4">
        <label>Hasta:</label>
        <InputDate @bind-Value="hasta" class="form-control" />
    </div>

    @if (cargo == "ADMINISTRADOR")
    {
        <div class="col-md-4">
            <label>Almacén:</label>
            <select class="form-select" @bind="idAlmacenSeleccionado">
                <option value="0">-- Todos --</option>
                @foreach (var a in almacenes)
                {
                    <option value="@a.IdAlmacen">@a.Nombre</option>
                }
            </select>
        </div>
    }
    else if (cargo == "CAJERO")
    {
        <div class="col-md-4">
            <label>Almacén:</label>
            <select class="form-select" @bind="idAlmacenSeleccionado" disabled>
                @foreach (var a in almacenes)
                {
                    <option value="@a.IdAlmacen">@a.Nombre</option>
                }
            </select>
        </div>
    }
</div>

<div class="row mb-3">
    <div class="col-md-6 d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="Buscar"><i class="bi bi-search"></i>Buscar</button>
    </div>
    <div class="col-md-6 d-flex align-items-end">
        <button class="btn btn-success w-100" @onclick="ExportarPDF"><i class="bi bi-filetype-pdf"></i> Descargar PDF</button>
    </div>
</div>

@if (reporte.Any())
{
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>TIENDA</th>
                <th>UTILIDAD</th>
                <th>%</th>
                <th>VENTA</th>
                <th>%</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in reporte)
            {
                <tr>
                    <td>@r.Tienda</td>
                    <td>S/ @r.Utilidad.ToString("N2")</td>
                    <td>@r.PorcentajeUtilidad.ToString("N2")%</td>
                    <td>S/ @r.Venta.ToString("N2")</td>
                    <td>@r.PorcentajeVenta.ToString("N2")%</td>
                </tr>
            }
            <tr class="table-light fw-bold">
                <td>TOTAL</td>
                <td class="text-danger">S/ @totalUtilidad.ToString("N2")</td>
                <td>@utilidadGlobal.ToString("N2")%</td>
                <td class="text-danger">S/ @totalVenta.ToString("N2")</td>
                <td>100%</td>
            </tr>
        </tbody>
    </table>

    <div class="mb-2 text-center fw-bold" style="color:#1a54d3;">
        UTILIDAD GLOBAL (%): @utilidadGlobal.ToString("N2")
    </div>

    <canvas id="utilidadTiendasChart"></canvas>
}
else
{
    <div class="alert alert-info text-center">No se encontraron resultados.</div>
}

@code {
    private DateTime desde = DateTime.Today.AddDays(-7);
    private DateTime hasta = DateTime.Today;
    private List<ReporteUtilidadTiendasDTO> reporte = new();
    private List<AlmacenDTO> almacenes = new();
    private int idAlmacenSeleccionado;
    private string? cargo;
    private bool renderChart;
    private IJSObjectReference? _chartModule;

    private decimal totalVenta => reporte.Sum(r => r.Venta);
    private decimal totalUtilidad => reporte.Sum(r => r.Utilidad);
    private double utilidadGlobal => totalVenta > 0 ? (double)(totalUtilidad / totalVenta * 100) : 0;

    protected override async Task OnInitializedAsync()
    {
        cargo = await AuthService.GetUserCargo();
        var idAlmacenUsuario = await AuthService.GetUserAlmacenId();

        almacenes = await AlmacenService.GetAlmacenes() ?? new();

        if (cargo == "CAJERO")
        {
            idAlmacenSeleccionado = idAlmacenUsuario ?? 0;
            almacenes = almacenes.Where(a => a.IdAlmacen == idAlmacenSeleccionado).ToList();
        }

        await Buscar();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _chartModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/chartInterop.js?v=20250822");
        }

        if (renderChart && reporte.Any() && _chartModule is not null)
        {
            renderChart = false;
            await _chartModule.InvokeVoidAsync("renderUtilidadTiendasChart", "utilidadTiendasChart", reporte);
        }
    }

    private async Task Buscar()
    {
        int? idAlmacen = cargo == "ADMINISTRADOR"
            ? (idAlmacenSeleccionado > 0 ? idAlmacenSeleccionado : (int?)null)
            : idAlmacenSeleccionado;

        reporte = await ReporteService.ObtenerUtilidadTiendas(desde, hasta, idAlmacen);
        renderChart = true;
        StateHasChanged();
    }

    private async Task ExportarPDF()
    {
        // el gráfico en PDF
        if (_chartModule is not null && reporte.Any())
            await _chartModule.InvokeVoidAsync("injectChartImageForPdf", "utilidadTiendasChart");

        var sb = new StringBuilder();
        sb.AppendLine(@"
<div style='font-family:Arial,Helvetica,sans-serif; font-size:12px; color:#000;'>
  <div style='background:#ddd; border:1px solid #666; padding:10px; text-align:center; font-size:20px; font-weight:bold;'>
    UTILIDADES POR TIENDA
  </div>
  <div style='text-align:center; margin:6px 0 14px 0; font-weight:bold;'>
    Del " + desde.ToString("dd/MM/yyyy") + " al " + hasta.ToString("dd/MM/yyyy") + @"
  </div>

  <div style='border-top:1px dotted #888; margin:6px 0;'></div>

  <table style='width:100%; border-collapse:collapse;'>
    <thead>
      <tr>
        <th style='text-align:left; padding:6px 4px;'>TIENDA</th>
        <th style='text-align:right; padding:6px 4px;'>UTILIDAD</th>
        <th style='text-align:right; padding:6px 4px;'>%</th>
        <th style='text-align:right; padding:6px 4px;'>VENTA</th>
        <th style='text-align:right; padding:6px 4px;'>%</th>
      </tr>
    </thead>
    <tbody>");

        foreach (var r in reporte)
        {
            sb.AppendLine($@"
      <tr>
        <td style='padding:6px 4px;'>{r.Tienda}</td>
        <td style='padding:6px 4px; text-align:right; font-weight:bold;'>{r.Utilidad:N2}</td>
        <td style='padding:6px 4px; text-align:right;'>{r.PorcentajeUtilidad:N2}</td>
        <td style='padding:6px 4px; text-align:right;'>{r.Venta:N2}</td>
        <td style='padding:6px 4px; text-align:right;'>{r.PorcentajeVenta:N2}</td>
      </tr>");
        }

        sb.AppendLine(@"
    </tbody>
  </table>

  <div style='border-bottom:1px dotted #888; margin:10px 0 6px 0;'></div>

  <table style='width:100%; border-collapse:collapse; font-weight:bold;'>
    <tr>
      <td style='padding:6px 4px; color:#c00;'>S/ " + totalUtilidad.ToString("N2") + @"</td>
      <td style='padding:6px 4px; text-align:right; color:#c00;'>S/ " + totalVenta.ToString("N2") + @"</td>
    </tr>
  </table>

  <div style='text-align:center; margin:6px 0 12px 0; color:#1a54d3; font-weight:bold;'>
    UTILIDAD GLOBAL (%): " + utilidadGlobal.ToString("N2") + @"
  </div>

  <div id='chart-holder' style='width:100%; height:360px;'></div>
</div>");

        await JS.InvokeVoidAsync("generarPDFDesdeHTML", sb.ToString(), $"Reporte_Utilidad_Tiendas_{DateTime.Now:yyyyMMdd_HHmmss}");
    }

    public async ValueTask DisposeAsync()
    {
        if (_chartModule is not null)
            await _chartModule.DisposeAsync();
    }
}