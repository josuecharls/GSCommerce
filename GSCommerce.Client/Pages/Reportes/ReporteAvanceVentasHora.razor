@page "/reportes/avance-ventas-hora"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@using System.Linq
@using Blazored.LocalStorage
@inject ReporteService ReporteService
@inject AuthService AuthService
@inject AlmacenService AlmacenService
@inject IJSRuntime JS
@inject ILocalStorageService LocalStorage

<ReportsBreadcrumb Title="Avance de Ventas por Hora" />

<div class="row g-3 mb-3">
    <div class="col-md-3">
        <label>Fecha:</label>
        <InputDate @bind-Value="fechaSeleccionada" class="form-control" />
    </div>
    <div class="col-md-3">
        <label>Hora:</label>
        <select class="form-select" @bind="horaSeleccionada">
            @foreach (var hora in horas)
            {
                <option value="@hora">@hora.ToString("00"):00</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <label>Meta diaria (S/):</label>
        <InputNumber @bind-Value="Meta" class="form-control" step="0.01" min="0" disabled="@(!PuedeEditarMeta)" />
    </div>
    @if (cargo == "ADMINISTRADOR")
    {
        <div class="col-md-3">
            <label>Almacén:</label>
            <select class="form-select" value="@selectedAlmacen" @onchange="OnAlmacenChanged">
                <option value="0">Todos</option>
                @foreach (var alm in almacenes)
                {
                    <option value="@alm.IdAlmacen">@alm.Nombre</option>
                }
            </select>
        </div>
    }
    else if (almacenes.Any())
    {
        <div class="col-md-3">
            <label>Almacén:</label>
            <input class="form-control" value="@almacenes.First().Nombre" disabled />
        </div>
    }
</div>

<div class="row g-3 mb-4">
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="Buscar" disabled="@cargando"><i class="bi bi-search"></i> Buscar</button>
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-success w-100" @onclick="ExportarExcel" disabled="@cargando"><i class="bi bi-file-earmark-spreadsheet"></i> Exportar Excel</button>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}
@{
    var detallesVisibles = ObtenerDetallesParaMostrar().ToList();
}
@if (cargando)
{
    <div class="text-center my-4">
        <div class="spinner-border text-primary" role="status"></div>
    </div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-header bg-success text-white">
            <div class="d-flex flex-column flex-md-row justify-content-between">
                <span class="fw-bold text-uppercase">Avances de ventas GSHOP</span>
                <small class="text-white-50">@ObtenerDescripcionRango()</small>
            </div>
            <small class="text-white-50">@ObtenerDescripcionAlmacen()</small>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-bordered table-sm text-center mb-0">
                    <tbody>
                        <tr style="background-color:#c6efce;">
                            <th class="text-start">Meta diaria:</th>
                            <td class="fw-bold text-end">S/ @Meta.ToString("N2")</td>
                        </tr>
                        <tr style="background-color:#ffeb9c;">
                            <th class="text-start">Avance por hora:</th>
                            <td class="fw-bold text-end">S/ @avance.TotalVentas.ToString("N2")</td>
                        </tr>
                        <tr style="background-color:#ddebf7;">
                            <th class="text-start">Avance acumulado:</th>
                            <td class="fw-bold text-end">S/ @avance.TotalVentasDia.ToString("N2")</td>
                        </tr>
                        <tr style="background-color:#f8cbad;">
                            <th class="text-start">Diferencia vs meta:</th>
                            <td class="fw-bold text-end @GetDifferenceTextClass()">@FormatearDiferencia(DiferenciaMonto)</td>
                        </tr>
                        <tr style="background-color:#e2f0d9;">
                            <th class="text-start">Tickets por hora:</th>
                            <td class="fw-bold">@avance.Tickets</td>
                        </tr>
                        <tr style="background-color:#d9e1f2;">
                            <th class="text-start">Tickets acumulados:</th>
                            <td class="fw-bold">@avance.TicketsDia</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer text-end small text-muted">
            Avance acumulado hasta @ObtenerDescripcionCorte(): S/ @avance.TotalVentasDia.ToString("N2") (Tickets: @avance.TicketsDia)
        </div>
    </div>
    @if (detallesVisibles.Any())
    {
        <div class="card shadow-sm mt-4">
            <div class="card-header bg-light">
                <span class="fw-bold text-uppercase text-secondary">Detalle por hora del día</span>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-sm text-center mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="text-center">Hora</th>
                            <th class="text-center">Intervalo</th>
                            <th class="text-end">Avance por hora (S/)</th>
                            <th class="text-end">Avance acumulado (S/)</th>
                            <th class="text-center">Tickets hora</th>
                            <th class="text-center">Tickets acumulados</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in detallesVisibles)
                        {
                            <tr class="@(detalle.HoraInicio == avance.HoraInicio ? "table-success fw-semibold" : string.Empty)">
                                <td>@detalle.HoraInicio.ToString("HH:mm")</td>
                                <td>@detalle.HoraInicio.ToString("HH:mm") - @detalle.HoraFin.ToString("HH:mm")</td>
                                <td class="text-end">S/ @detalle.TotalHora.ToString("N2")</td>
                                <td class="text-end">S/ @detalle.TotalAcumulado.ToString("N2")</td>
                                <td>@detalle.TicketsHora</td>
                                <td>@detalle.TicketsAcumulados</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {
    private readonly List<int> horas = Enumerable.Range(0, 24).ToList();
    private const decimal MetaPredeterminada = 4500m;
    private const string MetaStorageKeyPrefix = "ReporteAvanceHoraMeta_";
    private readonly Dictionary<int, decimal> metasPorAlmacen = new();
    private DateTime fechaSeleccionada = DateTime.Today;
    private int horaSeleccionada = DateTime.Now.Hour;
    private List<AlmacenDTO> almacenes = new();
    private int selectedAlmacen;
    private string cargo = string.Empty;
    private bool cargando;
    private string? mensajeError;
    private ReporteAvanceHoraDTO avance = new();
    private decimal metaActual = MetaPredeterminada;
    private bool suprimirGuardadoMeta;
    private bool PuedeEditarMeta => cargo == "ADMINISTRADOR";

    private decimal Meta
    {
        get => metaActual;
        set
        {
            if (metaActual == value)
            {
                return;
            }

            metaActual = value;

            if (!suprimirGuardadoMeta && PuedeEditarMeta)
            {
                _ = InvokeAsync(() => GuardarMetaSeleccionadaAsync(value));
            }
        }
    }

    private decimal DiferenciaMonto => avance.TotalVentasDia - Meta;

    protected override async Task OnInitializedAsync()
    {
        cargo = await AuthService.GetUserCargo() ?? string.Empty;
        var idAlmacenUsuario = await AuthService.GetUserAlmacenId();

        if (cargo == "ADMINISTRADOR")
        {
            almacenes = await AlmacenService.GetAlmacenes() ?? new();
            selectedAlmacen = 0;
        }
        else if (idAlmacenUsuario.HasValue)
        {
            selectedAlmacen = idAlmacenUsuario.Value;
            var almacen = await AlmacenService.GetAlmacenById(selectedAlmacen);
            if (almacen != null)
            {
                almacenes = new List<AlmacenDTO> { almacen };
            }
        }

        await CargarMetaSeleccionadaAsync();
        await Buscar();
    }

    private async Task Buscar()
    {
        cargando = true;
        mensajeError = null;
        var inicio = fechaSeleccionada.Date.AddHours(horaSeleccionada);
        var fin = inicio.AddHours(1);

        try
        {
            int? filtroAlmacen = null;
            if (cargo == "ADMINISTRADOR")
            {
                filtroAlmacen = selectedAlmacen > 0 ? selectedAlmacen : null;
            }
            else if (selectedAlmacen > 0)
            {
                filtroAlmacen = selectedAlmacen;
            }

            avance = await ReporteService.ObtenerAvanceVentasHora(inicio, fin, filtroAlmacen);
        }
        catch
        {
            mensajeError = "No se pudo obtener el reporte. Inténtelo nuevamente.";
            avance = new ReporteAvanceHoraDTO
            {
                HoraInicio = inicio,
                HoraFin = fin,
                TotalVentas = 0m,
                TotalVentasDia = 0m,
                Tickets = 0,
                TicketsDia = 0,
                DetalleHoras = new List<ReporteAvanceHoraDetalleDTO>()
            };
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task ExportarExcel()
    {
        var headers = new[]
        {
            "Concepto / Hora",
            "Detalle",
            "Monto (S/)",
            "Monto acumulado (S/)",
            "Tickets",
            "Tickets acumulados"
        };

        var (inicioSeleccionado, _) = ObtenerIntervaloSeleccionado();
        var intervaloHoras = ObtenerDescripcionIntervaloHoras();
        var horaFinTexto = ObtenerDescripcionHoraFinCorta();

        var rows = new List<object[]>
        {
            new object[] { "Meta diaria", string.Empty, Math.Round(Meta, 2), null, null, null },
            new object[] { "Avance por hora", intervaloHoras, Math.Round(avance.TotalVentas, 2), null, null, null },
            new object[] { "Avance acumulado", $"Hasta {horaFinTexto}", null, Math.Round(avance.TotalVentasDia, 2), null, null },
            new object[] { "Diferencia vs meta", string.Empty, Math.Round(DiferenciaMonto, 2), null, null, null },
            new object[] { "Tickets por hora", intervaloHoras, null, null, avance.Tickets, null },
            new object[] { "Tickets acumulados", $"Hasta {horaFinTexto}", null, null, null, avance.TicketsDia },
            new object[] { string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty },
            new object[] { "Hora", "Intervalo", "Monto (S/)", "Monto acumulado (S/)", "Tickets", "Tickets acumulados" }
        };

        var detalles = ObtenerDetallesParaMostrar().ToList();
        if (!detalles.Any())
        {
            detalles = avance.DetalleHoras?.OrderBy(d => d.HoraInicio).ToList() ?? new List<ReporteAvanceHoraDetalleDTO>();
        }

        foreach (var detalle in detalles)
        {
            rows.Add(new object[]
            {
                detalle.HoraInicio.ToString("HH:mm"),
                $"{detalle.HoraInicio:HH:mm} - {detalle.HoraFin:HH:mm}",
                Math.Round(detalle.TotalHora, 2),
                Math.Round(detalle.TotalAcumulado, 2),
                detalle.TicketsHora,
                detalle.TicketsAcumulados
            });
        }

        var fileName = $"AvanceVentas_{inicioSeleccionado:yyyyMMdd_HH}";
        await JS.InvokeVoidAsync("exportToExcel", headers, rows.ToArray(), fileName);
    }

    private async Task OnAlmacenChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var nuevoAlmacen))
        {
            if (selectedAlmacen != nuevoAlmacen)
            {
                selectedAlmacen = nuevoAlmacen;
                await CargarMetaSeleccionadaAsync();
            }
        }
    }

    private async Task CargarMetaSeleccionadaAsync()
    {
        var idMeta = ObtenerIdAlmacenParaMeta();
        var metaAlmacen = await ObtenerMetaAsync(idMeta);

        suprimirGuardadoMeta = true;
        Meta = metaAlmacen;
        suprimirGuardadoMeta = false;
    }

    private async Task<decimal> ObtenerMetaAsync(int almacenId)
    {
        if (metasPorAlmacen.TryGetValue(almacenId, out var metaGuardada))
        {
            return metaGuardada;
        }

        try
        {
            var storageKey = ObtenerMetaStorageKey(almacenId);
            if (await LocalStorage.ContainKeyAsync(storageKey))
            {
                var almacenMeta = await LocalStorage.GetItemAsync<decimal>(storageKey);
                metasPorAlmacen[almacenId] = almacenMeta;
                return almacenMeta;
            }
        }
        catch
        {
            // Si no se puede acceder al almacenamiento local, se utilizará la meta predeterminada.
        }

        metasPorAlmacen[almacenId] = MetaPredeterminada;
        return MetaPredeterminada;
    }

    private async Task GuardarMetaSeleccionadaAsync(decimal valor)
    {
        var idMeta = ObtenerIdAlmacenParaMeta();
        metasPorAlmacen[idMeta] = valor;

        try
        {
            await LocalStorage.SetItemAsync(ObtenerMetaStorageKey(idMeta), valor);
        }
        catch
        {
            // Si no se puede guardar la meta no se lanza una excepción para no interrumpir el flujo del reporte.
        }
    }

    private int ObtenerIdAlmacenParaMeta() => selectedAlmacen;

    private static string ObtenerMetaStorageKey(int almacenId) => $"{MetaStorageKeyPrefix}{almacenId}";

    private (DateTime Inicio, DateTime Fin) ObtenerIntervaloSeleccionado()
    {
        var inicio = avance.HoraInicio == default
            ? fechaSeleccionada.Date.AddHours(horaSeleccionada)
            : avance.HoraInicio;

        var fin = avance.HoraFin == default || avance.HoraFin <= inicio
            ? inicio.AddHours(1)
            : avance.HoraFin;

        return (inicio, fin);
    }

    private string ObtenerDescripcionCorte()
    {
        var (_, fin) = ObtenerIntervaloSeleccionado();
        return fin.ToString("dd/MM/yyyy HH:mm");
    }

    private string ObtenerDescripcionIntervaloHoras()
    {
        var (inicio, fin) = ObtenerIntervaloSeleccionado();
        return $"{inicio:HH:mm} - {fin:HH:mm}";
    }

    private string ObtenerDescripcionHoraFinCorta()
    {
        var (_, fin) = ObtenerIntervaloSeleccionado();
        return fin.ToString("HH:mm");
    }

    private IEnumerable<ReporteAvanceHoraDetalleDTO> ObtenerDetallesParaMostrar()
    {
        if (avance.DetalleHoras == null || avance.DetalleHoras.Count == 0)
        {
            return Enumerable.Empty<ReporteAvanceHoraDetalleDTO>();
        }

        var (inicioSeleccionado, finSeleccionado) = ObtenerIntervaloSeleccionado();
        var limite = finSeleccionado;

        var ultimoConDatos = avance.DetalleHoras
            .Where(d => d.TotalHora > 0m || d.TicketsHora > 0)
            .OrderBy(d => d.HoraFin)
            .LastOrDefault();

        if (ultimoConDatos != null && ultimoConDatos.HoraFin > limite)
        {
            limite = ultimoConDatos.HoraFin;
        }

        var detalles = avance.DetalleHoras
            .Where(d => d.HoraInicio < limite)
            .OrderBy(d => d.HoraInicio)
            .ToList();

        if (!detalles.Any())
        {
            var seleccionado = avance.DetalleHoras
                .FirstOrDefault(d => inicioSeleccionado >= d.HoraInicio && inicioSeleccionado < d.HoraFin);

            if (seleccionado != null)
            {
                detalles.Add(seleccionado);
            }
        }

        var primerConDatos = detalles.FirstOrDefault(d => d.TotalHora > 0m || d.TicketsHora > 0);
        var referenciaInicio = primerConDatos?.HoraInicio ?? inicioSeleccionado;
        if (inicioSeleccionado < referenciaInicio)
        {
            referenciaInicio = inicioSeleccionado;
        }

        return detalles
            .Where(d => d.HoraInicio >= referenciaInicio)
            .OrderBy(d => d.HoraInicio);
    }

    private string ObtenerDescripcionRango()
    {
        var (inicio, fin) = ObtenerIntervaloSeleccionado();
        return $"{inicio:dd/MM/yyyy HH:mm} - {fin:dd/MM/yyyy HH:mm}";
    }

    private string ObtenerDescripcionAlmacen()
    {
        if (cargo == "ADMINISTRADOR")
        {
            if (selectedAlmacen <= 0)
            {
                return "Todos los almacenes";
            }

            var almacen = almacenes.FirstOrDefault(a => a.IdAlmacen == selectedAlmacen);
            return almacen?.Nombre ?? $"Almacén {selectedAlmacen}";
        }

        if (almacenes.Any())
        {
            return almacenes.First().Nombre;
        }

        return "Almacén no asignado";
    }

    private string FormatearDiferencia(decimal monto)
    {
        var signo = monto < 0 ? "-" : string.Empty;
        return $"{signo}S/ {Math.Abs(monto):N2}";
    }

    private string GetDifferenceTextClass() => DiferenciaMonto < 0 ? "text-danger" : "text-success";
}