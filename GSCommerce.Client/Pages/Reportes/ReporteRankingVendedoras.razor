@page "/reportes/ranking-vendedoras"
@using GSCommerce.Client.Components
@using GSCommerce.Client.Models
@using GSCommerce.Client.Models.DTOs.Reportes
@using GSCommerce.Client.Services
@using System.Text
@using System.Linq
@inject ReporteService ReporteService
@inject AlmacenService AlmacenService
@inject AuthService AuthService
@inject IJSRuntime JS

<ReportsBreadcrumb Title="Ranking de Vendedoras" />

<div class="row mb-3">
    <div class="col-md-4">
        <label>Desde:</label>
        <InputDate @bind-Value="desde" class="form-control" />
    </div>
    <div class="col-md-4">
        <label>Hasta:</label>
        <InputDate @bind-Value="hasta" class="form-control" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="BuscarRanking"><i class="bi bi-search"></i> Buscar</button>
    </div>
</div>
<div class="row mb-3">
    @if (cargo == "ADMINISTRADOR")
    {
        <div class="col-md-4">
            <label><input type="radio" value="false" @onchange="e => porAlmacen = false" checked="@(!porAlmacen)" /> Global</label>
            <label class="ms-3"><input type="radio" value="true" @onchange="e => porAlmacen = true" checked="@(porAlmacen)" /> Por Almacén</label>
            <select class="form-select mt-1" @bind="idAlmacenSeleccionado" disabled="@(porAlmacen == false)">
                <option value="0">-- Seleccionar almacén --</option>
                @foreach (var a in almacenes)
                {
                    <option value="@a.IdAlmacen">@a.Nombre</option>
                }
            </select>
        </div>
    }
    else if (cargo == "CAJERO")
    {
        <div class="col-md-4">
            <label>Almacén:</label>
            <select class="form-select mt-1" @bind="idAlmacenSeleccionado" disabled>
                @foreach (var a in almacenes)
                {
                    <option value="@a.IdAlmacen">@a.Nombre</option>
                }
            </select>
        </div>
    }
</div>
<div class="row mb-3">
    <div class="col d-flex justify-content-end">
        @if (cargo == "CAJERO")
        {
            <button class="btn btn-success" @onclick="ExportarExcel"><i class="bi bi-file-earmark-excel-fill"></i> Exportar a Excel</button>
        }
        else if (cargo == "ADMINISTRADOR")
        {
            <button class="btn btn-danger" @onclick="ExportarPDF"><i class="bi bi-filetype-pdf"></i> Descargar PDF</button>
        }
    </div>
</div>
@if (ranking.Any())
{
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Vendedora</th>
                <th>Estado</th>
                <th>Ventas Realizadas</th>
                <th>Monto Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ranking.Select((r, i) => new { r, i }))
            {
                <tr>
                    <td>@(item.i + 1)</td>
                    <td>@item.r.Vendedora</td>
                    <td>@(item.r.Activo ? "Activo" : "Inactivo")</td>
                    <td>@item.r.VentasRealizadas</td>
                    <td>S/ @item.r.TotalVentas.ToString("N2")</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info text-center">No hay ventas registradas en este rango.</div>
}

@code {
    private List<RankingVendedoraDTO> ranking = new();
    private DateTime desde = DateTime.Today;
    private List<AlmacenDTO> almacenes = new();
    private int idAlmacenSeleccionado;
    private bool porAlmacen = false;
    private DateTime hasta = DateTime.Today;
    private string? cargo;
    private int? idAlmacenUsuario;

    protected override async Task OnInitializedAsync()
    {
        almacenes = await AlmacenService.GetAlmacenes() ?? new();
        cargo = await AuthService.GetUserCargo();
        idAlmacenUsuario = await AuthService.GetUserAlmacenId();

        if (cargo == "CAJERO")
        {
            porAlmacen = true;
            idAlmacenSeleccionado = idAlmacenUsuario ?? 0;
            almacenes = almacenes.Where(a => a.IdAlmacen == idAlmacenSeleccionado).ToList();
        }

        await BuscarRanking();
    }


    private async Task BuscarRanking()
    {
        ranking = await ReporteService.ObtenerRankingVendedoras(
            desde,
            hasta,
            porAlmacen ? idAlmacenSeleccionado : (int?)null,
            porAlmacen);
    }


    private async Task ExportarExcel()
    {
        var headers = new[] { "Ranking", "Vendedor", "Estado", "Cantidad", "Monto" };
        var rows = ranking.Select((r, i) => new object[]
        {
            i + 1,
            r.Vendedora,
            r.Activo ? "Activo" : "Inactivo",
            r.VentasRealizadas,
            r.TotalVentas
        }).ToArray();

        await JS.InvokeVoidAsync("exportToExcel", headers, rows, $"RankingVendedoras_{desde:yyyyMMdd}_{hasta:yyyyMMdd}");
    }

    private async Task ExportarPDF()
    {
        var sb = new StringBuilder();
        sb.AppendLine("<div style='font-family:Arial;font-size:12px;'>");
        sb.AppendLine("<h2 style='text-align:center;'>REPORTE DE VENTAS - VENDEDORES</h2>");
        sb.AppendLine($"<p>Del {desde:dd/MM/yyyy} al {hasta:dd/MM/yyyy}</p>");

        var almacenesPdf = porAlmacen && idAlmacenSeleccionado > 0
            ? almacenes.Where(a => a.IdAlmacen == idAlmacenSeleccionado).ToList()
            : almacenes;

        foreach (var alm in almacenesPdf)
        {
            sb.AppendLine($"<h3>{alm.Nombre}:</h3>");
            var datos = await ReporteService.ObtenerRankingVendedoras(desde, hasta, alm.IdAlmacen, true);

            if (datos.Any())
            {
                sb.AppendLine("<table border='1' cellpadding='5' cellspacing='0' style='width:100%; border-collapse:collapse;'>");
                sb.AppendLine("<thead><tr><th>#</th><th>Vendedor</th><th>Estado</th><th>Cantidad</th><th>Monto</th></tr></thead>");
                sb.AppendLine("<tbody>");
                var index = 1;
                foreach (var d in datos)
                {
                    sb.AppendLine("<tr>");
                    sb.AppendLine($"<td>{index}</td>");
                    sb.AppendLine($"<td>{d.Vendedora}</td>");
                    sb.AppendLine($"<td>{(d.Activo ? "Activo" : "Inactivo")}</td>");
                    sb.AppendLine($"<td>{d.VentasRealizadas}</td>");
                    sb.AppendLine($"<td>S/ {d.TotalVentas:N2}</td>");
                    sb.AppendLine("</tr>");
                    index++;
                }
                sb.AppendLine("</tbody></table>");
            }
            else
            {
                sb.AppendLine("<p>No hay ventas registradas.</p>");
            }
        }

        sb.AppendLine("</div>");

        await JS.InvokeVoidAsync("generarPDFDesdeHTML", sb.ToString(), $"Reporte_Ranking_Vendedoras_{DateTime.Now:yyyyMMdd_HHmmss}");
    }
}
