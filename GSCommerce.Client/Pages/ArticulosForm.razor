@page "/articulo-form"
@page "/articulo-form/{dummy}"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject ArticuloService ArticuloService
@inject ProveedorService ProveedorService
@using GSCommerce.Client.Pages
@inject NavigationManager Navigation
@inject ArticuloVarianteService ArticuloVarianteService
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

<h3>📌 Nuevo Artículo</h3>

@if (!isLoading)
{
    <div class="card p-4">
        <div class="row">
            <!-- Izquierda -->
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Código</label>
                    <input type="text" class="form-control" @bind="articulo.IdArticulo" readonly />
                </div>
                <div class="mb-3">
                    <label class="form-label">Descripción</label>
                    <input type="text" class="form-control" @bind="articulo.Descripcion" readonly />
                </div>
                <div class="mb-3">
                    <label class="form-label">Descripción Corta</label>
                    <input type="text" class="form-control" @bind="articulo.DescripcionCorta" readonly />
                </div>
                <div class="mb-3">
                    <label class="form-label">Familia</label>
                    <select class="form-control" @bind="articulo.Familia" @bind:event="onchange">
                        <option>Seleccionar</option>
                        <option value="Pantalón">Pantalón</option>
                        <option value="Camisa">Camisa</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Línea</label>
                    <input type="text" class="form-control" @bind="articulo.Linea" @oninput="ActualizarDescripcion" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Marca</label>
                    <input type="text" class="form-control" @bind="articulo.Marca" @oninput="ActualizarDescripcion" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Material</label>
                    <input type="text" class="form-control" @bind="articulo.Material" @oninput="ActualizarDescripcion" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Modelo</label>
                    <input type="text" class="form-control" @bind="articulo.Modelo" @oninput="ActualizarDescripcion" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Color</label>
                    <input type="text" class="form-control" @bind="articulo.Color" @oninput="ActualizarDescripcion" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Talla</label>
                    <input type="text" class="form-control" @bind="articulo.Talla" @oninput="ActualizarDescripcion" />
                </div>
                <div>

                </div>
            </div>

            <!-- Derecha -->
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Proveedor</label>
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="rucProveedor" @onblur="BuscarProveedorPorRuc" />
                        <button class="btn btn-secondary" @onclick="() => mostrarProveedorModal = true">Buscar</button>
                    </div>
                    <div class="mt-1"><strong>@nombreProveedor</strong></div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Unidad de Almacén</label>
                    <input type="text" class="form-control" @bind="articulo.UnidadAlmacen" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Moneda de Costeo</label>
                    <select class="form-control" @bind="articulo.MonedaCosteo">
                        <option value="SOLES">Soles</option>
                        <option value="DOLARES">Dólares</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Precio Compra</label>
                    <input type="number" class="form-control" @bind="articulo.PrecioCompra" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Precio Venta</label>
                    <input type="number" class="form-control" @bind="articulo.PrecioVenta" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Estado</label>
                    <select class="form-control" @bind="articulo.Estado">
                        <option value="true">Activo</option>
                        <option value="false">Inactivo</option>
                    </select>
                </div>

                <!-- Imagen del artículo -->
                <div class="mb-3 text-center">
                    <label class="form-label">Imagen del artículo</label><br />
                    <img src="@articulo.Foto" class="img-thumbnail" width="100" style="display: @(string.IsNullOrEmpty(articulo.Foto) ? "none" : "block")" />
                    <InputFile OnChange="UploadImage" accept="image/*" />
                </div>

                <!-- Código de barras -->
                <div class="mb-3 text-center">
                    <label class="form-label">Código de Barras</label><br />
                    <img src="https://barcodeapi.org/api/128/@(articulo.IdArticulo)" class="img-thumbnail" width="150" />
                    <div><strong>@articulo.IdArticulo</strong></div>
                    <button class="btn btn-secondary mt-2 me-2" @onclick="() => mostrarModal = true">📄 Imprimir</button>
                    <button class="btn btn-info mt-2" @onclick="() => mostrarModalQR = true">📱 QR</button>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Estación</label>
                    <input type="text" class="form-control" @bind="articulo.Estacion" @oninput="ActualizarDescripcion" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Detalle</label>
                    <input type="text" class="form-control" @bind="articulo.Detalle" @oninput="ActualizarDescripcion" />
                </div>
            </div>
        </div>

        <!-- Botones -->
        <div class="text-center mt-3">
            <button class="btn btn-primary" @onclick="SaveArticulo">💾 Guardar</button>
            <button class="btn btn-danger" @onclick="Cancel">❌ Cancelar</button>
        </div>
    </div>
    <style>
        @@media print {
        body * {
        visibility: hidden !important;
        }

        .modal,
        .modal-backdrop {
        visibility: hidden !important;
        }

        .etiqueta-imprimir,
        .etiqueta-imprimir * {
        visibility: visible !important;
        }

        .etiqueta-imprimir {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 58mm; /* Ajusta si tu etiqueta es más chica */
        height: auto;
        margin: auto;
        padding: 5mm;
        font-size: 10pt;
        page-break-inside: avoid;
        background: white;
        }

        .no-print {
        display: none !important;
        }

        @@page {
        margin: 0;
        }
        }
    </style>
}
else
{
    <p>Cargando...</p>
}
@if (mostrarModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-4 text-center">
                <h4>🖨️ Imprimir Etiqueta</h4>
                <hr />
                <div class="etiqueta-imprimir">
                    <img src="https://barcodeapi.org/api/128/@(articulo.IdArticulo)" width="200" />
                    <div style="font-weight:bold; margin-top:6px">@articulo.DescripcionCorta</div>
                    <div style="font-size:small">Código: @articulo.IdArticulo</div>
                </div>
                <div class="mt-3 no-print">
                    <button class="btn btn-success me-2" @onclick="Imprimir">🖨️ Imprimir</button>
                    <button class="btn btn-secondary" @onclick="()=> mostrarModal = false">❌ Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}
@if (mostrarModalQR)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-4 text-center">
                <h4>📱 Código QR</h4>
                <hr />
                <div class="etiqueta-imprimir">
                    <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=@(articulo.IdArticulo)" width="200" />
                    <div style="font-weight:bold; margin-top:6px">@articulo.DescripcionCorta</div>
                    <div style="font-size:small">Código: @articulo.IdArticulo</div>
                </div>
                <div class="mt-3 no-print">
                    <button class="btn btn-success me-2" @onclick="Imprimir">🖨️ Imprimir</button>
                    <button class="btn btn-secondary" @onclick="() => mostrarModalQR = false">❌ Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}
@if (!string.IsNullOrEmpty(articulo.IdArticulo))
{
    <hr />
    <h5>🎨 Variantes de Color / Talla</h5>

    <div class="mb-3 row">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Color" @bind="nuevaVariante.Color" />
        </div>
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Talla" @bind="nuevaVariante.Talla" />
        </div>
        <div class="col-md-4">
            <button class="btn btn-success w-100" @onclick="AgregarVariante">➕ Agregar Variante</button>
        </div>
    </div>

    <table class="table table-bordered table-sm">
        <thead>
            <tr>
                <th>Color</th>
                <th>Talla</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var v in variantes)
            {
                <tr>
                    <td>@v.Color</td>
                    <td>@v.Talla</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarVariante(v.IdVariante)">🗑️</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<ProveedorBuscarModal @bind-Mostrar="mostrarProveedorModal" OnSeleccionado="ProveedorSeleccionado" />

@code {

    [Parameter]
    public string? dummy { get; set; }
    private ArticuloDTO articulo = new();
    private List<ProveedorDTO>? proveedores = new();
    private bool isLoading = true;
    private bool yaInicializado = false;
    private bool mostrarModal = false;
    private bool mostrarModalQR = false;
    private bool mostrarProveedorModal = false;
    private string rucProveedor = string.Empty;
    private string nombreProveedor = string.Empty;
    private ArticuloVarianteDTO nuevaVariante = new();
    private List<ArticuloVarianteDTO> variantes = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        articulo.Estado = true;

        if (!yaInicializado)
        {
            isLoading = true;

            articulo = new ArticuloDTO(); // Reinicia los datos
            articulo.IdArticulo = await ArticuloService.GetNuevoIdArticulo();
            articulo.CodigoBarra = articulo.IdArticulo;

            proveedores = await ProveedorService.GetProveedores();

            yaInicializado = true;
            isLoading = false;

            StateHasChanged(); // Vuelve a renderizar
            await CargarVariantes();
        }
    }

    /*
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        articulo.IdArticulo = await ArticuloService.GetNuevoIdArticulo();
        proveedores = await ProveedorService.GetProveedores();
        isLoading = false;

        //Para elegir automáticamente el id de articulo en el codigo de barras
        articulo.CodigoBarra = articulo.IdArticulo.ToString();
        }*/

    [Inject] private IJSRuntime JS { get; set; } = default!;

    private async Task Imprimir()
    {
        await JS.InvokeVoidAsync("window.print");
    }

    private void ActualizarDescripcion()
    {
        articulo.Descripcion = $"{articulo.Familia} {articulo.Linea} {articulo.Marca} {articulo.Material} {articulo.Modelo} {articulo.Color} {articulo.Talla}";
        articulo.DescripcionCorta = $"{articulo.Familia} {articulo.Marca} {articulo.Modelo} {articulo.Color} {articulo.Talla}";
    }

    private async Task SaveArticulo()
    {
        if (string.IsNullOrEmpty(articulo.UnidadAlmacen) || articulo.UnidadAlmacen == "string")
        {
            Console.WriteLine("❌ UnidadAlmacen no puede ser 'string'");
            return;
        }

        // Validar foto
        if (string.IsNullOrEmpty(articulo.Foto))
        {
            Console.WriteLine("❌ Debe subir una imagen del artículo");
            return;
        }

        var creado = await ArticuloService.CreateArticulo(articulo);
        if (creado) Navigation.NavigateTo("/articulos");
    }

    private async Task AgregarVariante()
    {
        if (string.IsNullOrWhiteSpace(nuevaVariante.Color) || string.IsNullOrWhiteSpace(nuevaVariante.Talla))
            return;

        nuevaVariante.IdArticulo = articulo.IdArticulo;

        var exito = await ArticuloVarianteService.RegistrarVariante(nuevaVariante);
        if (exito)
        {
            await CargarVariantes();
            nuevaVariante = new();
        }
    }

    private async Task EliminarVariante(int id)
    {
        var exito = await ArticuloVarianteService.EliminarVariante(id);
        if (exito)
            await CargarVariantes();
    }

    private async Task CargarVariantes()
    {
        if (!string.IsNullOrEmpty(articulo.IdArticulo))
            variantes = await ArticuloVarianteService.ObtenerVariantesPorArticulo(articulo.IdArticulo);
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/articulos");
    }

    private void PrintBarcode()
    {
        Navigation.NavigateTo($"/barcode-print/{articulo.IdArticulo}/{Uri.EscapeDataString(articulo.DescripcionCorta)}");
    }


    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 5_000_000); // 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var imageBytes = ms.ToArray();
            var base64 = Convert.ToBase64String(imageBytes);
            articulo.Foto = $"data:{file.ContentType};base64,{base64}";
        }
    }
    
    private async Task BuscarProveedorPorRuc(FocusEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(rucProveedor))
            return;

        var resp = await ProveedorService.GetProveedorList(1, 1, rucProveedor);
        var prov = resp.Data.FirstOrDefault();
        if (prov != null)
        {
            articulo.IdProveedor = prov.IdProveedor;
            nombreProveedor = prov.Nombre;
        }
        else
        {
            nombreProveedor = "Proveedor no encontrado";
        }
    }

    private void ProveedorSeleccionado(ProveedorDTO prov)
    {
        articulo.IdProveedor = prov.IdProveedor;
        rucProveedor = prov.Ruc ?? string.Empty;
        nombreProveedor = prov.Nombre;
    }
}