@page "/articulo-form"
@page "/articulo-form/{dummy}"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@using System.Globalization
@inject ArticuloService ArticuloService
@inject ProveedorService ProveedorService
@inject ComplementoService ComplementoService
@using GSCommerce.Client.Pages
@inject NavigationManager Navigation
@inject ArticuloVarianteService ArticuloVarianteService
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

<h3>📌 Nuevo Artículo</h3>

@if (!isLoading)
{
    <div class="card p-4">
        <div class="row">
            <!-- Izquierda -->
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Código</label>
                    <input type="text" class="form-control" @bind="articulo.IdArticulo" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Descripción</label>
                    <input type="text" class="form-control" @bind="articulo.Descripcion" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Descripción Corta</label>
                    <input type="text" class="form-control" @bind="articulo.DescripcionCorta" readonly />
                </div>

                <!-- FAMILIA -->
                <div class="mb-3">
                    <label class="form-label">Familia</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Familia" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in familias)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("FAMILIA")'>
                            +
                        </button>
                    </div>
                </div>

                <!-- LINEA -->
                <div class="mb-3">
                    <label class="form-label">Línea</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Linea" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in lineas)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("LINEA")'>
                            +
                        </button>
                    </div>
                </div>

                <!-- MARCA -->
                <div class="mb-3">
                    <label class="form-label">Marca</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Marca" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in marcas)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("MARCA")'>
                            +
                        </button>
                    </div>
                </div>

                <!-- MATERIAL -->
                <div class="mb-3">
                    <label class="form-label">Material</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Material" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in materiales)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("MATERIAL")'>
                            +
                        </button>
                    </div>
                </div>

                <!-- MODELO -->
                <div class="mb-3">
                    <label class="form-label">Modelo</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Modelo" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in modelos)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("MODELO")'>
                            +
                        </button>
                    </div>
                </div>

                <!-- COLOR -->
                <div class="mb-3">
                    <label class="form-label">Color</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Color" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in colores)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("COLOR")'>
                            +
                        </button>
                    </div>
                </div>

                <!-- TALLA -->
                <div class="mb-3">
                    <label class="form-label">Talla</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Talla" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in tallas)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("TALLA")'>
                            +
                        </button>
                    </div>
                </div>

                <!-- ESTACION -->
                <div class="mb-3">
                    <label class="form-label">Estación</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Estacion" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in estaciones)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("ESTACION")'>
                            +
                        </button>
                    </div>
                </div>

                <!-- DETALLE -->
                <div class="mb-3">
                    <label class="form-label">Detalle</label>
                    <div class="input-group">
                        <select class="form-control" @bind="articulo.Detalle" @bind:after="ActualizarDescripcion">
                            <option value="">-- Seleccionar --</option>
                            @foreach (var c in detalles)
                            {
                                <option value="@c.Descripcion">@c.Descripcion</option>
                            }
                        </select>
                        <button class="btn btn-outline-primary" type="button" title="Nuevo"
                                @onclick='() => OpenNuevoComplemento("DETALLE")'>
                            +
                        </button>
                    </div>
                </div>
            </div> <!-- /col-md-6 izquierda -->
            <!-- Derecha -->
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Proveedor</label>
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="rucProveedor" @onblur="BuscarProveedorPorRuc" />
                        <button class="btn btn-secondary" @onclick="() => mostrarProveedorModal = true">Buscar</button>
                    </div>
                    <div class="mt-1"><strong>@nombreProveedor</strong></div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Unidad de Almacén</label>
                    <input type="text" class="form-control" @bind="articulo.UnidadAlmacen" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Moneda de Costeo</label>
                    <select class="form-control" @bind="articulo.MonedaCosteo">
                        <option value="SOLES">Soles</option>
                        <option value="DOLARES">Dólares</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Precio Compra</label>
                    <input type="number" class="form-control" @bind="articulo.PrecioCompra" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Precio Venta</label>
                    <input type="number" class="form-control" @bind="articulo.PrecioVenta" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Estado</label>
                    <select class="form-control" @bind="articulo.Estado">
                        <option value="true">Activo</option>
                        <option value="false">Inactivo</option>
                    </select>
                </div>

                <!-- Imagen del artículo -->
                <div class="mb-3 text-center">
                    <label class="form-label">Imagen del artículo</label><br />
                    <img src="@articulo.Foto" class="img-thumbnail" width="100" style="display: @(string.IsNullOrEmpty(articulo.Foto) ? "none" : "block")" />
                    <InputFile OnChange="UploadImage" accept="image/*" />
                </div>

                <!-- Código de barras -->
                <div class="mb-3 text-center">
                    <label class="form-label">Código de Barras</label><br />
                    <img src="https://barcode.tec-it.com/barcode.ashx?data=@(articulo.IdArticulo)&code=Code93" class="img-thumbnail" width="150" />
                    <div><strong>@articulo.IdArticulo</strong></div>
                    <button class="btn btn-success mt-2 me-2" @onclick="PrintBarcode">🖨️ Imprimir</button>
                    <button class="btn btn-info mt-2" @onclick="() => mostrarModalQR = true">📱 QR</button>
                </div>
            </div> <!-- /col-md-6 derecha -->
        </div> <!-- /row -->
        <!-- Botones -->
        <div class="text-center mt-3">
            <button class="btn btn-primary" @onclick="SaveArticulo">💾 Guardar</button>
            <button class="btn btn-danger" @onclick="Cancel">❌ Cancelar</button>
        </div>
    </div>
}
else
{
    <p>Cargando...</p>
}

<!-- Modal QR (2-up) -->
@if (mostrarModalQR)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-4 text-center">
                <h4>📱 Código QR</h4>
                <hr />
                <div class="etiqueta-imprimir">
                    <div class="label">
                        <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=@(articulo.IdArticulo)" />
                        <div class="desc">@articulo.DescripcionCorta</div>
                        <div class="code">Código: @articulo.IdArticulo</div>
                    </div>
                    <div class="label">
                        <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=@(articulo.IdArticulo)" />
                        <div class="desc">@articulo.DescripcionCorta</div>
                        <div class="code">Código: @articulo.IdArticulo</div>
                    </div>
                </div>
                <div class="mt-3 no-print">
                    <button class="btn btn-success me-2" @onclick="Imprimir">🖨️ Imprimir</button>
                    <button class="btn btn-secondary" @onclick="() => mostrarModalQR = false">❌ Cancelar</button>
                </div>
            </div>
        </div>
    </div>

    <style>
        @@media print {
            @@page {
                size: 100mm 50mm;
                margin: 0;
            }

            body * {
                visibility: hidden !important;
            }

            .etiqueta-imprimir, .etiqueta-imprimir * {
                visibility: visible !important;
            }

            .etiqueta-imprimir {
                position: fixed;
                inset: 0;
                width: 100mm;
                height: 50mm;
                display: flex;
                gap: 3mm;
            }

            .label {
                width: calc((100mm - 3mm)/2);
                height: 50mm;
                border: 1px solid #000;
                border-radius: .8mm;
                padding: 1.2mm;
                box-sizing: border-box;
                display: flex;
                flex-direction: column;
                gap: 1mm;
                justify-content: center;
                align-items: center;
            }

                .label img {
                    width: 22mm;
                    height: 22mm;
                    object-fit: contain;
                    display: block;
                }

            .desc {
                font-weight: 700;
                font-size: 8pt;
                line-height: 1.15;
                text-align: center;
            }

            .code {
                font-size: 7pt;
            }

            .no-print {
                display: none !important;
            }
        }
    </style>
}

<!-- Modal: Nuevo Complemento -->
@if (mostrarNuevoComplemento)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Nuevo @nuevoTipo</h5>
                    <button type="button" class="btn-close" @onclick="CloseNuevoComplemento"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Tipo</label>
                        <input class="form-control" value="@nuevoTipo" readonly />
                    </div>
                    <div class="mb-3">
                        <label>Descripción</label>
                        <input class="form-control" @bind="nuevoDescripcion" />
                    </div>
                    <div class="mb-3">
                        <label>Alias (opcional)</label>
                        <input class="form-control" @bind="nuevoAlias" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="CrearNuevoComplemento">Guardar</button>
                    <button class="btn btn-secondary" @onclick="CloseNuevoComplemento">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}

<ProveedorBuscarModal @bind-Mostrar="mostrarProveedorModal" OnSeleccionado="ProveedorSeleccionado" />

@code {

    [Parameter] public string? dummy { get; set; }

    private ArticuloDTO articulo = new();
    private List<ProveedorDTO>? proveedores = new();
    private bool isLoading = true;
    private bool yaInicializado = false;

    private bool mostrarModalQR = false;
    private bool mostrarProveedorModal = false;

    // Complementos
    private List<ComplementoDTO> familias = new();
    private List<ComplementoDTO> lineas = new();
    private List<ComplementoDTO> marcas = new();
    private List<ComplementoDTO> materiales = new();
    private List<ComplementoDTO> modelos = new();
    private List<ComplementoDTO> colores = new();
    private List<ComplementoDTO> detalles = new();
    private List<ComplementoDTO> tallas = new();
    private List<ComplementoDTO> estaciones = new();

    // Modal nuevo complemento
    private bool mostrarNuevoComplemento = false;
    private string nuevoTipo = string.Empty;
    private string nuevoDescripcion = string.Empty;
    private string? nuevoAlias = string.Empty;

    [Inject] private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        articulo.Estado = true;

        if (!yaInicializado)
        {
            isLoading = true;

            articulo = new ArticuloDTO();
            articulo.IdArticulo = await ArticuloService.GetNuevoIdArticulo();
            articulo.CodigoBarra = articulo.IdArticulo;

            proveedores = await ProveedorService.GetProveedores();

            // Cargar combos
            await LoadComplementos();

            yaInicializado = true;
            isLoading = false;

            StateHasChanged();
            await CargarVariantes();
        }
    }

    private async Task LoadComplementos()
    {
        familias = await ComplementoService.GetByTipo("FAMILIA");
        lineas = await ComplementoService.GetByTipo("LINEA");
        marcas = await ComplementoService.GetByTipo("MARCA");
        materiales = await ComplementoService.GetByTipo("MATERIAL");
        modelos = await ComplementoService.GetByTipo("MODELO");
        colores = await ComplementoService.GetByTipo("COLOR");
        detalles = await ComplementoService.GetByTipo("DETALLE");
        tallas = await ComplementoService.GetByTipo("TALLA");
        estaciones = await ComplementoService.GetByTipo("ESTACION");
    }

    private async Task ReloadTipo(string tipo)
    {
        switch (tipo)
        {
            case "FAMILIA": familias = await ComplementoService.GetByTipo(tipo); break;
            case "LINEA": lineas = await ComplementoService.GetByTipo(tipo); break;
            case "MARCA": marcas = await ComplementoService.GetByTipo(tipo); break;
            case "MATERIAL": materiales = await ComplementoService.GetByTipo(tipo); break;
            case "MODELO": modelos = await ComplementoService.GetByTipo(tipo); break;
            case "COLOR": colores = await ComplementoService.GetByTipo(tipo); break;
            case "DETALLE": detalles = await ComplementoService.GetByTipo(tipo); break;
            case "TALLA": tallas = await ComplementoService.GetByTipo(tipo); break;
            case "ESTACION": estaciones = await ComplementoService.GetByTipo(tipo); break;
        }
    }

    private void OpenNuevoComplemento(string tipo)
    {
        nuevoTipo = tipo;
        nuevoDescripcion = string.Empty;
        nuevoAlias = string.Empty;
        mostrarNuevoComplemento = true;
    }

    private void CloseNuevoComplemento()
    {
        mostrarNuevoComplemento = false;
    }

    private async Task CrearNuevoComplemento()
    {
        if (string.IsNullOrWhiteSpace(nuevoTipo) || string.IsNullOrWhiteSpace(nuevoDescripcion))
            return;

        var creado = await ComplementoService.Crear(nuevoTipo, nuevoDescripcion, nuevoAlias);
        if (creado is not null)
        {
            await ReloadTipo(nuevoTipo);
            SetArticuloProp(nuevoTipo, creado.Descripcion);
            ActualizarDescripcion();
            mostrarNuevoComplemento = false;
        }
    }

    private void SetArticuloProp(string tipo, string valor)
    {
        switch (tipo)
        {
            case "FAMILIA": articulo.Familia = valor; break;
            case "LINEA": articulo.Linea = valor; break;
            case "MARCA": articulo.Marca = valor; break;
            case "MATERIAL": articulo.Material = valor; break;
            case "MODELO": articulo.Modelo = valor; break;
            case "COLOR": articulo.Color = valor; break;
            case "TALLA": articulo.Talla = valor; break;
            case "ESTACION": articulo.Estacion = valor; break;
            case "DETALLE": articulo.Detalle = valor; break;
        }
    }

    private async Task Imprimir()
    {
        await JS.InvokeVoidAsync("window.print");
    }

    private void ActualizarDescripcion()
    {
        articulo.Descripcion =
            $"{articulo.Familia} {articulo.Linea} {articulo.Marca} {articulo.Material} {articulo.Modelo} {articulo.Color} {articulo.Talla}".Trim();
        articulo.DescripcionCorta =
            $"{articulo.Familia} {articulo.Marca} {articulo.Modelo} {articulo.Color} {articulo.Talla}".Trim();
    }

    private async Task SaveArticulo()
    {

        if (articulo.UnidadAlmacen == "string")
            articulo.UnidadAlmacen = null;

        var creado = await ArticuloService.CreateArticulo(articulo);
        if (creado) Navigation.NavigateTo("/articulos");
    }

    private ArticuloVarianteDTO nuevaVariante = new();
    private List<ArticuloVarianteDTO> variantes = new();

    private async Task AgregarVariante()
    {
        if (string.IsNullOrWhiteSpace(nuevaVariante.Color) || string.IsNullOrWhiteSpace(nuevaVariante.Talla))
            return;

        nuevaVariante.IdArticulo = articulo.IdArticulo;

        var exito = await ArticuloVarianteService.RegistrarVariante(nuevaVariante);
        if (exito)
        {
            await CargarVariantes();
            nuevaVariante = new();
        }
    }

    private async Task EliminarVariante(int id)
    {
        var exito = await ArticuloVarianteService.EliminarVariante(id);
        if (exito)
            await CargarVariantes();
    }

    private async Task CargarVariantes()
    {
        if (!string.IsNullOrEmpty(articulo.IdArticulo))
            variantes = await ArticuloVarianteService.ObtenerVariantesPorArticulo(articulo.IdArticulo);
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/articulos");
    }

    private void PrintBarcode()
    {
        var precio = articulo.PrecioVenta.ToString(CultureInfo.InvariantCulture);
        var desc = Uri.EscapeDataString(articulo.DescripcionCorta ?? string.Empty);
        Navigation.NavigateTo($"/barcode-print/{articulo.IdArticulo}/{desc}/{precio}", true);

    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 5_000_000);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var imageBytes = ms.ToArray();
            var base64 = Convert.ToBase64String(imageBytes);
            articulo.Foto = $"data:{file.ContentType};base64,{base64}";
        }
    }

    private async Task BuscarProveedorPorRuc(FocusEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(rucProveedor))
            return;

        var resp = await ProveedorService.GetProveedorList(1, 1, rucProveedor);
        var prov = resp.Data.FirstOrDefault();
        if (prov != null)
        {
            articulo.IdProveedor = prov.IdProveedor;
            nombreProveedor = prov.Nombre;
        }
        else
        {
            nombreProveedor = "Proveedor no encontrado";
        }
    }

    private void ProveedorSeleccionado(ProveedorDTO prov)
    {
        articulo.IdProveedor = prov.IdProveedor;
        rucProveedor = prov.Ruc ?? string.Empty;
        nombreProveedor = prov.Nombre;
    }

    private string rucProveedor = string.Empty;
    private string nombreProveedor = string.Empty;
}