@page "/stock"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject StockService StockService
@inject AlmacenService AlmacenService
@inject AuthService AuthService
@inject IJSRuntime JS

<h3>📦 Control de Stock de Artículos</h3>

@if (mostrarAlertaStock)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-4 text-center">
                <h4>🚨 Stock Crítico</h4>
                <p>@mensajeAlertaStock</p>
                <button class="btn btn-primary mt-2" @onclick="CerrarAlertaStock">Cerrar</button>
            </div>
        </div>
    </div>
}

@if (isLoading)
{
    <p>Cargando...</p>
}
else
{
    <div class="row mb-3">
        <div class="col-md-4">
            @if (cargo == "CAJERO")
            {
                <label>Almacén</label>
                <select class="form-select mt-1" disabled>
                    @foreach (var a in almacenes)
                    {
                        <option value="@a.IdAlmacen">@a.Nombre</option>
                    }
                </select>
            }
            else
            {
                <label><input type="radio" value="false" @onchange="e => porAlmacen = false" checked="@(!porAlmacen)" /> Total</label>
                <label class="ms-3"><input type="radio" value="true" @onchange="e => porAlmacen = true" checked="@(porAlmacen)" /> Por Almacén</label>
                <select class="form-select mt-1" @bind="idAlmacenSeleccionado" disabled="@(porAlmacen == false)">
                    <option value="0">-- Seleccionar almacén --</option>
                    @foreach (var a in almacenes)
                    {
                        <option value="@a.IdAlmacen">@a.Nombre</option>
                    }
                </select>
            }
        </div>

        <div class="col-md-3">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="incluirStockCero" />
                <label class="form-check-label">Incluir Stock 0</label>
            </div>
            @if (cargo != "CAJERO")
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="valorizado" />
                    <label class="form-check-label">Valorizado</label>
                </div>
            }
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="soloStockBajo" />
                <label class="form-check-label">🔴 Solo bajo mínimo</label>
            </div>
        </div>

        <div class="col-md-3">
            <input class="form-control mb-1" @bind="search" placeholder="Buscar por código o descripción" />
            <div class="form-check">
                <input class="form-check-input" type="radio" id="radioCodigo" value="1"
                       checked="@(filtroBusqueda == 1)"
                       @onchange="@((e) => filtroBusqueda = int.Parse((string)e.Value))" />
                <label class="form-check-label" for="radioCodigo">Código</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" id="radioDescripcion" value="2"
                       checked="@(filtroBusqueda == 2)"
                       @onchange="@((e) => filtroBusqueda = int.Parse((string)e.Value))" />
                <label class="form-check-label" for="radioDescripcion">Descripción</label>
            </div>
        </div>

        <div class="col-md-2 d-grid">
            <button class="btn btn-primary" @onclick="Actualizar">🔄 Actualizar</button>
            <button class="btn btn-outline-success mt-2" @onclick="ExportarAExcel">📥 Exportar a Excel</button>
        </div>
    </div>
    @if (listaStock.Any(s => s.EstaBajoMinimo))
    {
        <div class="alert alert-warning d-flex align-items-center" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            Hay <strong>@listaStock.Count(s => s.EstaBajoMinimo)</strong> artículos con stock por debajo del mínimo en este almacén.
        </div>
    }
    else if (soloStockBajo && !listaStockFiltrada.Any(s => s.EstaBajoMinimo))
    {
        <div class="alert alert-success d-flex align-items-center" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            ¡Todos los productos están dentro del stock permitido! ✅
        </div>
    }
    <table class="table table-striped table-bordered table-sm">
        <thead class="table-light">
            <tr>
                <th>Almacén</th>
                <th>Familia</th>
                <th>Línea</th>
                <th>Código</th>
                <th>Descripción</th>
                <th class="text-end">Stock</th>
                @if (valorizado && cargo != "CAJERO")
                {
                    <th class="text-end">Precio Compra</th>
                    <th class="text-end">Valor Compra</th>
                    <th class="text-end">Precio Venta</th>
                    <th class="text-end">Valor Venta</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in listaStockFiltrada)
            {
                <tr class="@(item.EstaBajoMinimo == true ? "table-danger" : "")">
                    <td>@item.Almacen</td>
                    <td>@item.Familia</td>
                    <td>@item.Linea</td>
                    <td>@item.IdArticulo</td>
                    <td>@item.Descripcion</td>
                    <td class="text-end">@item.Stock</td>
                    @if (valorizado && cargo != "CAJERO")
                    {
                        <td class="text-end">@item.PrecioCompra.ToString("N2")</td>
                        <td class="text-end">@item.ValorCompra?.ToString("N2")</td>
                        <td class="text-end">@item.PrecioVenta?.ToString("N2")</td>
                        <td class="text-end">@item.ValorVenta?.ToString("N2")</td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-between align-items-center">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Anterior</button>
        <span>Página @currentPage de @totalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(currentPage == totalPages)">Siguiente</button>
    </div>
}

@code {
    private bool isLoading = true;
    private bool porAlmacen = false;
    private bool incluirStockCero = false;
    private bool valorizado = false;
    private int idAlmacenSeleccionado = 0;
    private string search = "";
    private int filtroBusqueda = 1; // 1: Código, 2: Descripción
    private bool soloStockBajo = false;

    private List<StockDTO> listaStock = new();
    private List<StockDTO> listaStockFiltrada = new();
    private List<AlmacenDTO> almacenes = new();

    private int currentPage = 1;
    private int totalPages = 1;
    private const int pageSize = 50;

    private string? cargo;

    private bool mostrarAlertaStock = false;
    private string mensajeAlertaStock = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        cargo = await AuthService.GetUserCargo();
        var idAlmacenUsuario = await AuthService.GetUserAlmacenId();

        if (cargo == "CAJERO")
        {
            if (idAlmacenUsuario.HasValue)
            {
                var alm = await AlmacenService.GetAlmacenById(idAlmacenUsuario.Value);
                if (alm != null)
                {
                    almacenes = new List<AlmacenDTO> { alm };
                    idAlmacenSeleccionado = alm.IdAlmacen;
                    porAlmacen = true;
                }
            }
        }
        else
        {
            almacenes = await AlmacenService.GetAlmacenes() ?? new();
        }

        await CargarStock();
        isLoading = false;
    }

    private async Task CargarStock()
    {
        var resultado = await StockService.GetStock(
            porAlmacen ? idAlmacenSeleccionado : null,
            incluirStockCero,
            search,
            filtroBusqueda,
            currentPage,
            pageSize
        );

        listaStock = resultado.Items;
        totalPages = (int)Math.Ceiling((double)resultado.TotalCount / pageSize);

        AplicarFiltro();
        await VerificarStockCritico();
    }

    private void AplicarFiltro()
    {
        listaStockFiltrada = listaStock
            .Where(s => !soloStockBajo || s.EstaBajoMinimo == true)
            .ToList();
    }

    private async Task VerificarStockCritico()
    {
        mostrarAlertaStock = false;
        foreach (var item in listaStock)
        {
            if (item.Stock == 10)
            {
                var disponible = await StockService.GetStockDisponible(item.IdArticulo, 1);
                mensajeAlertaStock = disponible > 0
                    ? $"El artículo '{item.Descripcion}' tiene 10 unidades en tienda. Stock en almacén principal: {disponible}."
                    : $"El artículo '{item.Descripcion}' tiene 10 unidades en tienda y no hay stock en el almacén principal.";
                mostrarAlertaStock = true;
                break;
            }
        }
    }

    private async Task ExportarAExcel()
    {
        var headers = new[] { "Almacén", "Familia", "Línea", "Código", "Descripción", "Stock" };

        var todosLosArticulos = new List<StockDTO>();
        int pagina = 1;
        while (true)
        {
            var resultado = await StockService.GetStock(
                porAlmacen ? idAlmacenSeleccionado : (int?)null,
                incluirStockCero,
                search,
                filtroBusqueda,
                pagina,
                pageSize
            );

            if (resultado?.Items != null)
            {
                todosLosArticulos.AddRange(resultado.Items);
            }

            if (todosLosArticulos.Count >= (resultado?.TotalCount ?? 0))
            {
                break;
            }

            pagina++;
        }

        var datosExportar = todosLosArticulos
            .Where(s => !soloStockBajo || s.EstaBajoMinimo == true)
            .Select(s => new object[]
            {
                s.Almacen,
                s.Familia,
                s.Linea,
                s.IdArticulo,
                s.Descripcion,
                s.Stock
            }).ToArray();

        await JS.InvokeVoidAsync("exportToExcel", headers, datosExportar, "StockArticulos");
    }

    private async Task Actualizar()
    {
        currentPage = 1;
        await CargarStock();
    }


    private void CerrarAlertaStock()
    {
        mostrarAlertaStock = false;
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await CargarStock();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await CargarStock();
        }
    }
}
