@page "/stock"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject StockService StockService
@inject AlmacenService AlmacenService
@inject IJSRuntime JS

<h3>📦 Control de Stock de Artículos</h3>

@if (isLoading)
{
    <p>Cargando...</p>
}
else
{
    <div class="row mb-3">
        <div class="col-md-4">
            <label><input type="radio" value="false" @onchange="e => porAlmacen = false" checked="@(!porAlmacen)" /> Total</label>
            <label class="ms-3"><input type="radio" value="true" @onchange="e => porAlmacen = true" checked="@(porAlmacen)" /> Por Almacén</label>
            <select class="form-select mt-1" @bind="idAlmacenSeleccionado" disabled="@(porAlmacen == false)">
                <option value="0">-- Seleccionar almacén --</option>
                @foreach (var a in almacenes)
                {
                    <option value="@a.IdAlmacen">@a.Nombre</option>
                }
            </select>
        </div>

        <div class="col-md-3">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="incluirStockCero" />
                <label class="form-check-label">Incluir Stock 0</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="valorizado" />
                <label class="form-check-label">Valorizado</label>
            </div>
        </div>

        <div class="col-md-3">
            <input class="form-control" @bind="search" placeholder="Buscar por código o descripción" />
        </div>

        <div class="col-md-2 d-grid">
            <button class="btn btn-primary" @onclick="Actualizar">🔄 Actualizar</button>
            <button class="btn btn-outline-success mt-2" @onclick="ExportarAExcel">📥 Exportar a Excel</button>
        </div>
    </div>

    <table class="table table-striped table-bordered table-sm">
        <thead class="table-light">
            <tr>
                <th>Almacén</th>
                <th>Familia</th>
                <th>Línea</th>
                <th>Código</th>
                <th>Descripción</th>
                <th class="text-end">Stock</th>
                @if (valorizado)
                {
                    <th class="text-end">Precio Compra</th>
                    <th class="text-end">Valor Compra</th>
                    <th class="text-end">Precio Venta</th>
                    <th class="text-end">Valor Venta</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in listaStockFiltrada)
            {
                <tr>
                    <td>@item.Almacen</td>
                    <td>@item.Familia</td>
                    <td>@item.Linea</td>
                    <td>@item.IdArticulo</td>
                    <td>@item.Descripcion</td>
                    <td class="text-end">@item.Stock</td>
                    @if (valorizado)
                    {
                        <td class="text-end">@item.PrecioCompra.ToString("N2")</td>
                        <td class="text-end">@item.ValorCompra?.ToString("N2")</td>
                        <td class="text-end">@item.PrecioVenta?.ToString("N2")</td>
                        <td class="text-end">@item.ValorVenta?.ToString("N2")</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private bool isLoading = true;
    private bool porAlmacen = false;
    private bool incluirStockCero = false;
    private bool valorizado = false;
    private int idAlmacenSeleccionado = 0;
    private string search = "";

    private List<StockDTO> listaStock = new();
    private List<StockDTO> listaStockFiltrada = new();
    private List<AlmacenDTO> almacenes = new();

    protected override async Task OnInitializedAsync()
    {
        almacenes = await AlmacenService.GetAlmacenes() ?? new();
        await CargarStock();
        isLoading = false;
    }

    private async Task CargarStock()
    {
        listaStock = await StockService.GetStock(
            porAlmacen ? idAlmacenSeleccionado : null,
            incluirStockCero
        );

        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        listaStockFiltrada = listaStock
            .Where(s =>
                string.IsNullOrWhiteSpace(search)
                || s.IdArticulo.Contains(search, StringComparison.OrdinalIgnoreCase)
                || s.Descripcion.Contains(search, StringComparison.OrdinalIgnoreCase)
            ).ToList();
    }

    private async Task ExportarAExcel()
    {
        // Preparamos solo los campos relevantes
        var datosExportar = listaStockFiltrada.Select(s => new
        {
            s.Almacen,
            s.Familia,
            s.Linea,
            Código = s.IdArticulo,
            Descripción = s.Descripcion,
            s.Stock,
            PrecioCompra = valorizado ? (decimal?)s.PrecioCompra : null,
            ValorCompra = valorizado ? s.ValorCompra : null,
            PrecioVenta = valorizado ? (double?)s.PrecioVenta : null,
            ValorVenta = valorizado ? s.ValorVenta : null
        });

        await JS.InvokeVoidAsync("exportToExcel", datosExportar, "StockArticulos");
    }

    private async Task Actualizar()
    {
        await CargarStock();
    }
}