@page "/descuentos"
@**@
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject DescuentoService DescuentoService
@inject AlmacenService AlmacenService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Gestión de Descuentos</h3>

<div class="mb-3">
    <select class="form-select" @bind="Almacen">
        <option value="0">-- Seleccione Tienda --</option>
        @foreach (var t in tiendas)
        {
            <option value="@t.IdAlmacen">@t.Nombre</option>
        }
    </select>
</div>

<button class="btn btn-success mb-2" @onclick="Agregar">+ Agregar</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Código</th>
            <th>Artículo</th>
            <th>PV</th>
            <th>% Dscto</th>
            <th>Final</th>
            <th>Utilidad</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var d in descuentos)
        {
            <tr>
                <td>@d.IdArticulo</td>
                <td>@d.DescripcionCorta</td>
                <td>@d.PrecioVenta</td>
                <td>@d.DescuentoPorc</td>
                <td>@d.PrecioFinal</td>
                <td>@d.Utilidad</td>
                <td>
                    <button class="btn btn-warning btn-sm me-1" @onclick="() => Editar(d)"><i class="bi bi-pencil-square"></i> Editar</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(d)"><i class="bi bi-trash"></i> Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>
@if (descuentos?.Count > 0)
{
    <p class="text-success">🟢 Datos cargados correctamente.</p>
}
else
{
    <p class="text-danger">🔴 No se encontraron descuentos visibles para este almacén.</p>
}

@code {
    private List<AlmacenDTO> tiendas = new();
    private List<DescuentoDTO> descuentos = new();
    private int idAlmacen;
    private int Almacen
    {
        get => idAlmacen;
        set
        {
            if (idAlmacen != value)
            {
                idAlmacen = value;
                _ = CargarDescuentos();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        tiendas = await AlmacenService.GetAlmacenes() ?? new List<AlmacenDTO>();
        
        // Leer el parámetro de almacén de la URL
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("almacen", out var almacenParam))
        {
            if (int.TryParse(almacenParam, out var almacenId))
            {
                idAlmacen = almacenId;
                await CargarDescuentos();
            }
        }
    }

    private async Task CargarDescuentos()
    {
        //Console.WriteLine($"🔍 Cargando descuentos para Almacen: {idAlmacen}");
        if (idAlmacen > 0)
        {
            descuentos = await DescuentoService.ObtenerDescuentos(idAlmacen);
          //  Console.WriteLine($"Descuentos cargados: {descuentos.Count}");
        }
        await InvokeAsync(StateHasChanged);
    }

    private void Agregar()
    {
        //Console.WriteLine($"Navegando a /descuento-form/{idAlmacen}");
        Navigation.NavigateTo($"/descuento-form/{idAlmacen}");
    }

    private void Editar(DescuentoDTO d)
    {
        Navigation.NavigateTo($"/descuento-form/{idAlmacen}/{d.IdArticulo}");
    }

    private async Task Eliminar(DescuentoDTO d)
    {
        if (await DescuentoService.EliminarDescuento(idAlmacen, d.IdArticulo))
        {
            await CargarDescuentos();
        }
    }
}