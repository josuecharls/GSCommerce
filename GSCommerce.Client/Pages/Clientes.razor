@page "/clientes"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject ClienteService ClienteService
@inject NavigationManager Navigation

<h3><i class="bi bi-person-fill"></i>  Lista de Clientes</h3>

<button @onclick="CreateNewCliente" class="btn btn-success mb-3">+ Nuevo Cliente</button>

<input type="text" @bind="searchTerm" placeholder="Buscar por nombre o DNI/RUC..." class="form-control mb-2" />
<button @onclick="SearchCliente" class="btn btn-primary"><i class="bi bi-search"></i> Buscar</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Tipo Doc</th>
            <th>DNI/RUC</th>
            <th>Nombre</th>
            <th>Dirección</th>
            <th>Teléfono</th>
            <th>Estado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (clienteList.Any())
        {
            @foreach (var c in clienteList)
            {
                <tr>
                    <td>@c.TipoDocumento</td>
                    <td>@c.Dniruc</td>
                    <td>@c.Nombre</td>
                    <td>@c.Direccion</td>
                    <td>@c.Telefono</td>
                    <td>
                        @if (c.Estado)
                        {
                            <span class="badge bg-success">Activo</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Inactivo</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm me-1" @onclick="() => EditCliente(c.IdCliente)"><i class="bi bi-pencil-square"></i> Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteCliente(c.IdCliente, c.Nombre)"><i class="bi bi-trash"></i> Eliminar</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">No hay resultados</td>
            </tr>
        }
    </tbody>
</table>

<!-- Paginación -->
<div class="d-flex justify-content-between">
    <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!CanPrev)"><i class="bi bi-arrow-left"></i> Anterior</button>
    <span>Página @currentPage de @totalPages</span>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanNext)">Siguiente <i class="bi bi-arrow-right"></i></button>
</div>

<!-- Modal Eliminar -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body text-center">
                    <p>¿Desea eliminar al cliente <strong>@deleteClienteName</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteConfirmed"><i class="bi bi-trash-fill"></i> Sí</button>
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">❌ No</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ClienteDTO> clienteList = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private string searchTerm = "";
    private bool isDeleting = false;
    private bool showDeleteModal = false;
    private int deleteClienteId;
    private string deleteClienteName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadClientes();
    }

    private async Task LoadClientes()
    {
        var response = await ClienteService.GetClienteList(currentPage, pageSize, searchTerm);
        clienteList = response.Data;
        totalPages = response.TotalPages;
    }

    private async Task SearchCliente()
    {
        currentPage = 1;
        await LoadClientes();
    }

    private async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadClientes();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadClientes();
        }
    }

    private void CreateNewCliente() => Navigation.NavigateTo("/cliente-form");
    private void EditCliente(int id) => Navigation.NavigateTo($"/cliente/edit/{id}");

    private void ConfirmDeleteCliente(int id, string nombre)
    {
        deleteClienteId = id;
        deleteClienteName = nombre;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        deleteClienteId = 0;
        deleteClienteName = "";
    }

    private async Task DeleteConfirmed()
    {
        if (!isDeleting && deleteClienteId > 0)
        {
            isDeleting = true;
            if (await ClienteService.DeleteCliente(deleteClienteId))
                await LoadClientes();

            isDeleting = false;
            CloseDeleteModal();
        }
    }

    private bool CanPrev => currentPage > 1;
    private bool CanNext => currentPage < totalPages;
}
