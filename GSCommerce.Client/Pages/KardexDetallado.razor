@page "/kardex-detallado"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@using System.Linq
@inject KardexDetalladoService KardexDetalladoService
@inject AlmacenService AlmacenService
@inject AuthService AuthService
@inject IJSRuntime JS
@inject HttpClient Http

<h3><i class="bi bi-journal"></i>  Kardex Detallado</h3>

<div class="card p-4">
    <div class="row mb-3">
        <div class="col-md-3">
            <label>Almacén</label>
            <select class="form-control" @bind="idAlmacen" disabled="@soloLecturaAlmacen">
                @if (!soloLecturaAlmacen)
                {
                    <option value="0">-- Todos --</option>
                }
                @foreach (var almacen in almacenes)
                {
                    <option value="@almacen.IdAlmacen">@almacen.Nombre</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label>Desde</label>
            <input type="date" class="form-control" @bind="fechaDesde" />
        </div>
        <div class="col-md-3">
            <label>Hasta</label>
            <input type="date" class="form-control" @bind="fechaHasta" />
        </div>
        <div class="col-md-3">
            <label>Código o Nombre</label>
            <input type="text" class="form-control" @bind="textoBusqueda" @onkeypress="OnKeyEnter" />
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-3">
            <label>Familia</label>
            <input type="text" class="form-control" @bind="familia" />
        </div>
        <div class="col-md-3">
            <label>Línea</label>
            <input type="text" class="form-control" @bind="linea" />
        </div>
        @if (string.Equals(cargo, "ADMINISTRADOR", StringComparison.OrdinalIgnoreCase))
        {
            <div class="col-md-3 align-self-end">
                <div class="form-check mt-2">
                    <input class="form-check-input" type="checkbox" id="chkValorizado" @bind="valorizado" />
                    <label class="form-check-label" for="chkValorizado">Valorizado</label>
                </div>
            </div>
        }
    </div>

    <div class="text-end mb-2">
        <button class="btn btn-primary" @onclick="BuscarKardex"><i class="bi bi-search"></i> Consultar</button>
        <button class="btn btn-success ms-2" @onclick="ExportarAExcel"><i class="bi bi-file-earmark-arrow-down"></i> Excel</button>
    </div>

    @if (isLoading)
    {
        <p><i class="bi bi-arrow-counterclockwise"></i> Cargando movimientos...</p>
    }
    else if (kardexData.Any())
    {
        <div class="table-responsive">
            @if (string.Equals(cargo, "CAJERO", StringComparison.OrdinalIgnoreCase))
            {
                <table class="table table-striped table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>Almacén</th>
                            <th>Familia</th>
                            <th>Línea</th>
                            <th>Código</th>
                            <th>Artículo</th>
                            <th>Precio Venta</th>
                            <th>Fecha Operación</th>
                            <th>Operación</th>
                            <th>Saldo Inicial</th>
                            <th>Entrada</th>
                            <th>Salida</th>
                            <th>Saldo Final</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in kardexData)
                        {
                            <tr>
                                <td>@item.Almacen</td>
                                <td>@item.Familia</td>
                                <td>@item.Linea</td>
                                <td>@item.Codigo</td>
                                <td>@item.Articulo</td>
                                <td>@item.PrecioVenta?.ToString("0.00")</td>
                                <td>@item.Fecha?.ToString("dd/MM/yyyy")</td>
                                <td>@item.Operacion</td>
                                <td>@item.SaldoInicial</td>
                                <td>@item.Entrada</td>
                                <td>@item.Salida</td>
                                <td>@item.SaldoFinal</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <table class="table table-striped table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>Almacén</th>
                            <th>Familia</th>
                            <th>Línea</th>
                            <th>Código</th>
                            <th>Artículo</th>
                            <th>Foto</th>
                            <th>Precio Compra</th>
                            <th>Precio Venta</th>
                            <th>Fecha Operación</th>
                            <th>Operación</th>
                            <th>Saldo Inicial</th>
                            <th>Entrada</th>
                            <th>Salida</th>
                            <th>Saldo Final</th>
                            @if (valorizado)
                            {
                                <th>Valorizado Inicial</th>
                                <th>Valorizado Entrada</th>
                                <th>Valorizado Salida</th>
                                <th>Valorizado Final</th>
                                <th>Valorizado Final PC</th>
                                <th>Valorizado Final VC</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in kardexData)
                        {
                            <tr>
                                <td>@item.Almacen</td>
                                <td>@item.Familia</td>
                                <td>@item.Linea</td>
                                <td>@item.Codigo</td>
                                <td>@item.Articulo</td>
                                <td>
                                    <button class="btn btn-info btn-sm" @onclick="() => VerFoto(item.Codigo)">
                                        <i class="bi bi-image"></i>
                                    </button>
                                </td>
                                <td>@item.PrecioCompra.ToString("0.00")</td>
                                <td>@item.PrecioVenta?.ToString("0.00")</td>
                                <td>@item.Fecha?.ToString("dd/MM/yyyy")</td>
                                <td>@item.Operacion</td>
                                <td>@item.SaldoInicial</td>
                                <td>@item.Entrada</td>
                                <td>@item.Salida</td>
                                <td>@item.SaldoFinal</td>
                                @if (valorizado)
                                {
                                    <td>@item.ValorizadoInicial?.ToString("0.00")</td>
                                    <td>@item.ValorizadoEntrada?.ToString("0.00")</td>
                                    <td>@item.ValorizadoSalida?.ToString("0.00")</td>
                                    <td>@item.ValorizadoFinal?.ToString("0.00")</td>
                                    <td>@item.ValorizadoFinalPc?.ToString("0.00")</td>
                                    <td>@item.ValorizadoFinalPv?.ToString("0.00")</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        <div class="text-end mt-2">
            <small>@kardexData.Count registro(s)</small>
        </div>
    }
    else
    {
        <p>
            <i class="bi bi-exclamation-triangle"></i>
            No se encontraron resultados para los filtros aplicados.
        </p>
    }
    @if (showPhotoModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Foto</h5>
                        <button type="button" class="btn-close" @onclick="ClosePhotoModal"></button>
                    </div>
                    <div class="modal-body text-center">
                        @if (!string.IsNullOrEmpty(photoUrl))
                        {
                            <img src="@photoUrl" alt="Foto" class="img-fluid img-thumbnail" style="max-width:300px;max-height:300px;" />
                        }
                        else
                        {
                            <p>No hay foto disponible.</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="ClosePhotoModal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@code {
    private List<KardexDetalladoDTO> kardexData = new();
    private List<AlmacenDTO> almacenes = new();
    private int idAlmacen = 0;
    private DateTime fechaDesde = DateTime.Today.AddMonths(-1);
    private DateTime fechaHasta = DateTime.Today;
    private string textoBusqueda = "";
    private string familia = "";
    private string linea = "";
    private bool isLoading = false;
    private bool soloLecturaAlmacen = false;
    private string? cargo;
    private bool valorizado = false;
    private bool showPhotoModal = false;
    private string? photoUrl;

    protected override async Task OnInitializedAsync()
    {
        almacenes = await AlmacenService.GetAlmacenes();
        cargo = await AuthService.GetUserCargo();
        if (!string.Equals(cargo, "ADMINISTRADOR", StringComparison.OrdinalIgnoreCase))
        {
            var userAlmacen = await AuthService.GetUserAlmacenId();
            idAlmacen = userAlmacen ?? 0;
            almacenes = almacenes.Where(a => a.IdAlmacen == idAlmacen).ToList();
            soloLecturaAlmacen = true;
        }
    }

    private async Task BuscarKardex()
    {
        isLoading = true;
        kardexData = await KardexDetalladoService.ObtenerKardexDetallado(
            textoBusqueda,
            idAlmacen == 0 ? null : idAlmacen,
            fechaDesde,
            fechaHasta,
            familia,
            linea
        );
        kardexData = kardexData
            .OrderBy(k => k.Codigo)
            .ThenBy(k => k.Fecha)
            .ToList();
        isLoading = false;
    }

    private async Task ExportarAExcel()
    {
        if (string.Equals(cargo, "CAJERO", StringComparison.OrdinalIgnoreCase))
        {
            var headers = new[]
            {
                "Almacén", "Familia", "Línea", "Código", "Artículo", "Precio Venta",
                "Fecha Operación", "Operación", "Saldo Inicial", "Entrada", "Salida", "Saldo Final"
            };

            var datos = kardexData.Select(k => new object[]
            {
                k.Almacen,
                k.Familia,
                k.Linea,
                k.Codigo,
                k.Articulo,
                k.PrecioVenta?.ToString("0.00"),
                k.Fecha?.ToString("dd/MM/yyyy"),
                k.Operacion,
                k.SaldoInicial,
                k.Entrada,
                k.Salida,
                k.SaldoFinal
            }).ToArray();

            await JS.InvokeVoidAsync("exportToExcel", headers, datos, "KardexDetallado");
        }
        else
        {
            var headers = new List<string>
            {
                "Almacén", "Familia", "Línea", "Código", "Artículo", "Foto", "Precio Compra", "Precio Venta",
                "Fecha Operación", "Operación", "Saldo Inicial", "Entrada", "Salida", "Saldo Final"
            };

            if (valorizado)
            {
                headers.AddRange(new[]
                {
                    "Valorizado Inicial", "Valorizado Entrada", "Valorizado Salida", "Valorizado Final",
                    "Valorizado Final PC", "Valorizado Final VC"
                });
            }

            var datos = kardexData.Select(item =>
            {
                var row = new List<object>
                {
                    item.Almacen,
                    item.Familia,
                    item.Linea,
                    item.Codigo,
                    item.Articulo,
                    GetFotoUrl(item.Codigo),
                    item.PrecioCompra.ToString("0.00"),
                    item.PrecioVenta?.ToString("0.00"),
                    item.Fecha?.ToString("dd/MM/yyyy"),
                    item.Operacion,
                    item.SaldoInicial,
                    item.Entrada,
                    item.Salida,
                    item.SaldoFinal
                };

                if (valorizado)
                {
                    row.AddRange(new object[]
                    {
                        item.ValorizadoInicial?.ToString("0.00"),
                        item.ValorizadoEntrada?.ToString("0.00"),
                        item.ValorizadoSalida?.ToString("0.00"),
                        item.ValorizadoFinal?.ToString("0.00"),
                        item.ValorizadoFinalPc?.ToString("0.00"),
                        item.ValorizadoFinalPv?.ToString("0.00")
                    });
                }

                return row.ToArray();
            }).ToArray();

            await JS.InvokeVoidAsync("exportToExcel", headers.ToArray(), datos, "KardexDetallado");
        }
    }

    private async Task OnKeyEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await BuscarKardex();
        }
    }

    private string GetFotoUrl(string codigo)
        => $"{Http.BaseAddress}api/articulos/foto/{codigo}?t={DateTime.Now.Ticks}";

    private void VerFoto(string codigo)
    {
        photoUrl = GetFotoUrl(codigo);
        showPhotoModal = true;
    }

    private void ClosePhotoModal()
    {
        showPhotoModal = false;
        photoUrl = null;
    }
}