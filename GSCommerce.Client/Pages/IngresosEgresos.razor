@page "/ingresos-egresos"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@inject IngresosEgresosService IngresosEgresosService
@inject AuthService AuthService
@inject AlmacenService AlmacenService
@inject NavigationManager Navigation
@inject HttpClient Http

<h3 class="mb-3">Ingresos y Egresos</h3>

<div class="row mb-3">
    <div class="col-md-2">
        <label>Almacén</label>
        <select class="form-select" @bind="idAlmacen" disabled="@soloLecturaAlmacen">
            @if (!soloLecturaAlmacen)
            {
                <option value="0">General</option>
            }
            @foreach (var almacen in almacenes)
            {
                <option value="@almacen.IdAlmacen">@almacen.Nombre</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <label>Naturaleza</label>
        <select class="form-select" @bind="naturaleza" @bind:after="OnNaturalezaChange">
            <option value="Ingreso">Ingreso</option>
            <option value="Egreso">Egreso</option>
        </select>
    </div>
    @if (naturaleza.StartsWith("E", StringComparison.OrdinalIgnoreCase))
    {
        <div class="col-md-2">
            <label>Tipo</label>
            <select class="form-select" @bind="tipo">
                <option value="">Todos</option>
                @foreach (var t in tiposEgreso)
                {
                    <option value="@t">@t</option>
                }
            </select>
        </div>
    }
    <div class="col-md-2">
        <label>Desde</label>
        <InputDate @bind-Value="fechaInicio" class="form-control" />
    </div>
    <div class="col-md-2">
        <label>Hasta</label>
        <InputDate @bind-Value="fechaFin" class="form-control" />
    </div>
    <div class="col-md-2 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="Buscar"><i class="bi bi-search"></i> Buscar</button>
        <button class="btn btn-success" @onclick="Nuevo">Nuevo</button>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Naturaleza</th>
            <th>Tipo</th>
            <th>Glosa</th>
            <th>Monto</th>
            <th>Estado</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (lista.Any())
        {
            @foreach (var item in lista)
            {
                <tr>
                    <td>@item.Fecha.ToString("yyyy-MM-dd")</td>
                    <td>@(item.Naturaleza == "I" ? "Ingreso" : "Egreso")</td>
                    <td>@item.Tipo</td>
                    <td>@item.Glosa</td>
                    <td>@item.Monto.ToString("N2")</td>
                    <td>@(item.Estado == "E" ? "Emitido" : "Anulado")</td>
                    <td>
                        <button class="btn btn-info btn-sm me-2" @onclick="() => VerFoto(item.IdIngresoEgreso)">
                            <i class="bi bi-image"></i> Ver Foto
                        </button>
                        @if (esAdmin && item.Estado == "E")
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => Anular(item.IdIngresoEgreso)">Anular</button>
                        }
                        else if (item.Estado == "A")
                        {
                            <span class="badge bg-secondary">Anulado</span>
                        }
                    </td>
                </tr>
                }
                <tr class="table-light">
                    <td colspan="4" class="text-end fw-bold">Total</td>
                    <td class="fw-bold">@TotalMonto.ToString("N2")</td>
                    <td colspan="2"></td>
                </tr>
        }
        else
        {
            <tr><td colspan="7" class="text-center">Sin registros</td></tr>
        }
    </tbody>
</table>
@if (showPhotoModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Foto</h5>
                    <button type="button" class="btn-close" @onclick="ClosePhotoModal"></button>
                </div>
                <div class="modal-body text-center">
                    @if (!string.IsNullOrEmpty(photoUrl))
                    {
                        <img src="@photoUrl" alt="Foto" class="img-fluid img-thumbnail" style="max-width:300px;max-height:300px;" />
                    }
                    else
                    {
                        <p>No hay foto disponible.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="ClosePhotoModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private List<IngresoEgresoDTO> lista = new();
    private string naturaleza = "EGRESO";
    private List<AlmacenDTO> almacenes = new();
    private DateTime fechaInicio = DateTime.Today;
    private DateTime fechaFin = DateTime.Today;
    private int idAlmacen;
    private int? idUsuario;
    private bool soloLecturaAlmacen = false;
    private bool esAdmin = false;
    private string? tipo;
    private bool showPhotoModal = false;
    private string? photoUrl;
    private readonly List<string> tiposEgreso = new()
    {
        "GASTOS DIVERSOS",
        "TRANSFERENCIA",
        "PAGO PROVEEDORES",
        "PAGO LUZ",
        "PAGO AGUA",
        "PAGO TELEFONO",
        "PAGO CELULAR",
        "PAGO ALQUILER",
        "PAGO PLANILLAS",
        "PAGO ADELANTOS",
        "SUNAT",
        "FLETE",
        "AFP",
        "AFP-REPORTE",
        "SUNAT-REPORTE",
        "ALQUILER-REPORTE"
    };

    protected override async Task OnInitializedAsync()
    {
        almacenes = await AlmacenService.GetAlmacenes() ?? new List<AlmacenDTO>();
        idUsuario = await AuthService.GetUserId();
        idAlmacen = await AuthService.GetUserAlmacenId() ?? 0;
        var cargo = await AuthService.GetUserCargo();
        esAdmin = string.Equals(cargo, "ADMINISTRADOR", StringComparison.OrdinalIgnoreCase);

        if (!esAdmin)
        {
            almacenes = almacenes.Where(a => a.IdAlmacen == idAlmacen).ToList();
            soloLecturaAlmacen = true;
        }
        else
        {
            idUsuario = null;
        }

        await Buscar();
    }

    private async Task Buscar()
    {
        lista = await IngresosEgresosService.Listar(idAlmacen == 0 ? null : idAlmacen, idUsuario, fechaInicio, fechaFin, naturaleza, tipo) ?? new List<IngresoEgresoDTO>();
    }

    private void Nuevo()
    {
        Navigation.NavigateTo($"/ingreso-egreso-form?naturaleza={naturaleza}");
    }

    private async Task Anular(int id)
    {
        var ok = await IngresosEgresosService.Anular(id);
        if (ok)
        {
            await Buscar();
        }
    }

    private async Task OnNaturalezaChange()
    {
        tipo = string.Empty;
        await Buscar();
    }

    private void VerFoto(int id)
    {
        photoUrl = $"{Http.BaseAddress}api/IngresosEgresos/foto/{id}?t={DateTime.Now.Ticks}";
        showPhotoModal = true;
    }

    private void ClosePhotoModal()
    {
        showPhotoModal = false;
        photoUrl = null;
    }

    private decimal TotalMonto => lista.Where(item => item.Estado == "E").Sum(item => item.Monto);

}