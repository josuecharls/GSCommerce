@page "/ventass/crear/{modo}"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject ReniecService ReniecService
@inject ArticuloService articuloService
@inject VentaService ventaService
@inject SerieCorrelativoService SerieCorrelativoService
@inject PersonalService PersonalService
@inject TipoDocumentoVentaService TipoDocumentoVentaService
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Web
@inject AuthService AuthService
@inject IJSRuntime JS
@using System.Text;

<h3>Registrar Venta</h3>
<button class="btn btn-outline-primary" @onclick="AbrirNuevaVenta">+ Nueva Venta</button>
<div class="mb-3">
    <label>Escanear o Digitar Código:</label>
    <input @bind="codigoBusqueda" @onkeypress="BuscarAlPresionarEnter" class="form-control" @ref="inputCodigoRef" />
</div>

<div class="mb-3">
    <label>Tipo de Documento:</label>
    <select class="form-select" @onchange="OnTipoDocumentoChanged">
        @if (EsVentaNormal)
        {
            <option>BOLETA</option>
            <option>FACTURA</option>
        }
        else if (EsCajaManual)
        {
            <option>BOLETA M</option>
            <option>FACTURA M</option>
            <option>TICKET</option>
        }
    </select>
</div>
<div class="mb-3">
    <label>Vendedor:</label>
    <select class="form-select" @onchange="OnVendedorChanged">
        <option value="">-- Seleccione --</option>
        @foreach (var v in vendedores)
        {
            <option value="@v.IdPersonal">@($"{v.Nombres} {v.Apellidos}")</option>
        }
    </select>
</div>

<div class="mb-3">
    <label>Serie:</label>
    <input class="form-control" value="@venta.Serie" disabled />
</div>
<div class="mb-3">
    <label>Número:</label>
    <input class="form-control" value="@venta.Numero.ToString("D8")" disabled />
</div>

@if (RequiereCliente)
{
    <div class="mb-3">
        <label>Cliente (DNI o RUC):</label>
        <InputText class="form-control" @bind-Value="venta.DocumentoCliente" @onblur="BuscarClientePorDocumento" />

        @if (!string.IsNullOrEmpty(ValidarDocumentoCliente()))
        {
            <div class="text-danger">@ValidarDocumentoCliente()</div>
        }
    </div>

    <div class="mb-3">
        <label>Nombre Cliente:</label>
        <InputText class="form-control" @bind-Value="venta.NombreCliente" />
    </div>
}

<button class="btn btn-primary mb-3" @onclick="AgregarProducto">+ Agregar Producto</button>

<table class="table">
    <thead>
        <tr>
            <th>Item</th>
            <th>Código</th>
            <th>Descripción</th>
            <th>Cantidad</th>
            <th>Precio Unitario</th>
            <th>Descuento (%)</th>
            <th>Total</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var detalle in venta.Detalles)
        {
            <tr>
                <td>@detalle.Item</td>
                <td><input class="form-control" @bind="detalle.CodigoItem" disabled /></td>
                <td><input class="form-control" @bind="detalle.DescripcionItem" disabled /></td>
                <td><input type="number" class="form-control" step="1" min="1" @bind="detalle.Cantidad" @oninput="RecalcularTotales" /></td>
                <td><input type="number" class="form-control" step="0.01" @bind="detalle.PrecioUnitario" @oninput="RecalcularTotales" /></td>
                <td><input type="number" class="form-control" step="0.01" @bind="detalle.PorcentajeDescuento" @oninput="RecalcularTotales" /></td>
                <td>@detalle.Total.ToString("N2")</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarProducto(detalle)">X</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="text-end">
    <h5>Subtotal: @venta.SubTotal.ToString("N2")</h5>
    <h5>IGV: @venta.Igv.ToString("N2")</h5>
    <h5><strong>Total: @venta.Total.ToString("N2")</strong></h5>
</div>

@if (!ventaCobrada)
{
    <div class="text-end mb-4">
        <button class="btn btn-success" @onclick="AbrirCobrar">Cobrar</button>
    </div>
}
else
{
    <div class="alert alert-success text-center">
        ✅ Venta Cobrada Correctamente
    </div>

    <div class="text-center mt-3">
        <button class="btn btn-outline-primary" @onclick="ImprimirTicket">
            🖨️ Imprimir Ticket
        </button>
    </div>
}

<CobrarModal @ref="cobrarModalRef" MontoTotal="@venta.APagar"
OnConfirmado="CobroConfirmado"
OnCancelado="CobroCancelado" />

@code {
    [Parameter] public string modo { get; set; } = "b1";

    private bool EsCajaManual => modo.ToLower() == "b2";
    private bool EsVentaNormal => modo.ToLower() == "b1";
    private VentaCabeceraDTO venta = new VentaCabeceraDTO();
    private string codigoBusqueda = string.Empty;
    private ElementReference inputCodigoRef;
    private CobrarModal? cobrarModalRef;
    private List<DetallePagoDTO> pagosRealizados = new();
    private bool ventaCobrada = false;
    //private string? tipoDocumentoSeleccionado;
    private int? idAlmacenActual;

    private List<SerieCorrelativoDTO> seriesDisponibles = new();
    private List<PersonalDTO> vendedores = new();
    private int? idVendedorSeleccionado;


    protected override async Task OnInitializedAsync()
    {
        idAlmacenActual = await AuthService.GetUserAlmacenId();
        venta.TipoDocumento = EsCajaManual ? "BOLETA M" : "BOLETA";

        if (idAlmacenActual != null)
        {
            // 🔹 Ya puedes usar idAlmacenActual para buscar la serie:
            vendedores = await PersonalService.ObtenerVendedoresPorAlmacen(idAlmacenActual.Value);
            if (vendedores.Any())
            {
                var v = vendedores.First();
                idVendedorSeleccionado = v.IdPersonal;
                venta.IdVendedor = v.IdPersonal;
                venta.NombreVendedor = ($"{v.Nombres} {v.Apellidos}").Trim();
            }
            await CargarSeriePorTipoYAlmacen();
        }
    }

    private async Task CargarSeriePorTipoYAlmacen()
    {
        if (!string.IsNullOrEmpty(venta.TipoDocumento) && idAlmacenActual != null)
        {
            var tipos = await TipoDocumentoVentaService.GetTiposDocumento();
            var tipoSeleccionado = tipos?.FirstOrDefault(t =>
                t.Abreviatura == venta.TipoDocumento &&
                (EsCajaManual ? t.Manual : !t.Manual));

            if (tipoSeleccionado == null)
                return;

            var series = await SerieCorrelativoService.ObtenerPorAlmacenAsync(idAlmacenActual.Value);
            // Mostrar todas las series registradas, independientemente de su estado
            seriesDisponibles = series.Where(s => s.IdTipoDocumentoVenta == tipoSeleccionado.IdTipoDocumentoVenta)
                                      .OrderByDescending(s => s.Estado)
                                      .ToList();

            var serieActiva = seriesDisponibles.FirstOrDefault(s => s.Estado);
            if (serieActiva != null)
            {
                venta.Serie = serieActiva.Serie;
                venta.Numero = serieActiva.Correlativo + 1; // ✅ Generar número siguiente
            }
            else if (seriesDisponibles.Any())
            {
                // Tomar la primera serie aunque esté inactiva
                var s = seriesDisponibles.First();
                venta.Serie = s.Serie;
                venta.Numero = s.Correlativo + 1;
            }
            else
            {
                venta.Serie = string.Empty;
                venta.Numero = 0;
                await JS.InvokeVoidAsync("alert", "⚠️ No se encontró una serie activa para este tipo de documento.");
            }
        }
    }

    private async Task OnTipoDocumentoChanged(ChangeEventArgs e)
    {
        venta.TipoDocumento = e.Value?.ToString() ?? "";
        await CargarSeriePorTipoYAlmacen();
    }

    private void OnVendedorChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            idVendedorSeleccionado = id;
            var v = vendedores.FirstOrDefault(x => x.IdPersonal == id);
            if (v != null)
            {
                venta.IdVendedor = v.IdPersonal;
                venta.NombreVendedor = ($"{v.Nombres} {v.Apellidos}").Trim();
            }
        }
    }

    private void SeleccionarSerie(SerieCorrelativoDTO serie)
    {
        venta.Serie = serie.Serie;
        venta.Numero = serie.Correlativo + 1;
        StateHasChanged();
    }

    private void AgregarProducto()
    {
        var nuevoItem = new VentaDetalleDTO
            {
                Item = venta.Detalles.Count + 1
            };
        venta.Detalles.Add(nuevoItem);
        RecalcularTotales();
    }

    private void EliminarProducto(VentaDetalleDTO detalle)
    {
        venta.Detalles.Remove(detalle);
        int item = 1;
        foreach (var d in venta.Detalles)
        {
            d.Item = item++;
        }
        RecalcularTotales();
    }

    private void RecalcularTotales()
    {
        foreach (var detalle in venta.Detalles)
        {
            decimal precioConDescuento = detalle.PrecioUnitario * (1 - detalle.PorcentajeDescuento / 100);
            detalle.Total = detalle.Cantidad * precioConDescuento;
        }

        venta.Total = venta.Detalles.Sum(d => d.Total);
        venta.SubTotal = venta.Total / 1.18m;
        venta.Igv = venta.Total - venta.SubTotal;
        venta.APagar = venta.Total;
    }

    private async Task BuscarAlPresionarEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {

            if (string.IsNullOrWhiteSpace(codigoBusqueda))
                return;

            var codigo = codigoBusqueda.Trim().PadLeft(6, '0');
            codigoBusqueda = string.Empty;

            var articulo = await articuloService.BuscarPorCodigoAsync(codigo);

            if (articulo != null)
            {
                var existente = venta.Detalles.FirstOrDefault(d => d.CodigoItem == codigo);

                if (existente != null)
                {
                    existente.Cantidad += 1;
                }
                else
                {
                    venta.Detalles.Add(new VentaDetalleDTO
                        {
                            Item = venta.Detalles.Count + 1,
                            CodigoItem = articulo.IdArticulo,
                            DescripcionItem = articulo.Descripcion,
                            Cantidad = 1,
                            PrecioUnitario = articulo.PrecioVenta
                        });
                }

                RecalcularTotales();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Artículo no encontrado.");
            }
        }
    }

    private void AbrirCobrar()
    {
        if (venta.Detalles.Count == 0)
        {
            JS.InvokeVoidAsync("alert", "⚠️ Debes agregar al menos un producto.");
            return;
        }

        if (EsFactura && (string.IsNullOrWhiteSpace(venta.DocumentoCliente) || venta.DocumentoCliente.Length != 11))
        {
            JS.InvokeVoidAsync("alert", "⚠️ El RUC debe tener 11 dígitos.");
            return;
        }

        cobrarModalRef?.Abrir();
    }

    private async Task BuscarClientePorDocumento(FocusEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(venta.DocumentoCliente))
            return;

        var doc = venta.DocumentoCliente.Trim();

        try
        {
            if (doc.Length == 8) //DNI
            {
                var nombre = await ReniecService.ObtenerNombrePorDNI(doc);
                venta.NombreCliente = !string.IsNullOrEmpty(nombre)
                    ? nombre.ToUpper()
                    : "CLIENTE NO REGISTRADO EN RENIEC";
            }
            else if (doc.Length == 11) // RUC
            {
                var razonSocial = await ReniecService.ObtenerNombrePorRUC(doc);
                venta.NombreCliente = !string.IsNullOrEmpty(razonSocial)
                    ? razonSocial.ToUpper()
                    : "CLIENTE NO REGISTRADO EN SUNAT";
            }
            else
            {
                venta.NombreCliente = "DOCUMENTO INVÁLIDO";
            }

            // Forzar actualización de la UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al buscar cliente: {ex.Message}");
            venta.NombreCliente = "ERROR AL CONSULTAR";
        }
    }

    private async Task AbrirNuevaVenta()
    {
        await JS.InvokeVoidAsync("open", "/ventass/crear/b1", "_blank");
    }

    private async Task CobroConfirmado(List<DetallePagoDTO> pagos)
    {
        pagosRealizados = pagos;
        ventaCobrada = true;
        Console.WriteLine("Venta cobrada con éxito");

        var tipos = await TipoDocumentoVentaService.GetTiposDocumento();
        var tipoDoc = tipos?.FirstOrDefault(t =>
            t.Descripcion.ToUpper() == venta.TipoDocumento.ToUpper()
            && (EsCajaManual ? t.Manual : !t.Manual));

        foreach (var pago in pagos)
        {
            pago.IdTipoPagoVenta = pago.FormaPago.ToUpper() switch
            {
                "EFECTIVO" => 2,                // Efectivo Soles
                "DOLARES" => 3,                 // Efectivo Dólares
                "VISA" => 4,
                "MASTERCARD" => 5,
                "AMERICAN EXPRESS" => 6,
                "DINNERS CLUB" => 7,
                "NOTA CREDITO" => 8,
                "YAPE" => 9,
                "TRANSFERENCIA" => 10,
                _ => 2                          // Default a efectivo soles
            };
        }

        var ventaRegistrada = await ventaService.RegistrarVentaAsync(new VentaRegistroDTO
            {
                Cabecera = venta,
                Detalles = venta.Detalles,
                Pagos = pagosRealizados,
                TipoDocumento = tipoDoc!
            });

        if (!ventaRegistrada)
        {
            await JS.InvokeVoidAsync("alert", "❌ Error al registrar la venta.");
            return;
        }

        // ✅ Incrementar correlativo si la venta fue exitosa
        if (idAlmacenActual.HasValue)
        {
            await SerieCorrelativoService.IncrementarCorrelativo(
                venta.Serie,
                idAlmacenActual.Value,
                tipoDoc.IdTipoDocumentoVenta
            );
        }

        // ✅ Imprimir ticket
        var htmlTicket = GenerarHtmlDelTicket();
        await JS.InvokeVoidAsync("imprimirTicket", htmlTicket);
        if (EsFactura)
        {
            // SUNAT solo acepta RUC (6) en facturas
            venta.TipoDocumento = "6";
        }
        else
        {
            // En boletas, puede ser DNI o sin documento
            venta.TipoDocumento = venta.DocumentoCliente.Length == 8 ? "1" : "0";
        }
        // Luego de registrar correctamente, envía a SUNAT (si no es TICKET)
        if (tipoDoc.Abreviatura != "TK")
        {
            var exitoSunat = await ventaService.EnviarASUNATAsync(venta, venta.Detalles, tipoDoc);
            if (exitoSunat)
                await JS.InvokeVoidAsync("alert", "✅ Venta registrada y declarada a SUNAT.");
            else
                await JS.InvokeVoidAsync("alert", "❌ Venta registrada, pero falló el envío a SUNAT.");
        }

        LimpiarFormulario();
    }

    private string GenerarHtmlDelTicket()
    {
        string tipoDocumentoCodigoSunat = venta.TipoDocumento == "FACTURA" ? "01" : "03";
        string tipoDocClienteSunat = venta.DocumentoCliente?.Length == 11 ? "6" : "1"; // 6 = RUC, 1 = DNI

        string textoQR = $"{venta.RucEmisor}|{tipoDocumentoCodigoSunat}|{venta.Serie}|{venta.Numero}|{venta.Igv.ToString("0.00")}|{venta.Total.ToString("0.00")}|{venta.FechaEmision:dd/MM/yyyy}|{tipoDocClienteSunat}|{venta.DocumentoCliente}";
        string urlQR = $"https://api.qrserver.com/v1/create-qr-code/?size=150x150&data={Uri.EscapeDataString(textoQR)}";

        var sb = new StringBuilder();

        sb.AppendLine("<div style='font-family: monospace; width: 260px;'>");
        sb.AppendLine("<h4 style='text-align:center;'>GSHOP</h4>");
        sb.AppendLine("<p style='text-align:center;'>RUC: " + venta.RucEmisor + "<br/>" +
                      venta.DireccionEmisor + "</p>");
        sb.AppendLine("<hr/>");

        sb.AppendLine($"<p><strong>{venta.TipoDocumento} Electrónica</strong><br/>" +
                      $"Serie: {venta.Serie}-{venta.Numero:D4}<br/>" +
                      $"Fecha: {venta.FechaEmision:dd/MM/yyyy HH:mm}</p>");

        sb.AppendLine($"<p>Cliente: {venta.NombreCliente}<br/>" +
                      $"Doc: {venta.DocumentoCliente}</p>");

        sb.AppendLine($"<p>Vendedor: {venta.NombreVendedor} (ID: {venta.IdVendedor})</p>");

        sb.AppendLine("<table style='width:100%; font-size:12px;'>");
        sb.AppendLine("<thead><tr><th>Item</th><th>Desc</th><th>Cant</th><th>PU</th><th>Tot</th></tr></thead>");
        sb.AppendLine("<tbody>");

        foreach (var item in venta.Detalles)
        {
            sb.AppendLine("<tr>");
            sb.AppendLine($"<td>{item.Item}</td>");
            sb.AppendLine($"<td>{item.DescripcionItem}</td>");
            sb.AppendLine($"<td>{item.Cantidad}</td>");
            sb.AppendLine($"<td>{item.PrecioUnitario:N2}</td>");
            sb.AppendLine($"<td>{item.Total:N2}</td>");
            sb.AppendLine("</tr>");
        }

        sb.AppendLine("</tbody></table>");

        sb.AppendLine("<hr/>");
        sb.AppendLine($"<p>Subtotal: {venta.SubTotal:N2}<br/>" +
                      $"IGV: {venta.Igv:N2}<br/>" +
                      $"<strong>Total: {venta.Total:N2}</strong><br/>" +
                      $"Pagado: {venta.APagar:N2}<br/>" +
                      $"<strong>Vuelto: {venta.Vuelto:N2}</strong></p>");

        sb.AppendLine("<hr/>");
        sb.AppendLine("<p>Forma(s) de Pago:</p>");
        foreach (var pago in venta.Pagos)
        {
            var extra = pago.FormaPago switch
            {
                "VISA" or "MASTERCARD" => $" - Dígitos: {pago.CodigoVerificacion}",
                "YAPE" => $" - Cód. Verif: {pago.CodigoVerificacion}",
                _ => ""
            };
            sb.AppendLine($"<p>{pago.FormaPago}{extra} - S/ {pago.Monto:N2}</p>");
        }

        sb.AppendLine("<div style='text-align:center;'>");
        sb.AppendLine($"<img src='{urlQR}' width='100' height='100'/><br/>");
        sb.AppendLine($"<small>Hash: {venta.CodigoVerificacion}</small>");
        sb.AppendLine("</div>");

        sb.AppendLine("<p style='text-align:center;'>Gracias por su compra</p>");
        sb.AppendLine("</div>");

        return sb.ToString();
    }



    private async Task AbrirTicketEnVentanaNueva()
    {
        var html = GenerarHtmlDelTicket();
        await JS.InvokeVoidAsync("abrirTicket", html);
    }

    private async Task ImprimirTicket()
    {
        var html = GenerarHtmlDelTicket();
        await JS.InvokeVoidAsync("imprimirTicket", html);
    }

    /*
    private async Task CargarSerieSegunTipoDocumento()
    {
        if (string.IsNullOrWhiteSpace(venta.TipoDocumento))
            return;

        // Mapear el tipo a su IdTipoDocumentoVenta
        var tipoDoc = await TipoDocumentoVentaService.GetTiposDocumento();
        var tipoSeleccionado = tipoDoc?.FirstOrDefault(t => t.Abreviatura == venta.TipoDocumento);
        if (tipoSeleccionado == null)
            return;

        var series = await SerieCorrelativoService.ObtenerPorAlmacenAsync(1); // Suponiendo IdAlmacen fijo por ahora
        var serieEncontrada = series.FirstOrDefault(s => s.IdTipoDocumentoVenta == tipoSeleccionado.IdTipoDocumentoVenta && s.Estado);

        if (serieEncontrada != null)
        {
            venta.Serie = serieEncontrada.Serie;
        }
        else
        {
            venta.Serie = string.Empty;
            await JS.InvokeVoidAsync("alert", "⚠️ No se encontró serie para este tipo de documento.");
        }
    }*/

    private async Task GuardarVentaEnBDAsync()
    {
        try
        {
            var ventaRegistro = new VentaRegistroDTO
                {
                    Cabecera = venta,
                    Detalles = venta.Detalles.ToList(),
                    Pagos = pagosRealizados
                };

            var response = await Http.PostAsJsonAsync("api/ventas", ventaRegistro);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("✅ Venta guardada exitosamente en el servidor.");
                await JS.InvokeVoidAsync("alert", "Venta registrada exitosamente.");
                LimpiarFormulario();
            }
            else
            {
                var errorMsg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Error al guardar venta: {errorMsg}");
                await JS.InvokeVoidAsync("alert", "Error al guardar la venta.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Excepción al guardar venta: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error inesperado al guardar la venta.");
        }
    }
    private async Task CobroCancelado()
    {
        Console.WriteLine("Cobro cancelado");
        await Task.CompletedTask;
    }
    private async void LimpiarFormulario()
    {
        venta = new VentaCabeceraDTO();
        pagosRealizados.Clear();
        ventaCobrada = false;

        if (idVendedorSeleccionado.HasValue)
        {
            var v = vendedores.FirstOrDefault(x => x.IdPersonal == idVendedorSeleccionado.Value);
            if (v != null)
            {
                venta.IdVendedor = v.IdPersonal;
                venta.NombreVendedor = ($"{v.Nombres} {v.Apellidos}").Trim();
            }
        }

        await Task.Delay(100);
        await inputCodigoRef.FocusAsync();
        await CargarSeriePorTipoYAlmacen();

    }

    private bool RequiereCliente =>
    venta.TipoDocumento == "BOLETA" || venta.TipoDocumento == "FACTURA" || venta.TipoDocumento == "BOLETA M" || venta.TipoDocumento == "FACTURA M";

    private bool EsFactura =>
        venta.TipoDocumento == "FACTURA" || venta.TipoDocumento == "FACTURA M";

    private string? ValidarDocumentoCliente()
    {
        if (EsFactura && (string.IsNullOrWhiteSpace(venta.DocumentoCliente) || venta.DocumentoCliente.Length != 11))
        {
            return "El RUC debe tener 11 dígitos.";
        }
        return null;
    }
}
