@page "/estado-sunat"
@**@
@using Microsoft.AspNetCore.Authorization
@using GSCommerce.Client.Models.SUNAT
@inject HttpClient Http
@inject IJSRuntime JS

<h3>📄 Estado SUNAT de Comprobantes</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <label>Desde:</label>
        <InputDate @bind-Value="fechaDesde" class="form-control" />
    </div>
    <div class="col-md-3">
        <label>Hasta:</label>
        <InputDate @bind-Value="fechaHasta" class="form-control" />
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-primary" @onclick="BuscarEstados">🔍 Buscar</button>
    </div>
</div>

@if (cargando)
{
    <p>⏳ Cargando datos...</p>
}
else if (estados != null && estados.Any())
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Tipo</th>
                <th>Serie</th>
                <th>Número</th>
                <th>Fecha</th>
                <th>Estado SUNAT</th>
                <th>Descripción</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in estados)
            {
                <tr>
                    <td>@item.TipoDocumento</td>
                    <td>@item.Serie</td>
                    <td>@item.Numero.ToString("D8")</td>
                    <td>@item.FechaEmision.ToShortDateString()</td>
                    <td>
                        @if (item.EstadoSunat == "ACEPTADO")
                        {
                            <span class="badge bg-success">Aceptado</span>
                        }
                        else if (item.EstadoSunat == "RECHAZADO")
                        {
                            <span class="badge bg-danger">Rechazado</span>
                        }
                        else
                        {
                            <span class="badge bg-warning text-dark">Pendiente</span>
                        }
                    </td>
                    <td>@item.DescripcionSunat</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>⚠️ No se encontraron resultados en el rango seleccionado.</p>
}

@code {
    private List<EstadosSunatDTO> estados = new();
    private DateTime fechaDesde = DateTime.Today;
    private DateTime fechaHasta = DateTime.Today;
    private bool cargando = false;

    private async Task BuscarEstados()
    {
        cargando = true;

        try
        {
            var url = $"api/ventas/estado-sunat?desde={fechaDesde:yyyy-MM-dd}&hasta={fechaHasta:yyyy-MM-dd}";
            estados = await Http.GetFromJsonAsync<List<EstadosSunatDTO>>(url) ?? new();
        }
        catch (Exception ex)
        {
            //Console.WriteLine("Error al obtener estados SUNAT: " + ex.Message);
            await JS.InvokeVoidAsync("alert", "Error al obtener estados SUNAT.");
        }
        finally
        {
            cargando = false;
        }
    }
}
