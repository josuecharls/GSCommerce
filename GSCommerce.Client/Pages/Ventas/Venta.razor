@page "/ventas"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject VentaService ventaService
@inject IJSRuntime JS

<h3>Ventas Registradas</h3>

<div class="row mb-3">
    <div class="col-md-4">
        <label>Desde:</label>
        <input type="date" class="form-control" @bind-value="desde" @bind-value:event="oninput" />
    </div>
    <div class="col-md-4">
        <label>Hasta:</label>
        <input type="date" class="form-control" @bind-value="hasta" @bind-value:event="oninput" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="BuscarVentas">Buscar</button>
    </div>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Tipo Doc</th>
            <th>Serie</th>
            <th>Número</th>
            <th>Cliente</th>
            <th>Total</th>
            <th>Forma Pago</th>
            <th>Estado</th>
        </tr>
    </thead>
    <tbody>
        @if (ventas.Any())
        {
            @foreach (var v in ventas)
            {
                <tr @oncontextmenu="@((e) => MostrarMenuContextual(v, e))">
                    <td>@v.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@v.TipoDocumento</td>
                    <td>@v.Serie</td>
                    <td>@v.Numero.ToString("D8")</td>
                    <td>@v.NombreCliente</td>
                    <td>@v.Total.ToString("C")</td>
                    <td>@v.FormaPago</td>
                    <td>@v.Estado</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="8" class="text-center">No se encontraron ventas.</td>
            </tr>
        }
        @if (mostrarMenuContextual && ventaSeleccionada != null)
        {
            <div class="context-menu bg-light border shadow-sm position-absolute p-2" style="@estiloMenu" @onclick:stopPropagation>
                <button class="dropdown-item" @onclick="@(() => EmitirNotaCredito("ELECTRONICA"))">Emitir N.C. Electrónica</button>
                <button class="dropdown-item" @onclick="@(() => EmitirNotaCredito("MANUAL"))">Emitir N.C. Manual</button>
                <button class="dropdown-item" @onclick="@(() => EmitirNotaCredito("INTERNA"))">Emitir N.C. Interna</button>
                @if (!string.IsNullOrWhiteSpace(ventaSeleccionada.NumeroNotaCredito))
                {
                    <button class="dropdown-item" @onclick="ReimprimirNC">Ver N.C. PDF</button>
                }
            </div>
        }
    </tbody>
</table>

@code {
    private List<VentaConsultaDTO> ventas = new();
    private DateTime desde = DateTime.Today;
    private DateTime hasta = DateTime.Today;
    private VentaConsultaDTO? ventaSeleccionada;
    private bool mostrarMenuContextual = false;
    private string estiloMenu = "";

    private async Task BuscarVentas()
    {
        ventas = await ventaService.ObtenerVentasAsync(desde, hasta);
    }

    protected override async Task OnInitializedAsync()
    {
        await BuscarVentas(); // Cargar ventas del día por defecto
    }

    private void MostrarMenuContextual(VentaConsultaDTO venta, MouseEventArgs e)
    {
        ventaSeleccionada = venta;
        mostrarMenuContextual = true;
        estiloMenu = $"position: absolute; top: {e.ClientY}px; left: {e.ClientX}px;";
    }

    private async Task EmitirNotaCredito(string tipo)
    {
        mostrarMenuContextual = false;

        if (ventaSeleccionada == null)
            return;

        if (ventaSeleccionada.Estado != "E" && ventaSeleccionada.Estado != "D")
        {
            await JS.InvokeVoidAsync("alert", "⚠️ Solo se puede emitir NC para ventas EMITIDAS o DECLARADAS.");
            return;
        }

        if (!string.IsNullOrWhiteSpace(ventaSeleccionada.NumeroNotaCredito))
        {
            await JS.InvokeVoidAsync("alert", $"❌ Ya se generó una N.C.: {ventaSeleccionada.NumeroNotaCredito}");
            return;
        }

        var url = tipo switch
        {
            "ELECTRONICA" => $"/nota-credito/electronica/{ventaSeleccionada.IdComprobante}",
            "MANUAL" => $"/nota-credito/manual/{ventaSeleccionada.IdComprobante}",
            "INTERNA" => $"/nota-credito/interna/{ventaSeleccionada.IdComprobante}",
            _ => null
        };

        if (!string.IsNullOrEmpty(url))
        {
            await JS.InvokeVoidAsync("open", url, "_blank");
        }
    }


    private async Task ReimprimirNC()
    {
        mostrarMenuContextual = false;
        if (ventaSeleccionada == null || string.IsNullOrWhiteSpace(ventaSeleccionada.NumeroNotaCredito))
            return;

        var partes = ventaSeleccionada.NumeroNotaCredito.Split('-');
        if (partes.Length != 2)
            return;

        if (int.TryParse(partes[1], out var numero))
        {
            var serie = partes[0];
            var url = $"/api/notascredito/pdf-por-numero/{serie}/{numero}";
            await JS.InvokeVoidAsync("open", url, "_blank");
        }
    }
}