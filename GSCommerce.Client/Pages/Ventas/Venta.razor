@page "/ventas"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject VentaService ventaService
@inject AuthService AuthService
@inject AlmacenService AlmacenService
@inject IJSRuntime JS

<h3>Ventas Registradas</h3>
@if (cargo == "ADMINISTRADOR")
{
    <div class="row mb-3">
        <div class="col">
            <div class="d-flex flex-wrap gap-3">
                <div><strong>Efectivo S/:</strong> @efectivoSoles.ToString("N2")</div>
                <div><strong>Efectivo $:</strong> @efectivoDolares.ToString("N2")</div>
                <div><strong>Tarjeta/Online:</strong> @tarjetaOnline.ToString("N2")</div>
                <div><strong>N.C.:</strong> @notaCredito.ToString("N2")</div>
                <div><strong>Total:</strong> <span class="text-danger">@totalGeneral.ToString("N2")</span></div>
                <div><strong>Boletas/Tickets:</strong> @cantidadBoletas</div>
            </div>
        </div>
    </div>
}

<div class="row mb-3">
    @if (cargo == "ADMINISTRADOR")
    {
        <div class="col-md-3">
            <label>Almacén:</label>
            <select class="form-control" @bind="selectedAlmacen">
                <option value="0">General</option>
                @foreach (var a in almacenes)
                {
                    <option value="@a.IdAlmacen">@a.Nombre</option>
                }
            </select>
        </div>
    }
    <div class="@(cargo == "ADMINISTRADOR" ? "col-md-3" : "col-md-4")">
        <label>Desde:</label>
        <input type="date" class="form-control" @bind-value="desde" @bind-value:event="oninput" />
    </div>
    <div class="@(cargo == "ADMINISTRADOR" ? "col-md-3" : "col-md-4")">
        <label>Hasta:</label>
        <input type="date" class="form-control" @bind-value="hasta" @bind-value:event="oninput" />
    </div>

    <div class="col-md-3">
        <label>Tipo Doc:</label>
        <select class="form-control" @bind="selectedTipoDoc">
            <option value="0">Todos</option>
            <option value="1">BOLETA</option>
            <option value="2">FACTURA</option>
            <option value="4">TICKET</option>
            <option value="5">BOLETA M</option>
            <option value="6">FACTURA M</option>
        </select>
    </div>

    <div class="@(cargo == "ADMINISTRADOR" ? "col-md-12 col-lg-3" : "col-md-4") d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="BuscarVentas">Buscar</button>
    </div>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Tipo Doc</th>
            <th>Serie</th>
            <th>Número</th>
            <th>Cliente</th>
            <th>Total</th>
            <th>Forma Pago</th>
            <th>Estado</th>
            <th style="min-width:420px;">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (ventas.Any())
        {
            @foreach (var v in ventas)
            {
                <tr>
                    <td>@v.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@v.TipoDocumento</td>
                    <td>@v.Serie</td>
                    <td>@v.Numero.ToString("D8")</td>
                    <td>@v.NombreCliente</td>
                    <td>@v.Total.ToString("C", new System.Globalization.CultureInfo("es-PE"))</td>
                    <td>@v.FormaPago</td>
                    <td>
                        @if (v.Estado == "AN" || v.Estado == "ANULADO" || v.Estado == "A")
                        {
                            <span class="badge bg-danger">Anulado</span>
                        }
                        else if (v.Estado == "D")
                        {
                            <span class="badge bg-warning text-dark">Declarado</span>
                        }
                        else
                        {
                            <span class="badge bg-success">Emitido</span>
                        }
                    </td>
                    <td><div class="btn-group btn-group-sm flex-wrap" role="group">
                        <button class="btn btn-outline-info"
                                title="Reimprimir boleta"
                                @onclick="@(() => ReimprimirBoleta(v))">
                            🖨️ Imprimir
                        </button>
                        </div>
                        @if (cargo == "ADMINISTRADOR")
                        {
                        <div class="btn-group btn-group-sm flex-wrap" role="group">
                            <button class="btn btn-outline-primary"
                                    title="Emitir Nota de Crédito Electrónica"
                                    disabled="@(!PuedeEmitirNC(v))"
                                    @onclick="@(() => EmitirNotaCredito("ELECTRONICA", v))">
                                NC Electrónica
                            </button>
                            <button class="btn btn-outline-secondary"
                                    title="Emitir Nota de Crédito Manual"
                                    disabled="@(!PuedeEmitirNC(v))"
                                    @onclick="@(() => EmitirNotaCredito("MANUAL", v))">
                                NC Manual
                            </button>
                            <button class="btn btn-outline-dark"
                                    title="Emitir Nota de Crédito Interna"
                                    disabled="@(!PuedeEmitirNC(v))"
                                    @onclick="@(() => EmitirNotaCredito("INTERNA", v))">
                                NC Interna
                            </button>
                            <button class="btn btn-outline-success"
                                    title="Ver Nota de Crédito"
                                    disabled="@string.IsNullOrWhiteSpace(v.NumeroNotaCredito)"
                                    @onclick="@(() => VerNCPdf(v))">
                                Ver NC
                            </button>
                        </div>
                            @if (!string.IsNullOrWhiteSpace(v.NumeroNotaCredito))
                            {
                                <div class="text-muted small mt-1">NC: @v.NumeroNotaCredito</div>
                            }
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="9" class="text-center">No se encontraron ventas.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<VentaConsultaDTO> ventas = new();
    private DateTime desde = DateTime.Today;
    private DateTime hasta = DateTime.Today;
    private string cargo = string.Empty;
    private List<AlmacenDTO> almacenes = new();
    private int selectedAlmacen;
    private int selectedTipoDoc = 0; // 0 = todos
    private decimal efectivoSoles;
    private decimal efectivoDolares;
    private decimal tarjetaOnline;
    private decimal notaCredito;
    private decimal totalGeneral;
    private int cantidadBoletas;

    protected override async Task OnInitializedAsync()
    {
        cargo = await AuthService.GetUserCargo() ?? string.Empty;
        if (cargo == "ADMINISTRADOR")
        {
            var lista = await AlmacenService.GetAlmacenes();
            if (lista != null) almacenes = lista;
            selectedAlmacen = 0;
        }
        else
        {
            selectedAlmacen = await AuthService.GetUserAlmacenId() ?? 0;
        }

        await BuscarVentas();
    }

    private async Task BuscarVentas()
    {
        int? filtroAlmacen = cargo == "ADMINISTRADOR" && selectedAlmacen == 0 ? (int?)null : selectedAlmacen;
        int? filtroTipoDoc = selectedTipoDoc == 0 ? (int?)null : selectedTipoDoc;

        ventas = await ventaService.ObtenerVentasAsync(desde, hasta, filtroAlmacen, filtroTipoDoc);
        CalcularResumen();
    }

    private void CalcularResumen()
    {
        var activas = ventas.Where(v => !(v.Estado == "AN" || v.Estado == "ANULADO" || v.Estado == "A"));

        efectivoSoles = activas
            .Where(v => v.FormaPago.Contains("EFECTIVO", StringComparison.OrdinalIgnoreCase)
                        && !v.FormaPago.Contains("DOL", StringComparison.OrdinalIgnoreCase)
                        && !v.FormaPago.Contains("USD", StringComparison.OrdinalIgnoreCase))
            .Sum(v => v.Total);

        efectivoDolares = activas
            .Where(v => v.FormaPago.Contains("EFECTIVO", StringComparison.OrdinalIgnoreCase)
                        && (v.FormaPago.Contains("DOL", StringComparison.OrdinalIgnoreCase)
                            || v.FormaPago.Contains("USD", StringComparison.OrdinalIgnoreCase)))
            .Sum(v => v.Total);

        tarjetaOnline = activas
            .Where(v => v.FormaPago.Contains("TARJETA", StringComparison.OrdinalIgnoreCase)
                        || v.FormaPago.Contains("ONLINE", StringComparison.OrdinalIgnoreCase))
            .Sum(v => v.Total);

        notaCredito = activas
            .Where(v => v.FormaPago.Contains("NOTA", StringComparison.OrdinalIgnoreCase))
            .Sum(v => v.Total);

        totalGeneral = activas.Sum(v => v.Total);

        cantidadBoletas = activas.Count(v => v.TipoDocumento.Contains("BOLETA", StringComparison.OrdinalIgnoreCase)
                                            || v.TipoDocumento.Contains("TICKET", StringComparison.OrdinalIgnoreCase));
    }

    private bool PuedeEmitirNC(VentaConsultaDTO v) =>
        (v.Estado == "E" || v.Estado == "D") && string.IsNullOrWhiteSpace(v.NumeroNotaCredito);

    private async Task EmitirNotaCredito(string tipo, VentaConsultaDTO v)
    {
        if (!PuedeEmitirNC(v))
        {
            await JS.InvokeVoidAsync("alert", "⚠️ Solo se puede emitir N.C. para ventas EMITIDAS o DECLARADAS y sin N.C. previa.");
            return;
        }

        var url = tipo.ToUpper() switch
        {
            "ELECTRONICA" => $"/nota-credito/electronica/{v.IdComprobante}",
            "MANUAL" => $"/nota-credito/manual/{v.IdComprobante}",
            "INTERNA" => $"/nota-credito/interna/{v.IdComprobante}",
            _ => null
        };

        if (!string.IsNullOrEmpty(url))
            await JS.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task VerNCPdf(VentaConsultaDTO v)
    {
        if (string.IsNullOrWhiteSpace(v.NumeroNotaCredito))
            return;

        var partes = v.NumeroNotaCredito.Split('-');
        if (partes.Length != 2 || !int.TryParse(partes[1], out var numero))
        {
            await JS.InvokeVoidAsync("alert", "Formato de N.C. inválido.");
            return;
        }

        await JS.InvokeVoidAsync("open", $"/api/notascredito/pdf-por-numero/{partes[0]}/{numero}", "_blank");
    }

    private async Task ReimprimirBoleta(VentaConsultaDTO ventaRow)
    {
        try
        {
            var ventaCompleta = await ventaService.ObtenerVentaPorId(ventaRow.IdComprobante);
            if (ventaCompleta == null)
            {
                await JS.InvokeVoidAsync("alert", "No se pudo obtener la venta para reimpresión.");
                return;
            }

            // 👇 forzamos object para evitar dynamic binder
            var html = GenerarHtmlTicketDesdeVenta((object)ventaCompleta);
            await JS.InvokeVoidAsync("imprimirTicket", html);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "Error al reimprimir la boleta.");
        }
    }

    // === Helper: genera el mismo ticket en texto monoespaciado ===
    private static string GenerarHtmlTicketDesdeVenta(object vObj)
    {
        // Helpers seguros con nombres alternativos
        T GetAny<T>(object o, T def, params string[] names)
        {
            if (o == null) return def;
            var t = o.GetType();
            foreach (var n in names)
            {
                var p = t.GetProperty(n);
                if (p != null)
                {
                    var val = p.GetValue(o);
                    if (val == null) continue;

                    try
                    {
                        // Conversión robusta
                        if (typeof(T) == typeof(string)) return (T)(object)Convert.ToString(val)!;
                        if (typeof(T) == typeof(int)) return (T)(object)Convert.ToInt32(val);
                        if (typeof(T) == typeof(decimal)) return (T)(object)Convert.ToDecimal(val);
                        if (typeof(T) == typeof(DateTime)) return (T)(object)Convert.ToDateTime(val);
                        if (typeof(T).IsAssignableFrom(val.GetType())) return (T)val;
                    }
                    catch { /* ignora y sigue con el siguiente nombre */ }
                }
            }
            return def;
        }

        IEnumerable<object> GetList(object o, params string[] names)
        {
            var listObj = (object?)null;
            foreach (var n in names)
            {
                var p = o.GetType().GetProperty(n);
                if (p != null) { listObj = p.GetValue(o); if (listObj != null) break; }
            }
            if (listObj is System.Collections.IEnumerable ie)
                return ie.Cast<object>();
            return Enumerable.Empty<object>();
        }

        const int width = 40;
        string Center(string text)
        {
            text = (text ?? "").Trim();
            if (text.Length >= width) return text;
            int pad = (width - text.Length) / 2;
            return new string(' ', pad) + text;
        }

        // === Cabecera emisor (opcionales) ===
        string rucEmisor = GetAny<string>(vObj, "", "RucEmisor", "Ruc");
        string razonEmisor = GetAny<string>(vObj, "", "RazonSocialEmisor", "RazonSocial");
        string dirEmisor = GetAny<string>(vObj, "", "DireccionEmisor", "DireccionLocal", "Direccion");

        // === Documento / serie ===
        string tipoCpeTexto = GetAny<string>(vObj, "BOLETA", "TipoDocumento", "TipoDoc");
        string tipoDocCpe = tipoCpeTexto.ToUpper() == "FACTURA" ? "01" : "03";
        string serie = GetAny<string>(vObj, "", "Serie");
        int numero = GetAny<int>(vObj, 0, "Numero");

        // === Cliente ===
        string cliente = GetAny<string>(vObj, "", "NombreCliente", "Nombre");
        string docCliente = GetAny<string>(vObj, "", "DocumentoCliente", "Dniruc");
        string tipoDocCli = docCliente.Length == 11 ? "6" : (docCliente.Length == 8 ? "1" : "0");

        // === Totales ===
        decimal subTotal = GetAny<decimal>(vObj, 0m, "SubTotal", "Subtotal");
        decimal igv = GetAny<decimal>(vObj, 0m, "Igv", "IGV");
        decimal total = GetAny<decimal>(vObj, 0m, "Total");
        decimal vuelto = GetAny<decimal>(vObj, 0m, "Vuelto");

        // === Fecha ===
        DateTime fechaEmision = GetAny<DateTime>(vObj, DateTime.Now, "FechaEmision", "Fecha");

        // === Cajero/Vendedor (opcionales) ===
        string cajero = GetAny<string>(vObj, "", "NombreCajero", "Cajero");
        string vendedor = GetAny<string>(vObj, "", "NombreVendedor", "Vendedor");

        // === Pagos (si existen) ===
        var pagos = GetList(vObj, "Pagos", "PagosRealizados");
        decimal efectivo = pagos.Where(p =>
        {
            int id = GetAny<int>(p, 0, "IdTipoPagoVenta", "IdTipoPago");
            return id == 2 || id == 3; // efectivo soles/dólares
        }).Sum(p => GetAny<decimal>(p, 0m, "Monto", "Soles"));
        decimal tarjeta = pagos.Where(p =>
        {
            int id = GetAny<int>(p, 0, "IdTipoPagoVenta", "IdTipoPago");
            return id != 2 && id != 3 && id != 8;
        }).Sum(p => GetAny<decimal>(p, 0m, "Monto", "Soles"));
        decimal notaCredito = pagos.Where(p => GetAny<int>(p, 0, "IdTipoPagoVenta", "IdTipoPago") == 8)
                                   .Sum(p => GetAny<decimal>(p, 0m, "Monto", "Soles"));

        // === Detalles ===
        var detalles = GetList(vObj, "Detalles");
        // Cálculo de descuento “global” mostrado en ticket
        decimal descuento = (subTotal + igv) - total;

        // === QR ===
        string textoQR = $"{rucEmisor}|{tipoDocCpe}|{serie}|{numero}|{igv:0.00}|{total:0.00}|{fechaEmision:dd/MM/yyyy}|{tipoDocCli}|{docCliente}";
        string urlQR = $"https://api.qrserver.com/v1/create-qr-code/?size=150x150&data={Uri.EscapeDataString(textoQR)}";

        var sb = new System.Text.StringBuilder();

        sb.AppendLine("<pre style='font-family: monospace; font-size:12px;'>");
        sb.AppendLine(Center(tipoDocCpe == "01" ? "FACTURA ELECTRONICA" : "BOLETA DE VENTA ELECTRONICA"));
        sb.AppendLine(Center("================================"));
        if (!string.IsNullOrWhiteSpace(razonEmisor)) sb.AppendLine(Center(razonEmisor.ToUpper()));
        if (!string.IsNullOrWhiteSpace(rucEmisor)) sb.AppendLine(Center($"RUC: {rucEmisor}"));
        if (!string.IsNullOrWhiteSpace(dirEmisor)) sb.AppendLine(Center(dirEmisor));
        sb.AppendLine(Center("================================"));
        if (!string.IsNullOrWhiteSpace(cajero)) sb.AppendLine($"CAJERO: {cajero}");
        if (!string.IsNullOrWhiteSpace(vendedor)) sb.AppendLine($"VENDEDOR: {vendedor}");
        sb.AppendLine($"SERIE: {serie}-{numero:D4}");
        sb.AppendLine($"FECHA EMISION: {fechaEmision:dd/MM/yyyy} HORA: {fechaEmision:HH:mm}");
        if (!string.IsNullOrWhiteSpace(cliente)) sb.AppendLine($"CLIENTE: {cliente}");
        if (!string.IsNullOrWhiteSpace(docCliente)) sb.AppendLine($"DOC: {docCliente}");

        var formasPago = pagos.Any()
            ? string.Join(" / ", pagos.Select(p => GetAny<string>(p, "-", "FormaPago", "Descripcion")))
            : "-";
        sb.AppendLine($"FORMA DE PAGO: {formasPago}");
        sb.AppendLine(Center("================================"));
        sb.AppendLine("Cant Código  Producto   PU   TOTAL");
        sb.AppendLine(Center("----------------------------------------"));

        foreach (var item in detalles)
        {
            decimal cantidad = GetAny<decimal>(item, 0m, "Cantidad");
            decimal pu = GetAny<decimal>(item, 0m, "PrecioUnitario", "Precio");
            decimal totalLn = GetAny<decimal>(item, 0m, "Total");
            string codigo = GetAny<string>(item, "", "CodigoItem", "Codigo");
            if (codigo.Length > 8) codigo = codigo[..8];
            string desc = GetAny<string>(item, "", "DescripcionItem", "Descripcion");
            if (desc.Length > 12) desc = desc[..12];

            sb.AppendLine($"{cantidad,3:0} {codigo.PadRight(8)} {desc.PadRight(12)} {pu,6:0.00} {totalLn,7:0.00}");
        }

        sb.AppendLine(Center("----------------------------------------"));
        sb.AppendLine($"DESCUENTO                S/ {descuento,7:0.00}");
        sb.AppendLine($"TOTAL                    S/ {total,7:0.00}");
        sb.AppendLine(Center("***********************************"));
        sb.AppendLine($"Subtotal:                {subTotal,7:0.00}");
        sb.AppendLine($"IGV:                     {igv,7:0.00}");
        sb.AppendLine(Center("-----------------------------------"));
        sb.AppendLine($"EFECTIVO:                S/ {efectivo,7:0.00}");
        sb.AppendLine($"TARJETA/ONLINE:          S/ {tarjeta,7:0.00}");
        sb.AppendLine($"NOTA DE CRÉDITO:         S/ {notaCredito,7:0.00}");
        sb.AppendLine($"VUELTO:                  S/ {vuelto,7:0.00}");
        sb.AppendLine();
        sb.AppendLine("NO HAY DEVOLUCIÓN DE DINERO.");
        sb.AppendLine("TODO CAMBIO DE MERCADERÍA SE HARA");
        sb.AppendLine("DENTRO DE LAS 48 HORAS, PREVIA");
        sb.AppendLine("PRESENTACIÓN DEL COMPROBANTE Y");
        sb.AppendLine("VERIFICACIÓN DE LA MERCADERÍA.");
        sb.AppendLine(Center("-----------------------------------"));
        // Si tu DTO trae hash:
        string hash = GetAny<string>(vObj, "", "CodigoVerificacion", "Hash");
        if (!string.IsNullOrWhiteSpace(hash)) sb.AppendLine($"Hash: {hash}");
        sb.AppendLine("Representación Impresa del Documento");
        sb.AppendLine("Gracias por su compra!");
        sb.AppendLine("</pre>");
        sb.AppendLine($"<div style='text-align:center;'><img src='{urlQR}' width='100' height='100'/></div>");

        return sb.ToString();
    }
}
