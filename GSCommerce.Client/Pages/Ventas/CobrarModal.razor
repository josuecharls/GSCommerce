@using GSCommerce.Client.Models
@inject GSCommerce.Client.Services.TipoPagoVentaService TipoPagoVentaService

<div class="modal fade @(Mostrar ? "show d-block" : "")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">Cobrar Venta</h5>
                <button type="button" class="btn-close" @onclick="Cerrar" aria-label="Close"></button>
            </div>

            <div class="modal-body">

                <div class="mb-3">
                    <label>Forma de Pago:</label>
                    <select class="form-select" @bind="idTipoPagoSeleccionado">
                        @foreach (var tp in tiposPago)
                        {
                            <option value="@tp.IdTipoPagoVenta">@tp.Descripcion</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label>Monto (@Simbolo.Trim()):</label>
                    <input type="number" class="form-control" @bind="montoPago" min="0" step="0.01" @onkeydown="HandleMontoKeyDown" />
                </div>
                @if (TipoPagoSeleccionado?.Tipo == "Efectivo")
                {
                    <div class="mb-3">
                        <label>Vuelto:</label>
                        <input class="form-control" value="@VueltoCalculado.ToString("N2")" readonly />
                    </div>
                }
                @if (TipoPagoSeleccionado?.Tipo == "Tarjeta")
                {
                    <div class="mb-3">
                        <label>4 últimos dígitos de la tarjeta:</label>
                        <input class="form-control" maxlength="4" @bind="codigoVerificacion" />
                    </div>
                }
                @if (TipoPagoSeleccionado?.Descripcion.ToUpper().Contains("YAPE") == true)
                {
                    <div class="mb-3">
                        <label>3 dígitos de verificación:</label>
                        <input class="form-control" maxlength="3" @bind="codigoVerificacion" />
                    </div>
                }
                <div class="text-end mb-2">
                    <button class="btn btn-secondary me-2" @onclick="AgregarPago">Agregar Pago</button>
                </div>

                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Forma</th>
                            <th>Monto</th>
                            <th>Cod. Verif.</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pago in pagos)
                        {
                            <tr>
                                <td>@pago.FormaPago</td>
                                <td>@Simbolo@pago.Monto.ToString("N2")</td>
                                <td>@pago.CodigoVerificacion</td>
                                <td><button class="btn btn-danger btn-sm" @onclick="() => EliminarPago(pago)">X</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (VueltoCalculado > 0)
                {
                    <div class="text-end text-success">
                        <h5>Vuelto: @Simbolo@VueltoCalculado.ToString("N2")</h5>
                    </div>
                }
                <div class="text-end">
                    <h5>Total Pagado: @Simbolo@TotalPagado.ToString("N2")</h5>
                    <h5>Falta: @Simbolo@(Math.Max(0, MontoTotal - TotalPagado).ToString("N2"))</h5>
                </div>

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="ConfirmarPago" disabled="@(!PuedeConfirmar)">Confirmar Pago</button>
                <button type="button" class="btn btn-secondary" @onclick="Cerrar">Cancelar</button>
            </div>

        </div>
    </div>
</div>

@code {
    [Parameter] public decimal MontoTotal { get; set; }
    [Parameter] public EventCallback<List<DetallePagoDTO>> OnConfirmado { get; set; }
    [Parameter] public EventCallback OnCancelado { get; set; }
    [Parameter] public string MonedaAlmacen { get; set; } = "PEN";
    public bool Mostrar { get; set; }

    private List<TipoPagoVentaDTO> tiposPago = new();
    private int idTipoPagoSeleccionado;
    private decimal montoPago;
    private string? codigoVerificacion;
    private List<DetallePagoDTO> pagos = new();

    private string Simbolo => MonedaAlmacen == "USD" ? "$ " : "S/ ";

    private TipoPagoVentaDTO? TipoPagoSeleccionado => tiposPago.FirstOrDefault(t => t.IdTipoPagoVenta == idTipoPagoSeleccionado);

    private decimal TotalPagado => pagos.Sum(p => p.Monto);
    private decimal VueltoCalculado =>
        pagos.Where(p => p.IdTipoPagoVenta == 2 || p.IdTipoPagoVenta == 3).Sum(p => p.Monto) > MontoTotal
            ? pagos.Where(p => p.IdTipoPagoVenta == 2 || p.IdTipoPagoVenta == 3).Sum(p => p.Monto) - MontoTotal
            : 0;

    private bool PuedeConfirmar => TotalPagado >= MontoTotal;

    protected override async Task OnParametersSetAsync()
    {
        tiposPago = await TipoPagoVentaService.ObtenerTodosAsync();
        if (MonedaAlmacen != "USD")
        {
            tiposPago = tiposPago.Where(t => t.Descripcion != "Efectivo Dólares").ToList();
        }
        idTipoPagoSeleccionado = tiposPago.FirstOrDefault()?.IdTipoPagoVenta ?? 0;
    }

    public void Abrir()
    {
        pagos.Clear();
        montoPago = MontoTotal;
        codigoVerificacion = null;
        idTipoPagoSeleccionado = tiposPago.FirstOrDefault()?.IdTipoPagoVenta ?? 0;
        Mostrar = true;
    }

    private void Cerrar()
    {
        Mostrar = false;
        OnCancelado.InvokeAsync();
    }

    private void AgregarPago()
    {
        if (montoPago > 0)
        {
            var nuevoPago = new DetallePagoDTO
            {
                FormaPago = TipoPagoSeleccionado?.Descripcion ?? string.Empty,
                IdTipoPagoVenta = idTipoPagoSeleccionado,
                Monto = montoPago,
                CodigoVerificacion = codigoVerificacion,
                Datos = codigoVerificacion
            };

            if (idTipoPagoSeleccionado == 3)
            {
                nuevoPago.Dolares = montoPago;
            }
            else
            {
                nuevoPago.Soles = montoPago;
            }

            pagos.Add(nuevoPago);

            montoPago = 0;
            codigoVerificacion = null;
            idTipoPagoSeleccionado = tiposPago.FirstOrDefault()?.IdTipoPagoVenta ?? 0;
        }
    }

    private void HandleMontoKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AgregarPago();
        }
    }

    private void EliminarPago(DetallePagoDTO pago)
    {
        pagos.Remove(pago);
    }

    private async Task ConfirmarPago()
    {
        // Calculamos el vuelto total antes de enviar los pagos
        var vuelto = VueltoCalculado;
        var pagoEfectivo = pagos.FirstOrDefault(p => p.IdTipoPagoVenta == 2 || p.IdTipoPagoVenta == 3);

        if (pagoEfectivo != null)
        {
            pagoEfectivo.Vuelto = vuelto;
        }

        Mostrar = false;
        await OnConfirmado.InvokeAsync(pagos);
    }
}