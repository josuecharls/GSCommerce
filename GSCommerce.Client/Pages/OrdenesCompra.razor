@page "/ordenes-compra"
@**@
@using Microsoft.AspNetCore.Authorization
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@using System.Linq
@using System
@inject IngresosEgresosService ieService
@inject OrdenCompraService ocService
@inject NavigationManager Nav
@inject IJSRuntime JS

<h3>Ordenes de Compra</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <label>Desde:</label>
        <input type="date" class="form-control" @bind-value="desde" @bind-value:event="oninput" />
    </div>
    <div class="col-md-3">
        <label>Hasta:</label>
        <input type="date" class="form-control" @bind-value="hasta" @bind-value:event="oninput" />
    </div>
    <div class="col-md-4">
        <label>Proveedor:</label>
        <div class="input-group">
            <input class="form-control" value="@nombreProveedor" readonly />
            <button class="btn btn-secondary" @onclick="() => mostrarProveedorModal = true">Buscar</button>
            <button class="btn btn-outline-secondary" @onclick="LimpiarProveedor">X</button>
        </div>
    </div>
    <div class="col-md-2 d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="Buscar">Buscar</button>
    </div>
</div>

<div class="mb-2 text-end">
    <button class="btn btn-success" @onclick="Nuevo">+ Nueva OC</button>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Número</th>
            <th>Proveedor</th>
            <th>Total</th>
            <th>Estado</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (ordenes.Any())
        {
            foreach (var o in OrdenesPagina)
            {
                <tr>
                    <td>@o.FechaOc.ToString("dd/MM/yyyy")</td>
                    <td>@o.NumeroOc</td>
                    <td>@o.Nombre</td>
                    <td>@o.ImporteTotal.ToString("C")</td>
                    <td>@o.Estado</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => VerDetalle(o.IdOc)">Ver</button>
                        <button class="btn btn-sm btn-secondary" @onclick="() => GenerarIngreso(o.IdOc)">Ingreso</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="6" class="text-center">Sin registros</td></tr>
        }
    </tbody>
</table>
<div class="d-flex justify-content-between align-items-center mb-4">
    <button class="btn btn-secondary" @onclick="() => CambiarPaginaOrdenes(-1)" disabled="@(paginaOrdenes <= 1)">Anterior</button>
    <span>Página @paginaOrdenes de @TotalPaginasOrdenes</span>
    <button class="btn btn-secondary" @onclick="() => CambiarPaginaOrdenes(1)" disabled="@(paginaOrdenes >= TotalPaginasOrdenes)">Siguiente</button>
</div>

<h4>Pagos a Proveedores</h4>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Glosa</th>
            <th>Monto</th>
            <th>Estado</th>
        </tr>
    </thead>
    <tbody>
        @if (pagos.Any())
        {
            foreach (var p in PagosPagina)
            {
                <tr>
                    <td>@p.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@p.Glosa</td>
                    <td>@p.Monto.ToString("C")</td>
                    <td>@(p.Estado == "E" ? "Emitido" : "Anulado")</td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="4" class="text-center">Sin registros</td></tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between align-items-center mb-4">
    <button class="btn btn-secondary" @onclick="() => CambiarPaginaPagos(-1)" disabled="@(paginaPagos <= 1)">Anterior</button>
    <span>Página @paginaPagos de @TotalPaginasPagos</span>
    <button class="btn btn-secondary" @onclick="() => CambiarPaginaPagos(1)" disabled="@(paginaPagos >= TotalPaginasPagos)">Siguiente</button>
</div>

<ProveedorBuscarModal Mostrar="mostrarProveedorModal" MostrarChanged="(v) => mostrarProveedorModal = v" OnSeleccionado="SeleccionarProveedor" />

@code {
    private DateTime desde = DateTime.Today;
    private DateTime hasta = DateTime.Today;
    private List<OrdenCompraConsultaDTO> ordenes = new();
    private List<IngresoEgresoDTO> pagos = new();
    private bool mostrarProveedorModal = false;
    private int? idProveedor;
    private string nombreProveedor = string.Empty;
    private int paginaOrdenes = 1;
    private int paginaPagos = 1;
    private int pageSize = 10;

    private IEnumerable<OrdenCompraConsultaDTO> OrdenesPagina => ordenes.Skip((paginaOrdenes - 1) * pageSize).Take(pageSize);
    private IEnumerable<IngresoEgresoDTO> PagosPagina => pagos.Skip((paginaPagos - 1) * pageSize).Take(pageSize);
    private int TotalPaginasOrdenes => Math.Max(1, (int)Math.Ceiling((double)ordenes.Count / pageSize));
    private int TotalPaginasPagos => Math.Max(1, (int)Math.Ceiling((double)pagos.Count / pageSize));


    protected override async Task OnInitializedAsync()
    {
        await Buscar();
    }

    private async Task Buscar()
    {
        ordenes = await ocService.ListarAsync(desde, hasta, idProveedor);
        paginaOrdenes = 1;
        pagos = await ieService.Listar(null, null, desde, hasta, "E", "PAGO PROVEEDORES");
        paginaPagos = 1;
    }

    private void CambiarPaginaOrdenes(int delta)
    {
        paginaOrdenes = Math.Max(1, Math.Min(paginaOrdenes + delta, TotalPaginasOrdenes));
    }

    private void CambiarPaginaPagos(int delta)
    {
        paginaPagos = Math.Max(1, Math.Min(paginaPagos + delta, TotalPaginasPagos));
    }

    private void Nuevo() => Nav.NavigateTo("/ordenes-compra/nuevo");

    private void VerDetalle(int id) => Nav.NavigateTo($"/ordenes-compra/{id}");

    private async Task GenerarIngreso(int id)
    {
        var ok = await ocService.GenerarIngresoAsync(id, 1009);
        await JS.InvokeVoidAsync("alert", ok ? "Ingreso generado" : "No se pudo generar ingreso");
    }

    private Task SeleccionarProveedor(ProveedorDTO p)
    {
        idProveedor = p.IdProveedor;
        nombreProveedor = p.Nombre;
        return Task.CompletedTask;
    }

    private void LimpiarProveedor()
    {
        idProveedor = null;
        nombreProveedor = string.Empty;
    }
}