@page "/ordenes-compra"
@**@
@using Microsoft.AspNetCore.Authorization
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@using System.Linq
@using System
@inject OrdenCompraService ocService
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject HttpClient Http

<h3>Ordenes de Compra</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <label>Desde:</label>
        <input type="date" class="form-control" @bind-value="desdeOc" @bind-value:event="oninput" />
    </div>
    <div class="col-md-3">
        <label>Hasta:</label>
        <input type="date" class="form-control" @bind-value="hastaOc" @bind-value:event="oninput" />
    </div>
    <div class="col-md-4">
        <label>Proveedor:</label>
        <div class="input-group">
            <input class="form-control" value="@nombreProveedorOc" readonly />
            <button class="btn btn-secondary" @onclick="() => mostrarProveedorModalOc = true">Buscar</button>
            <button class="btn btn-outline-secondary" @onclick="LimpiarProveedorOc">X</button>
        </div>
    </div>
    <div class="col-md-2 d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="BuscarOc">Buscar</button>
    </div>
</div>

<div class="mb-2 text-end">
    <button class="btn btn-outline-success me-2" @onclick="ExportarOrdenesExcel">Exportar Excel</button>
    <button class="btn btn-success" @onclick="Nuevo">+ Nueva OC</button>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Control</th>
            <th>Proveedor</th>
            <th>Total</th>
            <th>Estado</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (ordenesPaginated.Any())
        {
            foreach (var o in ordenesPaginated)
            {
                <tr>
                    <td>@o.FechaOc.ToString("dd/MM/yyyy")</td>
                    <td>@o.Glosa</td>
                    <td>@o.Nombre</td>
                    <td>@o.ImporteTotal.ToString("C")</td>
                    <td>@o.Estado</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => VerDetalle(o.IdOc)">Ver</button>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => Editar(o.IdOc)" disabled="@(!PuedeEditar(o))">Editar</button>
                        <button class="btn btn-sm btn-secondary" @onclick="() => GenerarIngreso(o.IdOc)" disabled="@(!PuedeGenerarIngreso(o))">Ingreso</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="6" class="text-center">Sin registros</td></tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between">
    <button class="btn btn-secondary" @onclick="PrevPageOc" disabled="@(currentPageOc <= 1)">Anterior</button>
    <span>Página @currentPageOc de @totalPagesOc</span>
    <button class="btn btn-secondary" @onclick="NextPageOc" disabled="@(currentPageOc >= totalPagesOc)">Siguiente</button>
</div>

<div class="mt-2 text-end"><strong>Total: @totalOrdenes.ToString("C")</strong></div>

<h3 class="mt-5">Pago Proveedores</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <label>Desde:</label>
        <input type="date" class="form-control" @bind-value="desdePago" @bind-value:event="oninput" />
    </div>
    <div class="col-md-3">
        <label>Hasta:</label>
        <input type="date" class="form-control" @bind-value="hastaPago" @bind-value:event="oninput" />
    </div>
    <div class="col-md-4">
        <label>Proveedor:</label>
        <div class="input-group">
            <input class="form-control" value="@nombreProveedorPago" readonly />
            <button class="btn btn-secondary" @onclick="() => mostrarProveedorModalPago = true">Buscar</button>
            <button class="btn btn-outline-secondary" @onclick="LimpiarProveedorPago">X</button>
        </div>
    </div>
    <div class="col-md-2 d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="BuscarPagos">Buscar</button>
    </div>
</div>
<div class="mb-2 text-end">
    <button class="btn btn-outline-success" @onclick="ExportarPagosExcel">Exportar Excel</button>
</div>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Almacén</th>
            <th>Proveedor</th>
            <th>Total</th>
            <th>Estado</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (pagosPaginated.Any())
        {
            foreach (var o in pagosPaginated)
            {
                <tr>
                    <td>@o.FechaOc.ToString("dd/MM/yyyy")</td>
                    <td>@o.Almacen</td>
                    <td>@o.Nombre</td>
                    <td>@o.ImporteTotal.ToString("C")</td>
                    <td>@o.Estado</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => VerDetalle(o.IdOc)">Ver</button>
                        <button class="btn btn-sm btn-secondary" @onclick="() => VerFotoPago(o)">Foto</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="6" class="text-center">Sin registros</td></tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between">
    <button class="btn btn-secondary" @onclick="PrevPagePagos" disabled="@(currentPagePagos <= 1)">Anterior</button>
    <span>Página @currentPagePagos de @totalPagesPagos</span>
    <button class="btn btn-secondary" @onclick="NextPagePagos" disabled="@(currentPagePagos >= totalPagesPagos)">Siguiente</button>
</div>

<div class="mt-2 text-end"><strong>Total: @totalPagos.ToString("C")</strong></div>

@if (showPhotoModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Foto</h5>
                    <button type="button" class="btn-close" @onclick="ClosePhotoModal"></button>
                </div>
                <div class="modal-body text-center">
                    @if (!string.IsNullOrEmpty(photoUrl))
                    {
                        <img src="@photoUrl" alt="Foto" class="img-fluid img-thumbnail" style="max-width:300px;max-height:300px;" />
                    }
                    else
                    {
                        <p>No hay foto disponible.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="ClosePhotoModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

<ProveedorBuscarModal Mostrar="mostrarProveedorModalOc" MostrarChanged="(v) => mostrarProveedorModalOc = v" OnSeleccionado="SeleccionarProveedorOc" />
<ProveedorBuscarModal Mostrar="mostrarProveedorModalPago" MostrarChanged="(v) => mostrarProveedorModalPago = v" OnSeleccionado="SeleccionarProveedorPago" />

@code {
    private DateTime desdeOc = DateTime.Today;
    private DateTime hastaOc = DateTime.Today;
    private List<OrdenCompraConsultaDTO> ordenes = new();
    private bool mostrarProveedorModalOc = false;
    private int? idProveedorOc;
    private string nombreProveedorOc = string.Empty;

    private DateTime desdePago = DateTime.Today;
    private DateTime hastaPago = DateTime.Today;
    private List<OrdenCompraConsultaDTO> pagos = new();
    private bool mostrarProveedorModalPago = false;
    private int? idProveedorPago;
    private string nombreProveedorPago = string.Empty;

    private bool showPhotoModal = false;
    private string? photoUrl;

    private int pageSizeOc = 10;
    private int currentPageOc = 1;
    private int totalPagesOc => (int)Math.Ceiling((double)ordenes.Count / pageSizeOc);
    private IEnumerable<OrdenCompraConsultaDTO> ordenesPaginated => ordenes.Skip((currentPageOc - 1) * pageSizeOc).Take(pageSizeOc);

    private int pageSizePagos = 10;
    private int currentPagePagos = 1;
    private int totalPagesPagos => (int)Math.Ceiling((double)pagos.Count / pageSizePagos);
    private IEnumerable<OrdenCompraConsultaDTO> pagosPaginated => pagos.Skip((currentPagePagos - 1) * pageSizePagos).Take(pageSizePagos);

    private decimal totalOrdenes => ordenes.Sum(o => o.ImporteTotal);
    private decimal totalPagos => pagos.Sum(o => o.ImporteTotal);

    private HashSet<int> ingresoEnProceso = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(BuscarOc(), BuscarPagos());
    }

    private async Task BuscarOc()
    {
        var lista = await ocService.ListarAsync(desdeOc, hastaOc, idProveedorOc);
        ordenes = lista.Where(o => !o.NumeroOc.StartsWith("PP-", StringComparison.OrdinalIgnoreCase)).ToList();
        currentPageOc = 1;
        ingresoEnProceso.Clear();
    }

    private async Task BuscarPagos()
    {
        var lista = await ocService.ListarAsync(desdePago, hastaPago, idProveedorPago);
        pagos = lista.Where(o => o.NumeroOc.StartsWith("PP-", StringComparison.OrdinalIgnoreCase)).ToList();
        currentPagePagos = 1;
    }

    private async Task ExportarOrdenesExcel()
    {
        if (!ordenes.Any())
            return;

        var headers = new[] { "Fecha", "Número", "Proveedor", "Total", "Estado" };
        var rows = ordenes.Select(o => new object[]
        {
            o.FechaOc.ToString("dd/MM/yyyy"),
            o.NumeroOc,
            o.Nombre,
            o.ImporteTotal,
            o.Estado ?? string.Empty
        }).ToArray();

        await JS.InvokeVoidAsync("exportToExcel", headers, rows, $"OrdenesCompra_{desdeOc:yyyyMMdd}_{hastaOc:yyyyMMdd}");
    }

    private async Task ExportarPagosExcel()
    {
        if (!pagos.Any())
            return;

        var headers = new[] { "Fecha", "Almacén", "Proveedor", "Total", "Estado" };
        var rows = pagos.Select(o => new object[]
        {
            o.FechaOc.ToString("dd/MM/yyyy"),
            o.Almacen ?? string.Empty,
            o.Nombre,
            o.ImporteTotal,
            o.Estado ?? string.Empty
        }).ToArray();

        await JS.InvokeVoidAsync("exportToExcel", headers, rows, $"PagosProveedores_{desdePago:yyyyMMdd}_{hastaPago:yyyyMMdd}");
    }

    private void Nuevo() => Nav.NavigateTo("/ordenes-compra/nuevo");

    private void VerDetalle(int id) => Nav.NavigateTo($"/ordenes-compra/{id}");

    private void Editar(int id) => Nav.NavigateTo($"/ordenes-compra/editar/{id}");

    private async Task GenerarIngreso(int id)
    {
        if (!ingresoEnProceso.Add(id))
            return;

        try
        {
            var resultado = await ocService.GenerarIngresoAsync(id, 1009);
            if (resultado.Success)
            {
                await JS.InvokeVoidAsync("alert", "Ingreso generado");
                var orden = ordenes.FirstOrDefault(o => o.IdOc == id);
                if (orden != null)
                {
                    orden.Estado = resultado.Estado ?? "INGRESADO";
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", resultado.ErrorMessage ?? "No se pudo generar ingreso");
            }
        }
        finally
        {
            ingresoEnProceso.Remove(id);
        }
    }

    private static bool PuedeEditar(OrdenCompraConsultaDTO o) =>
        string.IsNullOrEmpty(o.Estado) || o.Estado.Equals("PENDIENTE", StringComparison.OrdinalIgnoreCase);

    private bool PuedeGenerarIngreso(OrdenCompraConsultaDTO o) =>
        PuedeEditar(o) && !ingresoEnProceso.Contains(o.IdOc);


    private Task SeleccionarProveedorOc(ProveedorDTO p)
    {
        idProveedorOc = p.IdProveedor;
        nombreProveedorOc = p.Nombre;
        return Task.CompletedTask;
    }

    private Task SeleccionarProveedorPago(ProveedorDTO p)
    {
        idProveedorPago = p.IdProveedor;
        nombreProveedorPago = p.Nombre;
        return Task.CompletedTask;
    }

    private void LimpiarProveedorOc()
    {
        idProveedorOc = null;
        nombreProveedorOc = string.Empty;
    }

    private void LimpiarProveedorPago()
    {
        idProveedorPago = null;
        nombreProveedorPago = string.Empty;
    }

    private void PrevPageOc()
    {
        if (currentPageOc > 1) currentPageOc--;
    }

    private void NextPageOc()
    {
        if (currentPageOc < totalPagesOc) currentPageOc++;
    }

    private void PrevPagePagos()
    {
        if (currentPagePagos > 1) currentPagePagos--;
    }

    private void NextPagePagos()
    {
        if (currentPagePagos < totalPagesPagos) currentPagePagos++;
    }

    private void VerFotoPago(OrdenCompraConsultaDTO o)
    {
        if (!o.NumeroOc.StartsWith("PP-", StringComparison.OrdinalIgnoreCase))
            return;
        if (int.TryParse(o.NumeroOc[3..], out var idIe))
        {
            photoUrl = $"{Http.BaseAddress}api/IngresosEgresos/foto/{idIe}?t={DateTime.Now.Ticks}";
            showPhotoModal = true;
        }
    }

    private void ClosePhotoModal()
    {
        showPhotoModal = false;
        photoUrl = null;
    }
}