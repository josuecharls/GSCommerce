@page "/guias/edit/{id:int}"
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject MovimientoGuiaService MovimientoGuiaService
@inject NavigationManager Navigation
@inject AlmacenService AlmacenService
@inject ProveedorService ProveedorService
@using System.Linq

<h3><i class="bi bi-pencil-square"></i> Editar Guía</h3>

@if (isLoading)
{
    <p>Cargando...</p>
}
else
{
    <div class="card p-4">
        <div class="row">
            <div class="col-md-6">
                <label>Motivo</label>
                <input class="form-control" @bind="guia.Motivo" />

                <label class="mt-3">Descripción</label>
                <input class="form-control" @bind="guia.Descripcion" />

                <label class="mt-3">Estado</label>
                <select class="form-control" @bind="guia.Estado">
                    <option value="E">Emitido</option>
                    <option value="A">Anulado</option>
                </select>
            </div>
            <div class="col-md-6">
                <label>Almacén</label>
                <select class="form-control" @bind="guia.IdAlmacen">
                    @foreach (var a in almacenes)
                    {
                        <option value="@a.IdAlmacen">@a.Nombre</option>
                    }
                </select>

                <label class="mt-3">Proveedor</label>
                <input class="form-control"
                       list="proveedoresList"
                       @bind="proveedorNombre"
                       @bind:event="oninput"
                       @bind:after="SincronizarProveedorEdit"
                       placeholder="Buscar proveedor..." />
                <datalist id="proveedoresList">
                    @foreach (var p in proveedores)
                    {
                        <option value="@p.Nombre"></option>
                    }
                </datalist>
            </div>
        </div>

        <hr />

        <h5><i class="bi bi-box-seam-fill"></i>  Detalle de Artículos</h5>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Código</th>
                    <th>Descripción</th>
                    <th>Cantidad</th>
                    <th>Valor</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in guia.Detalles)
                {
                    <tr>
                        <td>@item.IdArticulo</td>
                        <td>@item.DescripcionArticulo</td>
                        <td><input type="number" class="form-control" @bind="item.Cantidad" /></td>
                        <td><input type="number" step="0.01" class="form-control" @bind="item.Valor" /></td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveDetalle(item)">❌</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-secondary mb-3" @onclick="AgregarArticulo">+ Agregar Artículo</button>

        <div class="text-center">
            <button class="btn btn-primary" @onclick="Guardar"><i class="bi bi-floppy2"></i>  Guardar</button>
            <button class="btn btn-secondary" @onclick="Cancelar"><i class="bi bi-x-lg"></i> Cancelar</button>
        </div>
    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private MovimientoGuiaDTO guia = new();
    private List<AlmacenDTO> almacenes = new();
    private List<ProveedorDTO> proveedores = new();
    private bool isLoading = true;
    private string proveedorNombre = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        guia = await MovimientoGuiaService.GetMovimientoById(id) ?? new();
        almacenes = await AlmacenService.GetAlmacenes() ?? new();
        proveedores = await ProveedorService.GetProveedores() ?? new();
        proveedorNombre = proveedores.FirstOrDefault(p => p.IdProveedor == guia.IdProveedor)?.Nombre ?? string.Empty;
        isLoading = false;
    }

    private void AgregarArticulo()
    {
        guia.Detalles.Add(new MovimientoDetalleDTO
            {
                IdMovimiento = guia.IdMovimiento,
                Item = guia.Detalles.Count + 1,
                IdArticulo = "",
                DescripcionArticulo = "",
                Cantidad = 1,
                Valor = 0
            });
    }

    private void RemoveDetalle(MovimientoDetalleDTO item)
    {
        guia.Detalles.Remove(item);
        // Reordenar los Items
        int i = 1;
        foreach (var d in guia.Detalles)
        {
            d.Item = i++;
        }
    }

    private void OnProveedorChanged(ChangeEventArgs e)
    {
        proveedorNombre = e.Value?.ToString() ?? string.Empty;
        var prov = proveedores.FirstOrDefault(p => p.Nombre.Equals(proveedorNombre, System.StringComparison.OrdinalIgnoreCase));
        guia.IdProveedor = prov?.IdProveedor;
    }

    private async Task Guardar()
    {
        bool ok = await MovimientoGuiaService.UpdateMovimiento(guia.IdMovimiento, guia);
        if (ok) Navigation.NavigateTo("/guias");
    }

    private void SincronizarProveedorEdit()
    {
        var prov = proveedores.FirstOrDefault(p =>
            p.Nombre.Equals(proveedorNombre, StringComparison.OrdinalIgnoreCase));
        guia.IdProveedor = prov?.IdProveedor;
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/guias");
    }
}
