@page "/proveedor"
@**@
@using Microsoft.AspNetCore.Authorization
@using GSCommerce.Client.Models
@using GSCommerce.Client.Services
@inject ProveedorService ProveedorService
@inject NavigationManager Navigation

<h3>📦 Lista de Proveedores</h3>

<!-- Botón para agregar un nuevo proveedor -->
<button @onclick="CreateNewProveedor" class="btn btn-success">➕ Nuevo Proveedor</button>

<!-- Campo de búsqueda -->
<input type="text" @bind="searchTerm" placeholder="🔍 Buscar proveedor..." class="form-control w-50 mt-2" />
<button class="btn btn-primary mt-2" @onclick="SearchProveedor">🔍 Buscar</button>

<!-- Tabla de proveedores -->
<table class="table table-striped mt-3">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Nombre Comercial</th>
            <th>RUC</th>
            <th>Teléfono</th>
            <th>Contacto</th>
            <th>Estado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (proveedorList.Any())
        {
            @foreach (var p in proveedorList)
            {
                <tr>
                    <td>@p.Nombre</td>
                    <td>@p.NombreComercial</td>
                    <td>@p.Ruc</td>
                    <td>@p.Telefono</td>
                    <td>@p.Contacto</td>
                    <td>
                        <span class="badge @(p.Estado ? "bg-success" : "bg-danger")">
                            @(p.Estado ? "Activo" : "Inactivo")
                        </span>
                    </td>
                    <td class="text-center">
                        <button @onclick="() => EditProveedor(p.IdProveedor)" class="btn btn-warning btn-sm me-1">
                            ✏️ Editar
                        </button>
                        <button @onclick="() => ConfirmDeleteProveedor(p.IdProveedor, p.Nombre)" class="btn btn-danger btn-sm">
                            🗑️ Eliminar
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="7" class="text-center">⏳ Cargando proveedores...</td></tr>
        }
    </tbody>
</table>

<!-- Controles de paginación -->
<div class="d-flex justify-content-between mt-3">
    <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!CanPrev)">
        ⬅️ Anterior
    </button>
    <span>Página @currentPage de @totalPages</span>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanNext)">
        Siguiente ➡️
    </button>
</div>

<!-- Modal de Confirmación para Eliminar -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">❗ Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body text-center">
                    <p>¿Desea eliminar al proveedor <strong>@deleteProveedorName</strong> de la base de datos?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteConfirmed">🗑️ Sí</button>
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">❌ No</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProveedorDTO> proveedorList = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private string searchTerm = "";
    private bool isDeleting = false;
    private bool showDeleteModal = false;
    private int deleteProveedorId;
    private string deleteProveedorName = "";

    private void ConfirmDeleteProveedor(int id, string name)
    {
        deleteProveedorId = id;
        deleteProveedorName = name;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        deleteProveedorId = 0;
        deleteProveedorName = "";
    }

    private async Task DeleteConfirmed()
    {
        if (!isDeleting && deleteProveedorId > 0)
        {
            isDeleting = true;
            try
            {
                if (await ProveedorService.DeleteProveedor(deleteProveedorId))
                {
                    await LoadProveedores();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar: {ex.Message}");
            }
            isDeleting = false;
            CloseDeleteModal();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProveedores();
    }

    private async Task LoadProveedores()
    {
        try
        {
            var response = await ProveedorService.GetProveedorList(currentPage, pageSize, searchTerm);
            proveedorList = response.Data;
            totalPages = response.TotalPages;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar proveedores: {ex.Message}");
        }
    }

    private async Task SearchProveedor()
    {
        currentPage = 1;
        await LoadProveedores();
    }

    private async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadProveedores();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadProveedores();
        }
    }

    private void CreateNewProveedor()
    {
        Navigation.NavigateTo("/proveedor-form");
    }

    private void EditProveedor(int id)
    {
        Navigation.NavigateTo($"/proveedor/edit/{id}");
    }

    private bool CanPrev => currentPage > 1;
    private bool CanNext => currentPage < totalPages;
}
